{
	"id": "01fd1e96201d523ad613d67a25f1cb3e",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.18",
	"solcLongVersion": "0.8.18+commit.87f61d96",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [
				"ds-test/=lib/forge-std/lib/ds-test/src/",
				"forge-std/=lib/forge-std/src/"
			]
		},
		"sources": {
			"src/SimpleAccount.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable reason-string */\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\n\nimport \"./BaseAccount.sol\";\n\n/**\n  * minimal account.\n  *  this is sample minimal account.\n  *  has execute, eth handling methods\n  *  has a single signer that can send requests through the entryPoint.\n  */\ncontract SimpleAccount is BaseAccount, UUPSUpgradeable, Initializable {\n    using ECDSA for bytes32;\n\n    //explicit sizes of nonce, to fit a single storage cell with \"owner\"\n    uint96 private _nonce;\n    address public owner;\n\n    function nonce() public view virtual override returns (uint256) {\n        return _nonce;\n    }\n\n    function entryPoint() public view virtual override returns (IEntryPoint) {\n        return _entryPoint;\n    }\n\n    IEntryPoint private _entryPoint;\n\n    event SimpleAccountInitialized(IEntryPoint indexed entryPoint, address indexed owner);\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    constructor(IEntryPoint anEntryPoint) {\n        _entryPoint = anEntryPoint;\n    }\n\n    modifier onlyOwner() {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() internal view {\n        //directly from EOA owner, or through the entryPoint (which gets redirected through execFromEntryPoint)\n        require(msg.sender == owner || msg.sender == address(this), \"only owner\");\n    }\n\n    /**\n     * execute a transaction (called directly from owner, not by entryPoint)\n     */\n    function execute(address dest, uint256 value, bytes calldata func) external {\n        _requireFromEntryPointOrOwner();\n        _call(dest, value, func);\n    }\n\n    /**\n     * execute a sequence of transaction\n     */\n    function executeBatch(address[] calldata dest, bytes[] calldata func) external {\n        _requireFromEntryPointOrOwner();\n        require(dest.length == func.length, \"wrong array lengths\");\n        for (uint256 i = 0; i < dest.length; i++) {\n            _call(dest[i], 0, func[i]);\n        }\n    }\n\n    /**\n     * change entry-point:\n     * an account must have a method for replacing the entryPoint, in case the the entryPoint is\n     * upgraded to a newer version.\n     */\n    function initialize(address anOwner, IEntryPoint anEntryPoint) public virtual initializer {\n        _initialize(anOwner, anEntryPoint);\n    }\n\n    function _initialize(address anOwner, IEntryPoint anEntryPoint) internal virtual {\n        owner = anOwner;\n        _entryPoint = anEntryPoint;\n        emit SimpleAccountInitialized(_entryPoint, owner);\n    }\n\n    /**\n     * validate the userOp is correct.\n     * revert if it doesn't.\n     * - must only be called from the entryPoint.\n     * - make sure the signature is of our supported signer.\n     * - validate current nonce matches request nonce, and increment it.\n     * - pay prefund, in case current deposit is not enough\n     */\n    function _requireFromEntryPointOrOwner() internal view {\n        require(msg.sender == address(entryPoint()) || msg.sender == owner, \"account: not Owner or EntryPoint\");\n    }\n\n    /// implement template method of BaseAccount\n    function _validateAndUpdateNonce(UserOperation calldata userOp) internal override {\n        require(_nonce++ == userOp.nonce, \"account: invalid nonce\");\n    }\n\n    /// implement template method of BaseAccount\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash, address)\n    internal override virtual returns (uint256 sigTimeRange) {\n        bytes32 hash = userOpHash.toEthSignedMessageHash();\n        if (owner != hash.recover(userOp.signature))\n            return SIG_VALIDATION_FAILED;\n        return 0;\n    }\n\n    function _call(address target, uint256 value, bytes memory data) internal {\n        (bool success, bytes memory result) = target.call{value : value}(data);\n        if (!success) {\n            assembly {\n                revert(add(result, 32), mload(result))\n            }\n        }\n    }\n\n    /**\n     * check current account deposit in the entryPoint\n     */\n    function getDeposit() public view returns (uint256) {\n        return entryPoint().balanceOf(address(this));\n    }\n\n    /**\n     * deposit more funds for this account in the entryPoint\n     */\n    function addDeposit() public payable {\n\n        (bool req,) = address(entryPoint()).call{value : msg.value}(\"\");\n        require(req);\n    }\n\n    /**\n     * withdraw value from the account's deposit\n     * @param withdrawAddress target to send to\n     * @param amount to withdraw\n     */\n    function withdrawDepositTo(address payable withdrawAddress, uint256 amount) public onlyOwner {\n        entryPoint().withdrawTo(withdrawAddress, amount);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal view override {\n        (newImplementation);\n        _onlyOwner();\n    }\n}\n"
			},
			"src/BaseAccount.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable reason-string */\n\nimport \"./interfaces/IAccount.sol\";\nimport \"./interfaces/IEntryPoint.sol\";\n\n/**\n * Basic account implementation.\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\n * specific account implementation should inherit it and provide the account-specific logic\n */\nabstract contract BaseAccount is IAccount {\n    using UserOperationLib for UserOperation;\n\n    //return value in case of signature failure, with no time-range.\n    // equivalent to packSigTimeRange(true,0,0);\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\n\n    /**\n     * helper to pack the return value for validateUserOp\n     * @param sigFailed true if the signature check failed, false, if it succeeded.\n     * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n     * @param validAfter first timestamp this UserOperation is valid\n     */\n    function packSigTimeRange(bool sigFailed, uint256 validUntil, uint256 validAfter) internal pure returns (uint256) {\n        return uint256(sigFailed ? 1 : 0) | uint256(validUntil << 8) | uint256(validAfter << (64+8));\n    }\n\n    /**\n     * return the account nonce.\n     * subclass should return a nonce value that is used both by _validateAndUpdateNonce, and by the external provider (to read the current nonce)\n     */\n    function nonce() public view virtual returns (uint256);\n\n    /**\n     * return the entryPoint used by this account.\n     * subclass should return the current entryPoint used by this account.\n     */\n    function entryPoint() public view virtual returns (IEntryPoint);\n\n    /**\n     * Validate user's signature and nonce.\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\n     */\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, address aggregator, uint256 missingAccountFunds)\n    external override virtual returns (uint256 sigTimeRange) {\n        _requireFromEntryPoint();\n        sigTimeRange = _validateSignature(userOp, userOpHash, aggregator);\n        if (userOp.initCode.length == 0) {\n            _validateAndUpdateNonce(userOp);\n        }\n        _payPrefund(missingAccountFunds);\n    }\n\n    /**\n     * ensure the request comes from the known entrypoint.\n     */\n    function _requireFromEntryPoint() internal virtual view {\n        require(msg.sender == address(entryPoint()), \"account: not from EntryPoint\");\n    }\n\n    /**\n     * validate the signature is valid for this message.\n     * @param userOp validate the userOp.signature field\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\n     *          (also hashes the entrypoint and chain-id)\n     * @param aggregator the current aggregator. can be ignored by accounts that don't use aggregators\n     * @return sigTimeRange signature and time-range of this operation\n     *      <byte> sigFailure - (1) to mark signature failure, 0 for valid signature.\n     *      <8-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n     *      <8-byte> validAfter - first timestamp this operation is valid\n     *      The an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\n     */\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash, address aggregator)\n    internal virtual returns (uint256 sigTimeRange);\n\n    /**\n     * validate the current nonce matches the UserOperation nonce.\n     * then it should update the account's state to prevent replay of this UserOperation.\n     * called only if initCode is empty (since \"nonce\" field is used as \"salt\" on account creation)\n     * @param userOp the op to validate.\n     */\n    function _validateAndUpdateNonce(UserOperation calldata userOp) internal virtual;\n\n    /**\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\n     * subclass MAY override this method for better funds management\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\n     * it will not be required to send again)\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\n     */\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\n        if (missingAccountFunds != 0) {\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\"\");\n            (success);\n            //ignore failure (its EntryPoint's job to verify, not account.)\n        }\n    }\n}"
			},
			"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"
			},
			"@openzeppelin/contracts/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
			},
			"src/interfaces/IEntryPoint.sol": {
				"content": "/**\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\n ** Only one instance required on each chain.\n **/\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable reason-string */\n\nimport \"./UserOperation.sol\";\nimport \"./IStakeManager.sol\";\nimport \"./IAggregator.sol\";\n\ninterface IEntryPoint is IStakeManager {\n\n    /***\n     * An event emitted after each successful request\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\n     * @param sender - the account that generates this request.\n     * @param paymaster - if non-null, the paymaster that pays for this request.\n     * @param nonce - the nonce value from the request\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution)\n     * @param success - true if the sender transaction succeeded, false if reverted.\n     */\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\n\n    /**\n     * account \"sender\" was deployed.\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\n     * @param sender the account that is deployed\n     * @param factory the factory used to deploy this account (in the initCode)\n     * @param paymaster the paymaster used by this UserOp\n     */\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\n\n    /**\n     * An event emitted if the UserOperation \"callData\" reverted with non-zero length\n     * @param userOpHash the request unique identifier.\n     * @param sender the sender of this request\n     * @param nonce the nonce used in the request\n     * @param revertReason - the return bytes from the (reverted) call to \"callData\".\n     */\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\n\n    /**\n     * signature aggregator used by the following UserOperationEvents within this bundle.\n     */\n    event SignatureAggregatorChanged(address aggregator);\n\n    /**\n     * a custom revert error of handleOps, to identify the offending op.\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n     *  @param paymaster - if paymaster.validatePaymasterUserOp fails, this will be the paymaster's address. if validateUserOp failed,\n     *       this value will be zero (since it failed before accessing the paymaster)\n     *  @param reason - revert reason\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of account/paymaster reverts.\n     */\n    error FailedOp(uint256 opIndex, address paymaster, string reason);\n\n    /**\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\n     */\n    error SignatureValidationFailed(address aggregator);\n\n    //UserOps handled, per aggregator\n    struct UserOpsPerAggregator {\n        UserOperation[] userOps;\n\n        // aggregator address\n        IAggregator aggregator;\n        // aggregated signature\n        bytes signature;\n    }\n\n    /**\n     * Execute a batch of UserOperation.\n     * no signature aggregator is used.\n     * if any account requires an aggregator (that is, it returned an \"actualAggregator\" when\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\n     * @param ops the operations to execute\n     * @param beneficiary the address to receive the fees\n     */\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\n\n    /**\n     * Execute a batch of UserOperation with Aggregators\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\n     * @param beneficiary the address to receive the fees\n     */\n    function handleAggregatedOps(\n        UserOpsPerAggregator[] calldata opsPerAggregator,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * generate a request Id - unique identifier for this request.\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\n     */\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\n\n    /**\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\n     * @param userOp the user operation to validate.\n     */\n    function simulateValidation(UserOperation calldata userOp) external;\n\n    /**\n     * Successful result from simulateValidation.\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factor (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     */\n    error ValidationResult(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\n\n\n    /**\n     * Successful result from simulateValidation, if the account returns a signature aggregator\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factor (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\n     */\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\n        AggregatorStakeInfo aggregatorInfo);\n\n    /**\n     * gas and return values during simulation\n     * @param preOpGas the gas used for validation (including preValidationGas)\n     * @param prefund the required prefund for this operation\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\n     */\n    struct ReturnInfo {\n        uint256 preOpGas;\n        uint256 prefund;\n        bool sigFailed;\n        uint64 validAfter;\n        uint64 validUntil;\n        bytes paymasterContext;\n    }\n\n    /**\n     * returned aggregated signature info.\n     * the aggregator returned by the account, and its current stake.\n     */\n    struct AggregatorStakeInfo {\n        address actualAggregator;\n        StakeInfo stakeInfo;\n    }\n\n    /**\n     * Get counterfactual sender address.\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n     * this method always revert, and returns the address in SenderAddressResult error\n     * @param initCode the constructor code to be passed into the UserOperation.\n     */\n    function getSenderAddress(bytes memory initCode) external;\n\n    /**\n     * return value of getSenderAddress\n     */\n    error SenderAddressResult(address sender);\n\n\n    /**\n     * simulate full execution of a UserOperation (including both validation and target execution)\n     * this method will always revert with \"ExecutionResult\".\n     * it performs full validation of the UserOperation, but ignores signature error.\n     * Note that in order to collect the the success/failure of the target call, it must be executed\n     * with trace enabled to track the emitted events.\n     */\n    function simulateHandleOp(UserOperation calldata op) external;\n\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint64 validAfter, uint64 validBefore);\n}\n"
			},
			"src/interfaces/IAccount.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\ninterface IAccount {\n\n    /**\n     * Validate user's signature and nonce\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\n     * This allows making a \"simulation call\" without a valid signature\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\n     *\n     * @dev Must validate caller is the entryPoint.\n     *      Must validate the signature and nonce\n     * @param userOp the operation that is about to be executed.\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\n     * @param aggregator the aggregator used to validate the signature. NULL for non-aggregated signature accounts.\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\n     *      The excess is left as a deposit in the entrypoint, for future calls.\n     *      can be withdrawn anytime using \"entryPoint.withdrawTo()\"\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\n     * @return sigTimeRange signature and time-range of this operation\n     *      <byte> sigFailure - (1) to mark signature failure, 0 for valid signature.\n     *      <8-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n     *      <8-byte> validAfter - first timestamp this operation is valid\n     *      The an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\n     */\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, address aggregator, uint256 missingAccountFunds)\n    external returns (uint256 sigTimeRange);\n}"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"src/interfaces/IAggregator.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\n/**\n * Aggregated Signatures validator.\n */\ninterface IAggregator {\n\n    /**\n     * validate aggregated signature.\n     * revert if the aggregated signature does not match the given list of operations.\n     */\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\n\n    /**\n     * validate signature of a single userOp\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n     * First it validates the signature over the userOp. then it return data to be used when creating the handleOps:\n     * @param userOp the userOperation received from the user.\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\n     *    (usually empty, unless account and aggregator support some kind of \"multisig\"\n     */\n    function validateUserOpSignature(UserOperation calldata userOp)\n    external view returns (bytes memory sigForUserOp);\n\n    /**\n     * aggregate multiple signatures into a single value.\n     * This method is called off-chain to calculate the signature to pass with handleOps()\n     * bundler MAY use optimized custom code perform this aggregation\n     * @param userOps array of UserOperations to collect the signatures from.\n     * @return aggregatesSignature the aggregated signature\n     */\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatesSignature);\n}"
			},
			"src/interfaces/IStakeManager.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.12;\n\n/**\n * manage deposits and stakes.\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\n * stake is value locked for at least \"unstakeDelay\" by a paymaster.\n */\ninterface IStakeManager {\n\n    event Deposited(\n        address indexed account,\n        uint256 totalDeposit\n    );\n\n    event Withdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /// Emitted once a stake is scheduled for withdrawal\n    event StakeLocked(\n        address indexed account,\n        uint256 totalStaked,\n        uint256 withdrawTime\n    );\n\n    /// Emitted once a stake is scheduled for withdrawal\n    event StakeUnlocked(\n        address indexed account,\n        uint256 withdrawTime\n    );\n\n    event StakeWithdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /**\n     * @param deposit the account's deposit\n     * @param staked true if this account is staked as a paymaster\n     * @param stake actual amount of ether staked for this paymaster.\n     * @param unstakeDelaySec minimum delay to withdraw the stake. must be above the global unstakeDelaySec\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\n     * @dev sizes were chosen so that (deposit,staked) fit into one cell (used during handleOps)\n     *    and the rest fit into a 2nd cell.\n     *    112 bit allows for 10^15 eth\n     *    64 bit for full timestamp\n     *    32 bit allow 150 years for unstake delay\n     */\n    struct DepositInfo {\n        uint112 deposit;\n        bool staked;\n        uint112 stake;\n        uint32 unstakeDelaySec;\n        uint64 withdrawTime;\n    }\n\n    //API struct used by getStakeInfo and simulateValidation\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelaySec;\n    }\n\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\n\n    /// return the deposit (for gas payment) of the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * add to the deposit of the given account\n     */\n    function depositTo(address account) external payable;\n\n    /**\n     * add to the account's stake - amount and delay\n     * any pending unstake is first cancelled.\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\n     */\n    function addStake(uint32 _unstakeDelaySec) external payable;\n\n    /**\n     * attempt to unlock the stake.\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\n     */\n    function unlockStake() external;\n\n    /**\n     * withdraw from the (unlocked) stake.\n     * must first call unlockStake and wait for the unstakeDelay to pass\n     * @param withdrawAddress the address to send withdrawn value.\n     */\n    function withdrawStake(address payable withdrawAddress) external;\n\n    /**\n     * withdraw from the deposit.\n     * @param withdrawAddress the address to send withdrawn value.\n     * @param withdrawAmount the amount to withdraw.\n     */\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\n}"
			},
			"src/interfaces/UserOperation.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\n    /**\n     * User Operation struct\n     * @param sender the sender account of this request\n     * @param nonce unique value the sender uses to verify it is not a replay.\n     * @param initCode if set, the account contract will be created by this constructor\n     * @param callData the method call to execute on this account.\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\n     * @param maxFeePerGas same as EIP-1559 gas parameter\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter\n     * @param paymasterAndData if set, this field hold the paymaster address and \"paymaster-specific-data\". the paymaster will pay for the transaction instead of the sender\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n     */\n    struct UserOperation {\n\n        address sender;\n        uint256 nonce;\n        bytes initCode;\n        bytes callData;\n        uint256 callGasLimit;\n        uint256 verificationGasLimit;\n        uint256 preVerificationGas;\n        uint256 maxFeePerGas;\n        uint256 maxPriorityFeePerGas;\n        bytes paymasterAndData;\n        bytes signature;\n    }\n\nlibrary UserOperationLib {\n\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\n        address data;\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\n        assembly {data := calldataload(userOp)}\n        return address(uint160(data));\n    }\n\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\n    // pay above what he signed for.\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\n    unchecked {\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        if (maxFeePerGas == maxPriorityFeePerGas) {\n            //legacy mode (for networks that don't support basefee opcode)\n            return maxFeePerGas;\n        }\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\n    }\n    }\n\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\n        //lighter signature scheme. must match UserOp.ts#packUserOp\n        bytes calldata sig = userOp.signature;\n        // copy directly the userOp from calldata up to (but not including) the signature.\n        // this encoding depends on the ABI encoding of calldata, but is much lighter to copy\n        // than referencing each field separately.\n        assembly {\n            let ofs := userOp\n            let len := sub(sub(sig.offset, ofs), 32)\n            ret := mload(0x40)\n            mstore(0x40, add(ret, add(len, 32)))\n            mstore(ret, len)\n            calldatacopy(add(ret, 32), ofs, len)\n        }\n    }\n\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\n        return keccak256(pack(userOp));\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}"
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC1967.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
			},
			"@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/interfaces/IERC1967.sol": {
				"IERC1967": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "previousAdmin",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "AdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "beacon",
									"type": "address"
								}
							],
							"name": "BeaconUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "Upgraded",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._",
						"events": {
							"AdminChanged(address,address)": {
								"details": "Emitted when the admin account has changed."
							},
							"BeaconUpgraded(address)": {
								"details": "Emitted when the beacon is changed."
							},
							"Upgraded(address)": {
								"details": "Emitted when the implementation is upgraded."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":\"IERC1967\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e8fa670c3bdce78e642cc6ae11c4cb38b133499cdce5e1990a9979d424703263\",\"dweb:/ipfs/QmVxeCUk4jL2pXQyhsoNJwyU874wRufS2WvGe8TgPKPqhE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
				"IERC1822Proxiable": {
					"abi": [
						{
							"inputs": [],
							"name": "proxiableUUID",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.",
						"kind": "dev",
						"methods": {
							"proxiableUUID()": {
								"details": "Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"proxiableUUID()": "52d1902d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":\"IERC1822Proxiable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688\",\"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
				"ERC1967Upgrade": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "previousAdmin",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "AdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "beacon",
									"type": "address"
								}
							],
							"name": "BeaconUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "Upgraded",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._",
						"events": {
							"AdminChanged(address,address)": {
								"details": "Emitted when the admin account has changed."
							},
							"BeaconUpgraded(address)": {
								"details": "Emitted when the beacon is changed."
							},
							"Upgraded(address)": {
								"details": "Emitted when the implementation is upgraded."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_ADMIN_SLOT": {
								"details": "Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."
							},
							"_BEACON_SLOT": {
								"details": "The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."
							},
							"_IMPLEMENTATION_SLOT": {
								"details": "Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":\"ERC1967Upgrade\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e8fa670c3bdce78e642cc6ae11c4cb38b133499cdce5e1990a9979d424703263\",\"dweb:/ipfs/QmVxeCUk4jL2pXQyhsoNJwyU874wRufS2WvGe8TgPKPqhE\"]},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688\",\"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr\"]},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2db8e18505e86e02526847005d7287a33e397ed7fb9eaba3fd4a4a197add16e2\",\"dweb:/ipfs/QmW9BSuKTzHWHBNSHF4L8XfVuU1uJrP2vLg84YtBd8mL82\"]},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
				"IBeacon": {
					"abi": [
						{
							"inputs": [],
							"name": "implementation",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "This is the interface that {BeaconProxy} expects of its beacon.",
						"kind": "dev",
						"methods": {
							"implementation()": {
								"details": "Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"implementation()": "5c60da1b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":\"IBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://720d6bb56ea0c4ef781c0bd65c5bd0541f5a46100163b2587170f97658d2deed\",\"dweb:/ipfs/QmTS2biLVPrv8CeeXCaKmkFxonMiRvc1LxiYBRYDAJHQUS\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 351,
								"contract": "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 354,
								"contract": "@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {
				"UUPSUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "previousAdmin",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "AdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "beacon",
									"type": "address"
								}
							],
							"name": "BeaconUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "Upgraded",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "proxiableUUID",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newImplementation",
									"type": "address"
								}
							],
							"name": "upgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newImplementation",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "upgradeToAndCall",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._",
						"events": {
							"AdminChanged(address,address)": {
								"details": "Emitted when the admin account has changed."
							},
							"BeaconUpgraded(address)": {
								"details": "Emitted when the beacon is changed."
							},
							"Upgraded(address)": {
								"details": "Emitted when the implementation is upgraded."
							}
						},
						"kind": "dev",
						"methods": {
							"proxiableUUID()": {
								"details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
							},
							"upgradeTo(address)": {
								"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
								"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
							},
							"upgradeToAndCall(address,bytes)": {
								"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
								"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
							}
						},
						"stateVariables": {
							"__self": {
								"custom:oz-upgrades-unsafe-allow": "state-variable-immutable state-variable-assignment"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"proxiableUUID()": "52d1902d",
							"upgradeTo(address)": "3659cfe6",
							"upgradeToAndCall(address,bytes)": "4f1ef286"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e8fa670c3bdce78e642cc6ae11c4cb38b133499cdce5e1990a9979d424703263\",\"dweb:/ipfs/QmVxeCUk4jL2pXQyhsoNJwyU874wRufS2WvGe8TgPKPqhE\"]},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688\",\"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr\"]},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2db8e18505e86e02526847005d7287a33e397ed7fb9eaba3fd4a4a197add16e2\",\"dweb:/ipfs/QmW9BSuKTzHWHBNSHF4L8XfVuU1uJrP2vLg84YtBd8mL82\"]},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0xc6619957bcc6641fe8984bfaf9ff11a9e4b97d8149c0495f608f9a2416d7c5cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://543be67f7fa43b1b932637c1c7f12035f0f4b0f7ee2bd3c33841186f79c165c1\",\"dweb:/ipfs/QmSBPM2UVKbmJqWfD9i6hSiqbaE8TV4TSqfuiivziRRLKM\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9363  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9363  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a6522c733dd11e8ab1280f770eb7cbb3b773403941283d61ce272ecdcac6ee6064736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a6522c733dd11e8ab1280f770eb7cbb3b773403941283d61ce272ecdcac6ee6064736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 MSTORE 0x2C PUSH20 0x3DD11E8AB1280F770EB7CBB3B773403941283D61 0xCE 0x27 0x2E 0xCD 0xCA 0xC6 0xEE PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ",
							"sourceMap": "194:9169:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a6522c733dd11e8ab1280f770eb7cbb3b773403941283d61ce272ecdcac6ee6064736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 MSTORE 0x2C PUSH20 0x3DD11E8AB1280F770EB7CBB3B773403941283D61 0xCE 0x27 0x2E 0xCD 0xCA 0xC6 0xEE PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ",
							"sourceMap": "194:9169:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a6522c733dd11e8ab1280f770eb7cbb3b773403941283d61ce272ecdcac6ee6064736f6c63430008120033",
									".code": [
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1967.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC1822.sol",
								"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
								"@openzeppelin/contracts/proxy/beacon/IBeacon.sol",
								"@openzeppelin/contracts/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"src/BaseAccount.sol",
								"src/SimpleAccount.sol",
								"src/interfaces/IAccount.sol",
								"src/interfaces/IAggregator.sol",
								"src/interfaces/IEntryPoint.sol",
								"src/interfaces/IStakeManager.sol",
								"src/interfaces/UserOperation.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"StorageSlot": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1420:4105  library StorageSlot {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1420:4105  library StorageSlot {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212204221827cf00ecdb40dd0d444c2d291f2aa30be5321a0086e2c60eda2cf535a7c64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204221827cf00ecdb40dd0d444c2d291f2aa30be5321a0086e2c60eda2cf535a7c64736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP 0x21 DUP3 PUSH29 0xF00ECDB40DD0D444C2D291F2AA30BE5321A0086E2C60EDA2CF535A7C64 PUSH20 0x6F6C634300081200330000000000000000000000 ",
							"sourceMap": "1420:2685:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2685:7;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204221827cf00ecdb40dd0d444c2d291f2aa30be5321a0086e2c60eda2cf535a7c64736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP 0x21 DUP3 PUSH29 0xF00ECDB40DD0D444C2D291F2AA30BE5321A0086E2C60EDA2CF535A7C64 PUSH20 0x6F6C634300081200330000000000000000000000 ",
							"sourceMap": "1420:2685:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getBytesSlot(bytes storage pointer)": "infinite",
								"getBytesSlot(bytes32)": "infinite",
								"getStringSlot(bytes32)": "infinite",
								"getStringSlot(string storage pointer)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204221827cf00ecdb40dd0d444c2d291f2aa30be5321a0086e2c60eda2cf535a7c64736f6c63430008120033",
									".code": [
										{
											"begin": 1420,
											"end": 4105,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 1420,
											"end": 4105,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 1420,
											"end": 4105,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1420,
											"end": 4105,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1420,
											"end": 4105,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1420,
											"end": 4105,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1420,
											"end": 4105,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1420,
											"end": 4105,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1420,
											"end": 4105,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1967.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC1822.sol",
								"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
								"@openzeppelin/contracts/proxy/beacon/IBeacon.sol",
								"@openzeppelin/contracts/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"src/BaseAccount.sol",
								"src/SimpleAccount.sol",
								"src/interfaces/IAccount.sol",
								"src/interfaces/IAggregator.sol",
								"src/interfaces/IEntryPoint.sol",
								"src/interfaces/IStakeManager.sol",
								"src/interfaces/UserOperation.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":220:2779  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":220:2779  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220738d22cbec2069141dccc09fe51f7fd9799c8a6cdd9d0106f21ba9fd35aa266b64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220738d22cbec2069141dccc09fe51f7fd9799c8a6cdd9d0106f21ba9fd35aa266b64736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x8D22CBEC2069141DCCC09FE51F7FD9799C8A6CDD SWAP14 ADD MOD CALLCODE SHL 0xA9 REVERT CALLDATALOAD 0xAA 0x26 PUSH12 0x64736F6C6343000812003300 ",
							"sourceMap": "220:2559:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:2559:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220738d22cbec2069141dccc09fe51f7fd9799c8a6cdd9d0106f21ba9fd35aa266b64736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x8D22CBEC2069141DCCC09FE51F7FD9799C8A6CDD SWAP14 ADD MOD CALLCODE SHL 0xA9 REVERT CALLDATALOAD 0xAA 0x26 PUSH12 0x64736F6C6343000812003300 ",
							"sourceMap": "220:2559:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(int256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220738d22cbec2069141dccc09fe51f7fd9799c8a6cdd9d0106f21ba9fd35aa266b64736f6c63430008120033",
									".code": [
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1967.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC1822.sol",
								"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
								"@openzeppelin/contracts/proxy/beacon/IBeacon.sol",
								"@openzeppelin/contracts/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"src/BaseAccount.sol",
								"src/SimpleAccount.sol",
								"src/interfaces/IAccount.sol",
								"src/interfaces/IAggregator.sol",
								"src/interfaces/IEntryPoint.sol",
								"src/interfaces/IStakeManager.sol",
								"src/interfaces/UserOperation.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":369:9130  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":369:9130  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205f6178a243de32fc0baa369ab19b43e739166b44cfc8c5bee173c5e9db1f47f664736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f6178a243de32fc0baa369ab19b43e739166b44cfc8c5bee173c5e9db1f47f664736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F PUSH2 0x78A2 NUMBER 0xDE ORIGIN 0xFC SIGNEXTEND 0xAA CALLDATASIZE SWAP11 0xB1 SWAP12 NUMBER 0xE7 CODECOPY AND PUSH12 0x44CFC8C5BEE173C5E9DB1F47 0xF6 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "369:8761:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;369:8761:9;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f6178a243de32fc0baa369ab19b43e739166b44cfc8c5bee173c5e9db1f47f664736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F PUSH2 0x78A2 NUMBER 0xDE ORIGIN 0xFC SIGNEXTEND 0xAA CALLDATASIZE SWAP11 0xB1 SWAP12 NUMBER 0xE7 CODECOPY AND PUSH12 0x44CFC8C5BEE173C5E9DB1F47 0xF6 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "369:8761:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205f6178a243de32fc0baa369ab19b43e739166b44cfc8c5bee173c5e9db1f47f664736f6c63430008120033",
									".code": [
										{
											"begin": 369,
											"end": 9130,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 369,
											"end": 9130,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 369,
											"end": 9130,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 369,
											"end": 9130,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 369,
											"end": 9130,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 369,
											"end": 9130,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 369,
											"end": 9130,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 9130,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 369,
											"end": 9130,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1967.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC1822.sol",
								"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
								"@openzeppelin/contracts/proxy/beacon/IBeacon.sol",
								"@openzeppelin/contracts/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"src/BaseAccount.sol",
								"src/SimpleAccount.sol",
								"src/interfaces/IAccount.sol",
								"src/interfaces/IAggregator.sol",
								"src/interfaces/IEntryPoint.sol",
								"src/interfaces/IStakeManager.sol",
								"src/interfaces/UserOperation.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2\",\"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12784  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12784  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122087728e7ddc2f4a86ebd45783fdc8d78856bca00743b9ade52a050f63ea33a35764736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087728e7ddc2f4a86ebd45783fdc8d78856bca00743b9ade52a050f63ea33a35764736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 PUSH19 0x8E7DDC2F4A86EBD45783FDC8D78856BCA00743 0xB9 0xAD 0xE5 0x2A SDIV 0xF PUSH4 0xEA33A357 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "202:12582:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:10;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087728e7ddc2f4a86ebd45783fdc8d78856bca00743b9ade52a050f63ea33a35764736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 PUSH19 0x8E7DDC2F4A86EBD45783FDC8D78856BCA00743 0xB9 0xAD 0xE5 0x2A SDIV 0xF PUSH4 0xEA33A357 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "202:12582:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122087728e7ddc2f4a86ebd45783fdc8d78856bca00743b9ade52a050f63ea33a35764736f6c63430008120033",
									".code": [
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1967.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC1822.sol",
								"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
								"@openzeppelin/contracts/proxy/beacon/IBeacon.sol",
								"@openzeppelin/contracts/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"src/BaseAccount.sol",
								"src/SimpleAccount.sol",
								"src/interfaces/IAccount.sol",
								"src/interfaces/IAggregator.sol",
								"src/interfaces/IEntryPoint.sol",
								"src/interfaces/IStakeManager.sol",
								"src/interfaces/UserOperation.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":215:1262  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":215:1262  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122013dacbb248785d75f76af39fb5b27f208e22876ec58f13a333935730f0f2c3b564736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122013dacbb248785d75f76af39fb5b27f208e22876ec58f13a333935730f0f2c3b564736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SGT 0xDA 0xCB 0xB2 BASEFEE PUSH25 0x5D75F76AF39FB5B27F208E22876EC58F13A333935730F0F2C3 0xB5 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "215:1047:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1047:11;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122013dacbb248785d75f76af39fb5b27f208e22876ec58f13a333935730f0f2c3b564736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SGT 0xDA 0xCB 0xB2 BASEFEE PUSH25 0x5D75F76AF39FB5B27F208E22876EC58F13A333935730F0F2C3 0xB5 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "215:1047:11:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "BYTE",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE8",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122013dacbb248785d75f76af39fb5b27f208e22876ec58f13a333935730f0f2c3b564736f6c63430008120033",
									".code": [
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSHDEPLOYADDRESS",
											"source": 11
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1967.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC1822.sol",
								"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
								"@openzeppelin/contracts/proxy/beacon/IBeacon.sol",
								"@openzeppelin/contracts/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"src/BaseAccount.sol",
								"src/SimpleAccount.sol",
								"src/interfaces/IAccount.sol",
								"src/interfaces/IAggregator.sol",
								"src/interfaces/IEntryPoint.sol",
								"src/interfaces/IStakeManager.sol",
								"src/interfaces/UserOperation.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/BaseAccount.sol": {
				"BaseAccount": {
					"abi": [
						{
							"inputs": [],
							"name": "entryPoint",
							"outputs": [
								{
									"internalType": "contract IEntryPoint",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nonce",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation",
									"name": "userOp",
									"type": "tuple"
								},
								{
									"internalType": "bytes32",
									"name": "userOpHash",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "aggregator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "missingAccountFunds",
									"type": "uint256"
								}
							],
							"name": "validateUserOp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "sigTimeRange",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"entryPoint()": "b0d691fe",
							"nonce()": "affed0e0",
							"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)": "0825d1fc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sigTimeRange\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"entryPoint()\":{\"notice\":\"return the entryPoint used by this account. subclass should return the current entryPoint used by this account.\"},\"nonce()\":{\"notice\":\"return the account nonce. subclass should return a nonce value that is used both by _validateAndUpdateNonce, and by the external provider (to read the current nonce)\"},\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)\":{\"notice\":\"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\"}},\"notice\":\"Basic account implementation. this contract provides the basic logic for implementing the IAccount interface  - validateUserOp specific account implementation should inherit it and provide the account-specific logic\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BaseAccount.sol\":\"BaseAccount\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/BaseAccount.sol\":{\"keccak256\":\"0x57e66dcc3232f4102a3e9cf8d9d19a21a96661c63576f3a3cef6a67b9e06bfb0\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://db305b392c5bb85633923890a2001750c467839e3b4f6eb1e8bb58e32814ba46\",\"dweb:/ipfs/QmeLCBdvPqqZqSiyd24tEpoyme3a4stxG1ZnHZr3ztMNyd\"]},\"src/interfaces/IAccount.sol\":{\"keccak256\":\"0xc144258a10a8cb8d08342591d1356380264cc44590dd3c1ec41880058fe65e62\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://70dae4215a4fba71e5782f207270327de96478246c53f5dc3d8a0addbd6fca69\",\"dweb:/ipfs/QmeCRqxJZYwPxEGww1ciuwuZrLBFE5XNN4mhirSGXix4sn\"]},\"src/interfaces/IAggregator.sol\":{\"keccak256\":\"0x20e3940805ebd9bb5f6ba37277b542b770f2125947d9ed6408ec516914c9c567\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://87461a7033848f310494e416eebd4eedc692eb0e8506774c10f54a70adb7de6c\",\"dweb:/ipfs/QmQbg65EfAANExrbjL4RgqUnthpPkQzS1qgnMNw38puYdA\"]},\"src/interfaces/IEntryPoint.sol\":{\"keccak256\":\"0xf502df4283eae46510e840f924019d1a2da61455b8b129592eb5ebdd7759eac4\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9dc05f78607b6825811e5b8673d56cd9f9eaf9c3554e8b25694d563b6affcd8e\",\"dweb:/ipfs/QmfS9sNFcFiBz6DtoucdCsvB4CviupXm4pyjFnZbQ1MUjN\"]},\"src/interfaces/IStakeManager.sol\":{\"keccak256\":\"0xa2fa22a2604ca0c029afeb83c43654ca645bb34c22e4a4504d32585a56d32e06\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://fc0ed176006bfde8b6d21c71ba64bd104386220074486e4d1c0c178038d5f78a\",\"dweb:/ipfs/QmXfTr45vgg8iSxLYskWn1Su3ZvMj6LVuT8uSheAeAtUUz\"]},\"src/interfaces/UserOperation.sol\":{\"keccak256\":\"0x30cfb9573e66c4aa891e2059006310b3042494c602ff1a24ea39dc9ba1193789\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://fe8a5609d5dfb79bdccc57518c616bb4343a58878d0a84e2e9be6184edd3fe84\",\"dweb:/ipfs/QmVZ6jdbHsWBoww8nWfCYTm3wjCHuMUkbTufVN2thbKDwc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"entryPoint()": {
								"notice": "return the entryPoint used by this account. subclass should return the current entryPoint used by this account."
							},
							"nonce()": {
								"notice": "return the account nonce. subclass should return a nonce value that is used both by _validateAndUpdateNonce, and by the external provider (to read the current nonce)"
							},
							"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)": {
								"notice": "Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."
							}
						},
						"notice": "Basic account implementation. this contract provides the basic logic for implementing the IAccount interface  - validateUserOp specific account implementation should inherit it and provide the account-specific logic",
						"version": 1
					}
				}
			},
			"src/SimpleAccount.sol": {
				"SimpleAccount": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract IEntryPoint",
									"name": "anEntryPoint",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "previousAdmin",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "AdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "beacon",
									"type": "address"
								}
							],
							"name": "BeaconUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IEntryPoint",
									"name": "entryPoint",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "SimpleAccountInitialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "Upgraded",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "addDeposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "entryPoint",
							"outputs": [
								{
									"internalType": "contract IEntryPoint",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "dest",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "func",
									"type": "bytes"
								}
							],
							"name": "execute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "dest",
									"type": "address[]"
								},
								{
									"internalType": "bytes[]",
									"name": "func",
									"type": "bytes[]"
								}
							],
							"name": "executeBatch",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "anOwner",
									"type": "address"
								},
								{
									"internalType": "contract IEntryPoint",
									"name": "anEntryPoint",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nonce",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "proxiableUUID",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newImplementation",
									"type": "address"
								}
							],
							"name": "upgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newImplementation",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "upgradeToAndCall",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation",
									"name": "userOp",
									"type": "tuple"
								},
								{
									"internalType": "bytes32",
									"name": "userOpHash",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "aggregator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "missingAccountFunds",
									"type": "uint256"
								}
							],
							"name": "validateUserOp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "sigTimeRange",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdrawDepositTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"events": {
							"AdminChanged(address,address)": {
								"details": "Emitted when the admin account has changed."
							},
							"BeaconUpgraded(address)": {
								"details": "Emitted when the beacon is changed."
							},
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Upgraded(address)": {
								"details": "Emitted when the implementation is upgraded."
							}
						},
						"kind": "dev",
						"methods": {
							"proxiableUUID()": {
								"details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
							},
							"upgradeTo(address)": {
								"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
								"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
							},
							"upgradeToAndCall(address,bytes)": {
								"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
								"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
							},
							"withdrawDepositTo(address,uint256)": {
								"params": {
									"amount": "to withdraw",
									"withdrawAddress": "target to send to"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/SimpleAccount.sol\":585:5057  contract SimpleAccount is BaseAccount, UUPSUpgradeable, Initializable {... */\n  mstore(0x40, 0xa0)\n    /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1088:1092  this */\n  address\n    /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1045:1093  address private immutable __self = address(this) */\n  0x80\n  mstore\n    /* \"src/SimpleAccount.sol\":1246:1327  constructor(IEntryPoint anEntryPoint) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"src/SimpleAccount.sol\":1294:1305  _entryPoint */\n  0x02\n    /* \"src/SimpleAccount.sol\":1294:1320  _entryPoint = anEntryPoint */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"src/SimpleAccount.sol\":585:5057  contract SimpleAccount is BaseAccount, UUPSUpgradeable, Initializable {... */\n  jump(tag_7)\n    /* \"#utility.yul\":14:324   */\ntag_3:\n    /* \"#utility.yul\":104:110   */\n  0x00\n    /* \"#utility.yul\":157:159   */\n  0x20\n    /* \"#utility.yul\":145:154   */\n  dup3\n    /* \"#utility.yul\":136:143   */\n  dup5\n    /* \"#utility.yul\":132:155   */\n  sub\n    /* \"#utility.yul\":128:160   */\n  slt\n    /* \"#utility.yul\":125:177   */\n  iszero\n  tag_9\n  jumpi\n    /* \"#utility.yul\":173:174   */\n  0x00\n    /* \"#utility.yul\":170:171   */\n  dup1\n    /* \"#utility.yul\":163:175   */\n  revert\n    /* \"#utility.yul\":125:177   */\ntag_9:\n    /* \"#utility.yul\":199:215   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":244:275   */\n  dup2\n  and\n    /* \"#utility.yul\":234:276   */\n  dup2\n  eq\n    /* \"#utility.yul\":224:294   */\n  tag_10\n  jumpi\n    /* \"#utility.yul\":290:291   */\n  0x00\n    /* \"#utility.yul\":287:288   */\n  dup1\n    /* \"#utility.yul\":280:292   */\n  revert\n    /* \"#utility.yul\":224:294   */\ntag_10:\n    /* \"#utility.yul\":313:318   */\n  swap4\n    /* \"#utility.yul\":14:324   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\ntag_7:\n    /* \"src/SimpleAccount.sol\":585:5057  contract SimpleAccount is BaseAccount, UUPSUpgradeable, Initializable {... */\n  mload(0x80)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x26253e4b9754d7b70fa53c504adf7cef3bf444a45077af864d39a1233fe15035\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"src/SimpleAccount.sol\":585:5057  contract SimpleAccount is BaseAccount, UUPSUpgradeable, Initializable {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x4f1ef286\n      gt\n      tag_16\n      jumpi\n      dup1\n      0xaffed0e0\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xaffed0e0\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xb0d691fe\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xb61d27f6\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xc399ec88\n      eq\n      tag_15\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      dup1\n      0x4f1ef286\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x52d1902d\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_16:\n      dup1\n      0x0825d1fc\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x18dfb3c7\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x3659cfe6\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x485cc955\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x4a58db19\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x4d44560d\n      eq\n      tag_8\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"src/BaseAccount.sol\":1964:2405  function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, address aggregator, uint256 missingAccountFunds)... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      pop\n      tag_21\n      tag_22\n      calldatasize\n      0x04\n      tag_23\n      jump\t// in\n    tag_22:\n      tag_24\n      jump\t// in\n    tag_21:\n      mload(0x40)\n        /* \"#utility.yul\":966:991   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":954:956   */\n      0x20\n        /* \"#utility.yul\":939:957   */\n      add\n        /* \"src/BaseAccount.sol\":1964:2405  function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, address aggregator, uint256 missingAccountFunds)... */\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/SimpleAccount.sol\":1958:2255  function executeBatch(address[] calldata dest, bytes[] calldata func) external {... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      pop\n      tag_28\n      tag_29\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      stop\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3143:3338  function upgradeTo(address newImplementation) public virtual onlyProxy {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      pop\n      tag_28\n      tag_34\n      calldatasize\n      0x04\n      tag_35\n      jump\t// in\n    tag_34:\n      tag_36\n      jump\t// in\n        /* \"src/SimpleAccount.sol\":2437:2578  function initialize(address anOwner, IEntryPoint anEntryPoint) public virtual initializer {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_37\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_37:\n      pop\n      tag_28\n      tag_39\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_39:\n      tag_41\n      jump\t// in\n        /* \"src/SimpleAccount.sol\":4464:4604  function addDeposit() public payable {... */\n    tag_7:\n      tag_28\n      tag_43\n      jump\t// in\n        /* \"src/SimpleAccount.sol\":4756:4914  function withdrawDepositTo(address payable withdrawAddress, uint256 amount) public onlyOwner {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      pop\n      tag_28\n      tag_46\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_46:\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3657:3877  function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {... */\n    tag_9:\n      tag_28\n      tag_50\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_50:\n      tag_52\n      jump\t// in\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":2762:2893  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      pop\n      tag_21\n      tag_55\n      jump\t// in\n        /* \"src/SimpleAccount.sol\":791:811  address public owner */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_58\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_58:\n      pop\n      sload(0x01)\n      tag_59\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_59:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4695:4727   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":4677:4728   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4665:4667   */\n      0x20\n        /* \"#utility.yul\":4650:4668   */\n      add\n        /* \"src/SimpleAccount.sol\":791:811  address public owner */\n      tag_25\n        /* \"#utility.yul\":4531:4734   */\n      jump\n        /* \"src/SimpleAccount.sol\":818:912  function nonce() public view virtual override returns (uint256) {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_63\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_63:\n      pop\n        /* \"src/SimpleAccount.sol\":873:880  uint256 */\n      0x00\n        /* \"src/SimpleAccount.sol\":899:905  _nonce */\n      sload\n      0x010000\n      swap1\n      div\n      sub(shl(0x60, 0x01), 0x01)\n      and\n        /* \"src/SimpleAccount.sol\":818:912  function nonce() public view virtual override returns (uint256) {... */\n      jump(tag_21)\n        /* \"src/SimpleAccount.sol\":918:1026  function entryPoint() public view virtual override returns (IEntryPoint) {... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n        /* \"src/SimpleAccount.sol\":1008:1019  _entryPoint */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"src/SimpleAccount.sol\":918:1026  function entryPoint() public view virtual override returns (IEntryPoint) {... */\n      jump(tag_59)\n        /* \"src/SimpleAccount.sol\":1737:1895  function execute(address dest, uint256 value, bytes calldata func) external {... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_72\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_72:\n      pop\n      tag_28\n      tag_74\n      calldatasize\n      0x04\n      tag_75\n      jump\t// in\n    tag_74:\n      tag_76\n      jump\t// in\n        /* \"src/SimpleAccount.sol\":4268:4381  function getDeposit() public view returns (uint256) {... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_77\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_77:\n      pop\n      tag_21\n      tag_79\n      jump\t// in\n        /* \"src/BaseAccount.sol\":1964:2405  function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, address aggregator, uint256 missingAccountFunds)... */\n    tag_24:\n        /* \"src/BaseAccount.sol\":2127:2147  uint256 sigTimeRange */\n      0x00\n        /* \"src/BaseAccount.sol\":2159:2183  _requireFromEntryPoint() */\n      tag_82\n        /* \"src/BaseAccount.sol\":2159:2181  _requireFromEntryPoint */\n      tag_83\n        /* \"src/BaseAccount.sol\":2159:2183  _requireFromEntryPoint() */\n      jump\t// in\n    tag_82:\n        /* \"src/BaseAccount.sol\":2208:2258  _validateSignature(userOp, userOpHash, aggregator) */\n      tag_84\n        /* \"src/BaseAccount.sol\":2227:2233  userOp */\n      dup6\n        /* \"src/BaseAccount.sol\":2235:2245  userOpHash */\n      dup6\n        /* \"src/BaseAccount.sol\":2247:2257  aggregator */\n      dup6\n        /* \"src/BaseAccount.sol\":2208:2226  _validateSignature */\n      tag_85\n        /* \"src/BaseAccount.sol\":2208:2258  _validateSignature(userOp, userOpHash, aggregator) */\n      jump\t// in\n    tag_84:\n        /* \"src/BaseAccount.sol\":2193:2258  sigTimeRange = _validateSignature(userOp, userOpHash, aggregator) */\n      swap1\n      pop\n        /* \"src/BaseAccount.sol\":2272:2287  userOp.initCode */\n      tag_86\n      0x40\n      dup7\n      add\n        /* \"src/BaseAccount.sol\":2272:2278  userOp */\n      dup7\n        /* \"src/BaseAccount.sol\":2272:2287  userOp.initCode */\n      tag_87\n      jump\t// in\n    tag_86:\n        /* \"src/BaseAccount.sol\":2272:2294  userOp.initCode.length */\n      swap1\n      pop\n        /* \"src/BaseAccount.sol\":2298:2299  0 */\n      0x00\n        /* \"src/BaseAccount.sol\":2272:2299  userOp.initCode.length == 0 */\n      sub\n        /* \"src/BaseAccount.sol\":2268:2357  if (userOp.initCode.length == 0) {... */\n      tag_89\n      jumpi\n        /* \"src/BaseAccount.sol\":2315:2346  _validateAndUpdateNonce(userOp) */\n      tag_89\n        /* \"src/BaseAccount.sol\":2339:2345  userOp */\n      dup6\n        /* \"src/BaseAccount.sol\":2315:2338  _validateAndUpdateNonce */\n      tag_90\n        /* \"src/BaseAccount.sol\":2315:2346  _validateAndUpdateNonce(userOp) */\n      jump\t// in\n    tag_89:\n        /* \"src/BaseAccount.sol\":2366:2398  _payPrefund(missingAccountFunds) */\n      tag_91\n        /* \"src/BaseAccount.sol\":2378:2397  missingAccountFunds */\n      dup3\n        /* \"src/BaseAccount.sol\":2366:2377  _payPrefund */\n      tag_92\n        /* \"src/BaseAccount.sol\":2366:2398  _payPrefund(missingAccountFunds) */\n      jump\t// in\n    tag_91:\n        /* \"src/BaseAccount.sol\":1964:2405  function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, address aggregator, uint256 missingAccountFunds)... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/SimpleAccount.sol\":1958:2255  function executeBatch(address[] calldata dest, bytes[] calldata func) external {... */\n    tag_31:\n        /* \"src/SimpleAccount.sol\":2047:2078  _requireFromEntryPointOrOwner() */\n      tag_94\n        /* \"src/SimpleAccount.sol\":2047:2076  _requireFromEntryPointOrOwner */\n      tag_95\n        /* \"src/SimpleAccount.sol\":2047:2078  _requireFromEntryPointOrOwner() */\n      jump\t// in\n    tag_94:\n        /* \"src/SimpleAccount.sol\":2096:2122  dest.length == func.length */\n      dup3\n      dup2\n      eq\n        /* \"src/SimpleAccount.sol\":2088:2146  require(dest.length == func.length, \"wrong array lengths\") */\n      tag_96\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6494:6496   */\n      0x20\n        /* \"src/SimpleAccount.sol\":2088:2146  require(dest.length == func.length, \"wrong array lengths\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6476:6497   */\n      mstore\n        /* \"#utility.yul\":6533:6535   */\n      0x13\n        /* \"#utility.yul\":6513:6531   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6506:6536   */\n      mstore\n      shl(0x68, 0x77726f6e67206172726179206c656e67746873)\n        /* \"#utility.yul\":6552:6570   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6545:6594   */\n      mstore\n        /* \"#utility.yul\":6611:6629   */\n      0x64\n      add\n        /* \"src/SimpleAccount.sol\":2088:2146  require(dest.length == func.length, \"wrong array lengths\") */\n    tag_97:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_96:\n        /* \"src/SimpleAccount.sol\":2161:2170  uint256 i */\n      0x00\n        /* \"src/SimpleAccount.sol\":2156:2249  for (uint256 i = 0; i < dest.length; i++) {... */\n    tag_99:\n        /* \"src/SimpleAccount.sol\":2176:2191  i < dest.length */\n      dup4\n      dup2\n      lt\n        /* \"src/SimpleAccount.sol\":2156:2249  for (uint256 i = 0; i < dest.length; i++) {... */\n      iszero\n      tag_100\n      jumpi\n        /* \"src/SimpleAccount.sol\":2212:2238  _call(dest[i], 0, func[i]) */\n      tag_102\n        /* \"src/SimpleAccount.sol\":2218:2222  dest */\n      dup6\n      dup6\n        /* \"src/SimpleAccount.sol\":2223:2224  i */\n      dup4\n        /* \"src/SimpleAccount.sol\":2218:2225  dest[i] */\n      dup2\n      dup2\n      lt\n      tag_104\n      jumpi\n      tag_104\n      tag_105\n      jump\t// in\n    tag_104:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_106\n      swap2\n      swap1\n      tag_35\n      jump\t// in\n    tag_106:\n        /* \"src/SimpleAccount.sol\":2227:2228  0 */\n      0x00\n        /* \"src/SimpleAccount.sol\":2230:2234  func */\n      dup6\n      dup6\n        /* \"src/SimpleAccount.sol\":2235:2236  i */\n      dup6\n        /* \"src/SimpleAccount.sol\":2230:2237  func[i] */\n      dup2\n      dup2\n      lt\n      tag_108\n      jumpi\n      tag_108\n      tag_105\n      jump\t// in\n    tag_108:\n      swap1\n      pop\n      0x20\n      mul\n      dup2\n      add\n      swap1\n      tag_109\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n    tag_109:\n        /* \"src/SimpleAccount.sol\":2212:2238  _call(dest[i], 0, func[i]) */\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n        /* \"src/SimpleAccount.sol\":2212:2217  _call */\n      tag_110\n      swap3\n      pop\n      pop\n      pop\n        /* \"src/SimpleAccount.sol\":2212:2238  _call(dest[i], 0, func[i]) */\n      jump\t// in\n    tag_102:\n        /* \"src/SimpleAccount.sol\":2193:2196  i++ */\n      dup1\n      tag_111\n      dup2\n      tag_112\n      jump\t// in\n    tag_111:\n      swap2\n      pop\n      pop\n        /* \"src/SimpleAccount.sol\":2156:2249  for (uint256 i = 0; i < dest.length; i++) {... */\n      jump(tag_99)\n    tag_100:\n      pop\n        /* \"src/SimpleAccount.sol\":1958:2255  function executeBatch(address[] calldata dest, bytes[] calldata func) external {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3143:3338  function upgradeTo(address newImplementation) public virtual onlyProxy {... */\n    tag_36:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1654:1660  __self */\n      immutable(\"0x26253e4b9754d7b70fa53c504adf7cef3bf444a45077af864d39a1233fe15035\")\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1637:1660  address(this) != __self */\n      and\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1645:1649  this */\n      address\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1637:1660  address(this) != __self */\n      sub\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1629:1709  require(address(this) != __self, \"Function must be called through delegatecall\") */\n      tag_114\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_97\n      swap1\n      tag_116\n      jump\t// in\n    tag_114:\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1751:1757  __self */\n      immutable(\"0x26253e4b9754d7b70fa53c504adf7cef3bf444a45077af864d39a1233fe15035\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1727:1757  _getImplementation() == __self */\n      and\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1727:1747  _getImplementation() */\n      tag_117\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1254:1308  StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1175:1315  function _getImplementation() internal view returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1727:1747  _getImplementation() */\n    tag_117:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1727:1757  _getImplementation() == __self */\n      and\n      eq\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1719:1806  require(_getImplementation() == __self, \"Function must be called through active proxy\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_97\n      swap1\n      tag_121\n      jump\t// in\n    tag_119:\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3224:3260  _authorizeUpgrade(newImplementation) */\n      tag_123\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3242:3259  newImplementation */\n      dup2\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3224:3241  _authorizeUpgrade */\n      tag_124\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3224:3260  _authorizeUpgrade(newImplementation) */\n      jump\t// in\n    tag_123:\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3311:3323  new bytes(0) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3321:3322  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3311:3323  new bytes(0) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3270:3331  _upgradeToAndCallUUPS(newImplementation, new bytes(0), false) */\n      tag_125\n      swap2\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3292:3309  newImplementation */\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3311:3323  new bytes(0) */\n      swap1\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3270:3291  _upgradeToAndCallUUPS */\n      tag_130\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3270:3331  _upgradeToAndCallUUPS(newImplementation, new bytes(0), false) */\n      jump\t// in\n    tag_125:\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3143:3338  function upgradeTo(address newImplementation) public virtual onlyProxy {... */\n      pop\n      jump\t// out\n        /* \"src/SimpleAccount.sol\":2437:2578  function initialize(address anOwner, IEntryPoint anEntryPoint) public virtual initializer {... */\n    tag_41:\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3268:3287  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3291:3304  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3290:3304  !_initializing */\n      iszero\n      dup1\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3336:3370  isTopLevelCall && _initialized < 1 */\n      dup1\n      iszero\n      tag_132\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3354:3366  _initialized */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3369:3370  1 */\n      0x01\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3354:3366  _initialized */\n      0xff\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3354:3370  _initialized < 1 */\n      lt\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3336:3370  isTopLevelCall && _initialized < 1 */\n    tag_132:\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3335:3432  (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1) */\n      dup1\n      tag_136\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3404:3408  this */\n      address\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1721  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1725  account.code.length > 0 */\n      iszero\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3376:3431  !Address.isContract(address(this)) && _initialized == 1 */\n      tag_136\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3414:3426  _initialized */\n      and(0xff, sload(0x00))\n      0x01\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3414:3431  _initialized == 1 */\n      eq\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3376:3431  !Address.isContract(address(this)) && _initialized == 1 */\n    tag_136:\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3314:3504  require(... */\n      tag_137\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8072:8074   */\n      0x20\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3314:3504  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8054:8075   */\n      mstore\n        /* \"#utility.yul\":8111:8113   */\n      0x2e\n        /* \"#utility.yul\":8091:8109   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8084:8114   */\n      mstore\n        /* \"#utility.yul\":8150:8184   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":8130:8148   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8123:8185   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":8201:8219   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8194:8238   */\n      mstore\n        /* \"#utility.yul\":8255:8274   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3314:3504  require(... */\n      tag_97\n        /* \"#utility.yul\":7870:8280   */\n      jump\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3314:3504  require(... */\n    tag_137:\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3514:3526  _initialized */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3514:3530  _initialized = 1 */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3529:3530  1 */\n      0x01\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3514:3530  _initialized = 1 */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3540:3605  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_140\n      jumpi\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3574:3587  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3574:3594  _initializing = true */\n      dup1\n      sload\n      not(0xff00)\n      and\n      0x0100\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3540:3605  if (isTopLevelCall) {... */\n    tag_140:\n        /* \"src/SimpleAccount.sol\":2537:2571  _initialize(anOwner, anEntryPoint) */\n      tag_142\n        /* \"src/SimpleAccount.sol\":2549:2556  anOwner */\n      dup4\n        /* \"src/SimpleAccount.sol\":2558:2570  anEntryPoint */\n      dup4\n        /* \"src/SimpleAccount.sol\":2537:2548  _initialize */\n      tag_143\n        /* \"src/SimpleAccount.sol\":2537:2571  _initialize(anOwner, anEntryPoint) */\n      jump\t// in\n    tag_142:\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3629:3643  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3625:3724  if (isTopLevelCall) {... */\n      iszero\n      tag_144\n      jumpi\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3675:3680  false */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3659:3680  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3699:3713  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":8437:8473   */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3699:3713  Initialized(1) */\n      0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n      swap1\n        /* \"#utility.yul\":8425:8427   */\n      0x20\n        /* \"#utility.yul\":8410:8428   */\n      add\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3699:3713  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3625:3724  if (isTopLevelCall) {... */\n    tag_144:\n        /* \"@openzeppelin/contracts/proxy/utils/Initializable.sol\":3258:3730  {... */\n      pop\n        /* \"src/SimpleAccount.sol\":2437:2578  function initialize(address anOwner, IEntryPoint anEntryPoint) public virtual initializer {... */\n      pop\n      pop\n      jump\t// out\n        /* \"src/SimpleAccount.sol\":4464:4604  function addDeposit() public payable {... */\n    tag_43:\n        /* \"src/SimpleAccount.sol\":4513:4521  bool req */\n      0x00\n        /* \"src/SimpleAccount.sol\":4534:4546  entryPoint() */\n      tag_148\n        /* \"src/SimpleAccount.sol\":1008:1019  _entryPoint */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      swap1\n        /* \"src/SimpleAccount.sol\":918:1026  function entryPoint() public view virtual override returns (IEntryPoint) {... */\n      jump\n        /* \"src/SimpleAccount.sol\":4534:4546  entryPoint() */\n    tag_148:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/SimpleAccount.sol\":4526:4552  address(entryPoint()).call */\n      and\n        /* \"src/SimpleAccount.sol\":4561:4570  msg.value */\n      callvalue\n        /* \"src/SimpleAccount.sol\":4526:4575  address(entryPoint()).call{value : msg.value}(\"\") */\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_153\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_152)\n    tag_153:\n      0x60\n      swap2\n      pop\n    tag_152:\n      pop\n        /* \"src/SimpleAccount.sol\":4512:4575  (bool req,) = address(entryPoint()).call{value : msg.value}(\"\") */\n      pop\n      swap1\n      pop\n        /* \"src/SimpleAccount.sol\":4593:4596  req */\n      dup1\n        /* \"src/SimpleAccount.sol\":4585:4597  require(req) */\n      tag_125\n      jumpi\n      0x00\n      dup1\n      revert\n        /* \"src/SimpleAccount.sol\":4756:4914  function withdrawDepositTo(address payable withdrawAddress, uint256 amount) public onlyOwner {... */\n    tag_48:\n        /* \"src/SimpleAccount.sol\":1364:1376  _onlyOwner() */\n      tag_156\n        /* \"src/SimpleAccount.sol\":1364:1374  _onlyOwner */\n      tag_157\n        /* \"src/SimpleAccount.sol\":1364:1376  _onlyOwner() */\n      jump\t// in\n    tag_156:\n        /* \"src/SimpleAccount.sol\":1008:1019  _entryPoint */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"src/SimpleAccount.sol\":4859:4907  entryPoint().withdrawTo(withdrawAddress, amount) */\n      mload(0x40)\n      shl(0xe3, 0x040b850f)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":8902:8934   */\n      dup5\n      dup2\n      and\n        /* \"src/SimpleAccount.sol\":4859:4907  entryPoint().withdrawTo(withdrawAddress, amount) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":8884:8935   */\n      mstore\n        /* \"#utility.yul\":8951:8969   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8944:8978   */\n      dup5\n      swap1\n      mstore\n        /* \"src/SimpleAccount.sol\":4859:4882  entryPoint().withdrawTo */\n      swap2\n      swap1\n      swap2\n      and\n      swap1\n      0x205c2878\n      swap1\n        /* \"#utility.yul\":8857:8875   */\n      0x44\n      add\n        /* \"src/SimpleAccount.sol\":4859:4907  entryPoint().withdrawTo(withdrawAddress, amount) */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_162\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_162:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_164\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_164:\n      pop\n      pop\n      pop\n      pop\n        /* \"src/SimpleAccount.sol\":4756:4914  function withdrawDepositTo(address payable withdrawAddress, uint256 amount) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3657:3877  function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {... */\n    tag_52:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1654:1660  __self */\n      immutable(\"0x26253e4b9754d7b70fa53c504adf7cef3bf444a45077af864d39a1233fe15035\")\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1637:1660  address(this) != __self */\n      and\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1645:1649  this */\n      address\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1637:1660  address(this) != __self */\n      sub\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1629:1709  require(address(this) != __self, \"Function must be called through delegatecall\") */\n      tag_166\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_97\n      swap1\n      tag_116\n      jump\t// in\n    tag_166:\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1751:1757  __self */\n      immutable(\"0x26253e4b9754d7b70fa53c504adf7cef3bf444a45077af864d39a1233fe15035\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1727:1757  _getImplementation() == __self */\n      and\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1727:1747  _getImplementation() */\n      tag_168\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1254:1308  StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1175:1315  function _getImplementation() internal view returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1727:1747  _getImplementation() */\n    tag_168:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1727:1757  _getImplementation() == __self */\n      and\n      eq\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":1719:1806  require(_getImplementation() == __self, \"Function must be called through active proxy\") */\n      tag_169\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_97\n      swap1\n      tag_121\n      jump\t// in\n    tag_169:\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3772:3808  _authorizeUpgrade(newImplementation) */\n      tag_172\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3790:3807  newImplementation */\n      dup3\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3772:3789  _authorizeUpgrade */\n      tag_124\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3772:3808  _authorizeUpgrade(newImplementation) */\n      jump\t// in\n    tag_172:\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3818:3870  _upgradeToAndCallUUPS(newImplementation, data, true) */\n      tag_173\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3840:3857  newImplementation */\n      dup3\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3859:3863  data */\n      dup3\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3865:3869  true */\n      0x01\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3818:3839  _upgradeToAndCallUUPS */\n      tag_130\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3818:3870  _upgradeToAndCallUUPS(newImplementation, data, true) */\n      jump\t// in\n    tag_173:\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":3657:3877  function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":2762:2893  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {... */\n    tag_55:\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":2840:2847  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":2080:2084  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":2089:2095  __self */\n      immutable(\"0x26253e4b9754d7b70fa53c504adf7cef3bf444a45077af864d39a1233fe15035\")\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":2072:2095  address(this) == __self */\n      and\n      eq\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":2064:2156  require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\") */\n      tag_175\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9191:9193   */\n      0x20\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":2064:2156  require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9173:9194   */\n      mstore\n        /* \"#utility.yul\":9230:9232   */\n      0x38\n        /* \"#utility.yul\":9210:9228   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9203:9233   */\n      mstore\n        /* \"#utility.yul\":9269:9303   */\n      0x555550535570677261646561626c653a206d757374206e6f742062652063616c\n        /* \"#utility.yul\":9249:9267   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9242:9304   */\n      mstore\n        /* \"#utility.yul\":9340:9366   */\n      0x6c6564207468726f7567682064656c656761746563616c6c0000000000000000\n        /* \"#utility.yul\":9320:9338   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9313:9367   */\n      mstore\n        /* \"#utility.yul\":9384:9403   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":2064:2156  require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\") */\n      tag_97\n        /* \"#utility.yul\":8989:9409   */\n      jump\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":2064:2156  require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\") */\n    tag_175:\n      pop\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":2762:2893  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"src/SimpleAccount.sol\":1737:1895  function execute(address dest, uint256 value, bytes calldata func) external {... */\n    tag_76:\n        /* \"src/SimpleAccount.sol\":1823:1854  _requireFromEntryPointOrOwner() */\n      tag_182\n        /* \"src/SimpleAccount.sol\":1823:1852  _requireFromEntryPointOrOwner */\n      tag_95\n        /* \"src/SimpleAccount.sol\":1823:1854  _requireFromEntryPointOrOwner() */\n      jump\t// in\n    tag_182:\n        /* \"src/SimpleAccount.sol\":1864:1888  _call(dest, value, func) */\n      tag_183\n        /* \"src/SimpleAccount.sol\":1870:1874  dest */\n      dup5\n        /* \"src/SimpleAccount.sol\":1876:1881  value */\n      dup5\n        /* \"src/SimpleAccount.sol\":1883:1887  func */\n      dup5\n      dup5\n        /* \"src/SimpleAccount.sol\":1864:1888  _call(dest, value, func) */\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n        /* \"src/SimpleAccount.sol\":1864:1869  _call */\n      tag_110\n      swap3\n      pop\n      pop\n      pop\n        /* \"src/SimpleAccount.sol\":1864:1888  _call(dest, value, func) */\n      jump\t// in\n    tag_183:\n        /* \"src/SimpleAccount.sol\":1737:1895  function execute(address dest, uint256 value, bytes calldata func) external {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/SimpleAccount.sol\":4268:4381  function getDeposit() public view returns (uint256) {... */\n    tag_79:\n        /* \"src/SimpleAccount.sol\":4311:4318  uint256 */\n      0x00\n        /* \"src/SimpleAccount.sol\":4337:4349  entryPoint() */\n      tag_185\n        /* \"src/SimpleAccount.sol\":1008:1019  _entryPoint */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      swap1\n        /* \"src/SimpleAccount.sol\":918:1026  function entryPoint() public view virtual override returns (IEntryPoint) {... */\n      jump\n        /* \"src/SimpleAccount.sol\":4337:4349  entryPoint() */\n    tag_185:\n        /* \"src/SimpleAccount.sol\":4337:4374  entryPoint().balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"src/SimpleAccount.sol\":4368:4372  this */\n      address\n        /* \"src/SimpleAccount.sol\":4337:4374  entryPoint().balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4677:4728   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/SimpleAccount.sol\":4337:4359  entryPoint().balanceOf */\n      swap2\n      swap1\n      swap2\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":4650:4668   */\n      0x24\n      add\n        /* \"src/SimpleAccount.sol\":4337:4374  entryPoint().balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_188\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_188:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_189\n      swap2\n      swap1\n      tag_190\n      jump\t// in\n    tag_189:\n        /* \"src/SimpleAccount.sol\":4330:4374  return entryPoint().balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"src/SimpleAccount.sol\":4268:4381  function getDeposit() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"src/BaseAccount.sol\":2486:2635  function _requireFromEntryPoint() internal virtual view {... */\n    tag_83:\n        /* \"src/SimpleAccount.sol\":1008:1019  _entryPoint */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"src/BaseAccount.sol\":2560:2570  msg.sender */\n      caller\n        /* \"src/BaseAccount.sol\":2560:2595  msg.sender == address(entryPoint()) */\n      eq\n        /* \"src/BaseAccount.sol\":2552:2628  require(msg.sender == address(entryPoint()), \"account: not from EntryPoint\") */\n      tag_193\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9805:9807   */\n      0x20\n        /* \"src/BaseAccount.sol\":2552:2628  require(msg.sender == address(entryPoint()), \"account: not from EntryPoint\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9787:9808   */\n      mstore\n        /* \"#utility.yul\":9844:9846   */\n      0x1c\n        /* \"#utility.yul\":9824:9842   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9817:9847   */\n      mstore\n        /* \"#utility.yul\":9883:9913   */\n      0x6163636f756e743a206e6f742066726f6d20456e747279506f696e7400000000\n        /* \"#utility.yul\":9863:9881   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9856:9914   */\n      mstore\n        /* \"#utility.yul\":9931:9949   */\n      0x64\n      add\n        /* \"src/BaseAccount.sol\":2552:2628  require(msg.sender == address(entryPoint()), \"account: not from EntryPoint\") */\n      tag_97\n        /* \"#utility.yul\":9603:9955   */\n      jump\n        /* \"src/BaseAccount.sol\":2552:2628  require(msg.sender == address(entryPoint()), \"account: not from EntryPoint\") */\n    tag_193:\n        /* \"src/BaseAccount.sol\":2486:2635  function _requireFromEntryPoint() internal virtual view {... */\n      jump\t// out\n        /* \"src/SimpleAccount.sol\":3569:3898  function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash, address)... */\n    tag_85:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7389:7423  \"\\x19Ethereum Signed Message:\\n32\" */\n      0x19457468657265756d205369676e6564204d6573736167653a0a333200000000\n        /* \"src/SimpleAccount.sol\":3696:3716  uint256 sigTimeRange */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7376:7424  mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7444:7448  0x1c */\n      0x1c\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7437:7455  mstore(0x1c, hash) */\n      dup4\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7495:7499  0x3c */\n      0x3c\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7479:7500  keccak256(0x00, 0x3c) */\n      dup2\n      keccak256\n        /* \"src/SimpleAccount.sol\":3801:3831  hash.recover(userOp.signature) */\n      tag_199\n        /* \"src/SimpleAccount.sol\":3814:3830  userOp.signature */\n      tag_200\n      0x0140\n      dup8\n      add\n        /* \"src/SimpleAccount.sol\":3814:3820  userOp */\n      dup8\n        /* \"src/SimpleAccount.sol\":3814:3830  userOp.signature */\n      tag_87\n      jump\t// in\n    tag_200:\n        /* \"src/SimpleAccount.sol\":3801:3831  hash.recover(userOp.signature) */\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n        /* \"src/SimpleAccount.sol\":3801:3805  hash */\n      dup6\n      swap4\n        /* \"src/SimpleAccount.sol\":3801:3831  hash.recover(userOp.signature) */\n      swap3\n      pop\n      pop\n        /* \"src/SimpleAccount.sol\":3801:3813  hash.recover */\n      tag_201\n        /* \"src/SimpleAccount.sol\":3801:3831  hash.recover(userOp.signature) */\n      swap1\n      pop\n      jump\t// in\n    tag_199:\n        /* \"src/SimpleAccount.sol\":3792:3797  owner */\n      sload(0x01)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"src/SimpleAccount.sol\":3792:3831  owner != hash.recover(userOp.signature) */\n      swap2\n      and\n      eq\n        /* \"src/SimpleAccount.sol\":3788:3873  if (owner != hash.recover(userOp.signature))... */\n      tag_202\n      jumpi\n        /* \"src/BaseAccount.sol\":756:757  1 */\n      0x01\n        /* \"src/SimpleAccount.sol\":3845:3873  return SIG_VALIDATION_FAILED */\n      swap2\n      pop\n      pop\n      jump(tag_196)\n        /* \"src/SimpleAccount.sol\":3788:3873  if (owner != hash.recover(userOp.signature))... */\n    tag_202:\n        /* \"src/SimpleAccount.sol\":3890:3891  0 */\n      0x00\n        /* \"src/SimpleAccount.sol\":3883:3891  return 0 */\n      swap2\n      pop\n      pop\n        /* \"src/SimpleAccount.sol\":3569:3898  function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash, address)... */\n    tag_196:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/SimpleAccount.sol\":3356:3514  function _validateAndUpdateNonce(UserOperation calldata userOp) internal override {... */\n    tag_90:\n        /* \"src/SimpleAccount.sol\":3456:3462  _nonce */\n      0x00\n        /* \"src/SimpleAccount.sol\":3456:3464  _nonce++ */\n      dup1\n      sload\n        /* \"src/SimpleAccount.sol\":3468:3480  userOp.nonce */\n      0x20\n      dup4\n      add\n      calldataload\n      swap2\n        /* \"src/SimpleAccount.sol\":3456:3464  _nonce++ */\n      0x010000\n      swap1\n      swap2\n      div\n      sub(shl(0x60, 0x01), 0x01)\n      and\n      swap1\n        /* \"src/SimpleAccount.sol\":3456:3462  _nonce */\n      0x02\n        /* \"src/SimpleAccount.sol\":3456:3464  _nonce++ */\n      tag_204\n      dup4\n      tag_205\n      jump\t// in\n    tag_204:\n      swap2\n      swap1\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      sub(shl(0x60, 0x01), 0x01)\n      mul\n      not\n      and\n      swap1\n      dup4\n      sub(shl(0x60, 0x01), 0x01)\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      sub(shl(0x60, 0x01), 0x01)\n        /* \"src/SimpleAccount.sol\":3456:3480  _nonce++ == userOp.nonce */\n      and\n      eq\n        /* \"src/SimpleAccount.sol\":3448:3507  require(_nonce++ == userOp.nonce, \"account: invalid nonce\") */\n      tag_125\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10384:10386   */\n      0x20\n        /* \"src/SimpleAccount.sol\":3448:3507  require(_nonce++ == userOp.nonce, \"account: invalid nonce\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10366:10387   */\n      mstore\n        /* \"#utility.yul\":10423:10425   */\n      0x16\n        /* \"#utility.yul\":10403:10421   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10396:10426   */\n      mstore\n      shl(0x50, 0x6163636f756e743a20696e76616c6964206e6f6e6365)\n        /* \"#utility.yul\":10442:10460   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10435:10487   */\n      mstore\n        /* \"#utility.yul\":10504:10522   */\n      0x64\n      add\n        /* \"src/SimpleAccount.sol\":3448:3507  require(_nonce++ == userOp.nonce, \"account: invalid nonce\") */\n      tag_97\n        /* \"#utility.yul\":10182:10528   */\n      jump\n        /* \"src/BaseAccount.sol\":4641:4978  function _payPrefund(uint256 missingAccountFunds) internal virtual {... */\n    tag_92:\n        /* \"src/BaseAccount.sol\":4722:4746  missingAccountFunds != 0 */\n      dup1\n      iszero\n        /* \"src/BaseAccount.sol\":4718:4972  if (missingAccountFunds != 0) {... */\n      tag_125\n      jumpi\n        /* \"src/BaseAccount.sol\":4780:4862  payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\"\") */\n      mload(0x40)\n        /* \"src/BaseAccount.sol\":4763:4775  bool success */\n      0x00\n      swap1\n        /* \"src/BaseAccount.sol\":4788:4798  msg.sender */\n      caller\n      swap1\n      not(0x00)\n        /* \"src/BaseAccount.sol\":4840:4857  type(uint256).max */\n      swap1\n        /* \"src/BaseAccount.sol\":4813:4832  missingAccountFunds */\n      dup5\n      swap1\n        /* \"src/BaseAccount.sol\":4763:4775  bool success */\n      dup5\n        /* \"src/BaseAccount.sol\":4780:4862  payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\"\") */\n      dup2\n        /* \"src/BaseAccount.sol\":4763:4775  bool success */\n      dup2\n        /* \"src/BaseAccount.sol\":4780:4862  payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\"\") */\n      dup2\n        /* \"src/BaseAccount.sol\":4813:4832  missingAccountFunds */\n      dup6\n        /* \"src/BaseAccount.sol\":4788:4798  msg.sender */\n      dup9\n        /* \"src/BaseAccount.sol\":4840:4857  type(uint256).max */\n      dup9\n        /* \"src/BaseAccount.sol\":4780:4862  payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\"\") */\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_100\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_100)\n        /* \"src/SimpleAccount.sol\":3126:3301  function _requireFromEntryPointOrOwner() internal view {... */\n    tag_95:\n        /* \"src/SimpleAccount.sol\":1008:1019  _entryPoint */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"src/SimpleAccount.sol\":3199:3209  msg.sender */\n      caller\n        /* \"src/SimpleAccount.sol\":3199:3234  msg.sender == address(entryPoint()) */\n      eq\n      dup1\n        /* \"src/SimpleAccount.sol\":3199:3257  msg.sender == address(entryPoint()) || msg.sender == owner */\n      tag_217\n      jumpi\n      pop\n        /* \"src/SimpleAccount.sol\":3252:3257  owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"src/SimpleAccount.sol\":3238:3248  msg.sender */\n      caller\n        /* \"src/SimpleAccount.sol\":3238:3257  msg.sender == owner */\n      eq\n        /* \"src/SimpleAccount.sol\":3199:3257  msg.sender == address(entryPoint()) || msg.sender == owner */\n    tag_217:\n        /* \"src/SimpleAccount.sol\":3191:3294  require(msg.sender == address(entryPoint()) || msg.sender == owner, \"account: not Owner or EntryPoint\") */\n      tag_193\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10735:10737   */\n      0x20\n        /* \"src/SimpleAccount.sol\":3191:3294  require(msg.sender == address(entryPoint()) || msg.sender == owner, \"account: not Owner or EntryPoint\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10717:10738   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":10754:10772   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10747:10777   */\n      mstore\n        /* \"#utility.yul\":10813:10847   */\n      0x6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e74\n        /* \"#utility.yul\":10793:10811   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10786:10848   */\n      mstore\n        /* \"#utility.yul\":10865:10883   */\n      0x64\n      add\n        /* \"src/SimpleAccount.sol\":3191:3294  require(msg.sender == address(entryPoint()) || msg.sender == owner, \"account: not Owner or EntryPoint\") */\n      tag_97\n        /* \"#utility.yul\":10533:10889   */\n      jump\n        /* \"src/SimpleAccount.sol\":3904:4191  function _call(address target, uint256 value, bytes memory data) internal {... */\n    tag_110:\n        /* \"src/SimpleAccount.sol\":3989:4001  bool success */\n      0x00\n        /* \"src/SimpleAccount.sol\":4003:4022  bytes memory result */\n      dup1\n        /* \"src/SimpleAccount.sol\":4026:4032  target */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/SimpleAccount.sol\":4026:4037  target.call */\n      and\n        /* \"src/SimpleAccount.sol\":4046:4051  value */\n      dup5\n        /* \"src/SimpleAccount.sol\":4053:4057  data */\n      dup5\n        /* \"src/SimpleAccount.sol\":4026:4058  target.call{value : value}(data) */\n      mload(0x40)\n      tag_222\n      swap2\n      swap1\n      tag_223\n      jump\t// in\n    tag_222:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_226\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_225)\n    tag_226:\n      0x60\n      swap2\n      pop\n    tag_225:\n      pop\n        /* \"src/SimpleAccount.sol\":3988:4058  (bool success, bytes memory result) = target.call{value : value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"src/SimpleAccount.sol\":4073:4080  success */\n      dup2\n        /* \"src/SimpleAccount.sol\":4068:4185  if (!success) {... */\n      tag_100\n      jumpi\n        /* \"src/SimpleAccount.sol\":4153:4159  result */\n      dup1\n        /* \"src/SimpleAccount.sol\":4147:4160  mload(result) */\n      mload\n        /* \"src/SimpleAccount.sol\":4142:4144  32 */\n      0x20\n        /* \"src/SimpleAccount.sol\":4134:4140  result */\n      dup3\n        /* \"src/SimpleAccount.sol\":4130:4145  add(result, 32) */\n      add\n        /* \"src/SimpleAccount.sol\":4123:4161  revert(add(result, 32), mload(result)) */\n      revert\n        /* \"src/SimpleAccount.sol\":4920:5055  function _authorizeUpgrade(address newImplementation) internal view override {... */\n    tag_124:\n        /* \"src/SimpleAccount.sol\":5036:5048  _onlyOwner() */\n      tag_125\n        /* \"src/SimpleAccount.sol\":5036:5046  _onlyOwner */\n      tag_157\n        /* \"src/SimpleAccount.sol\":5036:5048  _onlyOwner() */\n      jump\t// in\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2494:3416  function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {... */\n    tag_130:\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":689:755  0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143 */\n      0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2910:2958  StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value */\n      sload\n      0xff\n      and\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2906:3410  if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {... */\n      iszero\n      tag_236\n      jumpi\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2974:3011  _setImplementation(newImplementation) */\n      tag_144\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2993:3010  newImplementation */\n      dup4\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2974:2992  _setImplementation */\n      tag_238\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2974:3011  _setImplementation(newImplementation) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2906:3410  if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {... */\n    tag_236:\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3064:3081  newImplementation */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3046:3096  IERC1822Proxiable(newImplementation).proxiableUUID */\n      and\n      0x52d1902d\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3046:3098  IERC1822Proxiable(newImplementation).proxiableUUID() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_240\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_241\n      swap2\n      dup2\n      add\n      swap1\n      tag_190\n      jump\t// in\n    tag_241:\n      0x01\n    tag_240:\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3042:3333  try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {... */\n      tag_243\n      jumpi\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3262:3318  revert(\"ERC1967Upgrade: new implementation is not UUPS\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11832:11834   */\n      0x20\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3262:3318  revert(\"ERC1967Upgrade: new implementation is not UUPS\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11814:11835   */\n      mstore\n        /* \"#utility.yul\":11871:11873   */\n      0x2e\n        /* \"#utility.yul\":11851:11869   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11844:11874   */\n      mstore\n        /* \"#utility.yul\":11910:11944   */\n      0x45524331393637557067726164653a206e657720696d706c656d656e74617469\n        /* \"#utility.yul\":11890:11908   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11883:11945   */\n      mstore\n      shl(0x90, 0x6f6e206973206e6f742055555053)\n        /* \"#utility.yul\":11961:11979   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11954:11998   */\n      mstore\n        /* \"#utility.yul\":12015:12034   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3262:3318  revert(\"ERC1967Upgrade: new implementation is not UUPS\") */\n      tag_97\n        /* \"#utility.yul\":11630:12040   */\n      jump\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3042:3333  try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {... */\n    tag_243:\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3148:3176  slot == _IMPLEMENTATION_SLOT */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3140:3222  require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\") */\n      tag_250\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12247:12249   */\n      0x20\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3140:3222  require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12229:12250   */\n      mstore\n        /* \"#utility.yul\":12286:12288   */\n      0x29\n        /* \"#utility.yul\":12266:12284   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12259:12289   */\n      mstore\n        /* \"#utility.yul\":12325:12359   */\n      0x45524331393637557067726164653a20756e737570706f727465642070726f78\n        /* \"#utility.yul\":12305:12323   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12298:12360   */\n      mstore\n      shl(0xba, 0x1a58589b1955555251)\n        /* \"#utility.yul\":12376:12394   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12369:12408   */\n      mstore\n        /* \"#utility.yul\":12425:12444   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3140:3222  require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\") */\n      tag_97\n        /* \"#utility.yul\":12045:12450   */\n      jump\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3140:3222  require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\") */\n    tag_250:\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3099:3237  returns (bytes32 slot) {... */\n      pop\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3346:3399  _upgradeToAndCall(newImplementation, data, forceCall) */\n      tag_144\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3364:3381  newImplementation */\n      dup4\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3383:3387  data */\n      dup4\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3389:3398  forceCall */\n      dup4\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3346:3363  _upgradeToAndCall */\n      tag_254\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":3346:3399  _upgradeToAndCall(newImplementation, data, forceCall) */\n      jump\t// in\n        /* \"src/SimpleAccount.sol\":2584:2792  function _initialize(address anOwner, IEntryPoint anEntryPoint) internal virtual {... */\n    tag_143:\n        /* \"src/SimpleAccount.sol\":2675:2680  owner */\n      0x01\n        /* \"src/SimpleAccount.sol\":2675:2690  owner = anOwner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup6\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap3\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"src/SimpleAccount.sol\":2700:2711  _entryPoint */\n      0x02\n        /* \"src/SimpleAccount.sol\":2700:2726  _entryPoint = anEntryPoint */\n      dup1\n      sload\n      swap2\n      dup6\n      and\n      swap2\n      swap1\n      swap3\n      and\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"src/SimpleAccount.sol\":2741:2785  SimpleAccountInitialized(_entryPoint, owner) */\n      mload(0x40)\n      0x47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de\n      swap1\n        /* \"src/SimpleAccount.sol\":2675:2680  owner */\n      0x00\n      swap1\n        /* \"src/SimpleAccount.sol\":2741:2785  SimpleAccountInitialized(_entryPoint, owner) */\n      log3\n        /* \"src/SimpleAccount.sol\":2584:2792  function _initialize(address anOwner, IEntryPoint anEntryPoint) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"src/SimpleAccount.sol\":1400:1638  function _onlyOwner() internal view {... */\n    tag_157:\n        /* \"src/SimpleAccount.sol\":1580:1585  owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"src/SimpleAccount.sol\":1566:1576  msg.sender */\n      caller\n        /* \"src/SimpleAccount.sol\":1566:1585  msg.sender == owner */\n      eq\n      dup1\n        /* \"src/SimpleAccount.sol\":1566:1616  msg.sender == owner || msg.sender == address(this) */\n      tag_258\n      jumpi\n      pop\n        /* \"src/SimpleAccount.sol\":1589:1599  msg.sender */\n      caller\n        /* \"src/SimpleAccount.sol\":1611:1615  this */\n      address\n        /* \"src/SimpleAccount.sol\":1589:1616  msg.sender == address(this) */\n      eq\n        /* \"src/SimpleAccount.sol\":1566:1616  msg.sender == owner || msg.sender == address(this) */\n    tag_258:\n        /* \"src/SimpleAccount.sol\":1558:1631  require(msg.sender == owner || msg.sender == address(this), \"only owner\") */\n      tag_193\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12657:12659   */\n      0x20\n        /* \"src/SimpleAccount.sol\":1558:1631  require(msg.sender == owner || msg.sender == address(this), \"only owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12639:12660   */\n      mstore\n        /* \"#utility.yul\":12696:12698   */\n      0x0a\n        /* \"#utility.yul\":12676:12694   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12669:12699   */\n      mstore\n      shl(0xb1, 0x37b7363c9037bbb732b9)\n        /* \"#utility.yul\":12715:12733   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12708:12748   */\n      mstore\n        /* \"#utility.yul\":12765:12783   */\n      0x64\n      add\n        /* \"src/SimpleAccount.sol\":1558:1631  require(msg.sender == owner || msg.sender == address(this), \"only owner\") */\n      tag_97\n        /* \"#utility.yul\":12455:12789   */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3661:3888  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {... */\n    tag_201:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3739:3746  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3759:3776  address recovered */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3778:3796  RecoverError error */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3800:3827  tryRecover(hash, signature) */\n      tag_264\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3811:3815  hash */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3817:3826  signature */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3800:3810  tryRecover */\n      tag_265\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3800:3827  tryRecover(hash, signature) */\n      jump\t// in\n    tag_264:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3758:3827  (address recovered, RecoverError error) = tryRecover(hash, signature) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3837:3855  _throwError(error) */\n      tag_266\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3849:3854  error */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3837:3848  _throwError */\n      tag_267\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3837:3855  _throwError(error) */\n      jump\t// in\n    tag_266:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3872:3881  recovered */\n      swap4\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":3661:3888  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1406:1665  function _setImplementation(address newImplementation) private {... */\n    tag_238:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1721  account.code.length */\n      dup2\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1479:1574  require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\") */\n      tag_272\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12996:12998   */\n      0x20\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1479:1574  require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12978:12999   */\n      mstore\n        /* \"#utility.yul\":13035:13037   */\n      0x2d\n        /* \"#utility.yul\":13015:13033   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13008:13038   */\n      mstore\n        /* \"#utility.yul\":13074:13108   */\n      0x455243313936373a206e657720696d706c656d656e746174696f6e206973206e\n        /* \"#utility.yul\":13054:13072   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13047:13109   */\n      mstore\n      shl(0x9a, 0x1bdd08184818dbdb9d1c9858dd)\n        /* \"#utility.yul\":13125:13143   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":13118:13161   */\n      mstore\n        /* \"#utility.yul\":13178:13197   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1479:1574  require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\") */\n      tag_97\n        /* \"#utility.yul\":12794:13203   */\n      jump\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1479:1574  require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\") */\n    tag_272:\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1584:1658  StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1406:1665  function _setImplementation(address newImplementation) private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2057:2322  function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {... */\n    tag_254:\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2165:2194  _upgradeTo(newImplementation) */\n      tag_277\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2176:2193  newImplementation */\n      dup4\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2165:2175  _upgradeTo */\n      tag_278\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2165:2194  _upgradeTo(newImplementation) */\n      jump\t// in\n    tag_277:\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2222:2223  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2208:2212  data */\n      dup3\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2208:2219  data.length */\n      mload\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2208:2223  data.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2208:2236  data.length > 0 || forceCall */\n      dup1\n      tag_279\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2227:2236  forceCall */\n      dup1\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2208:2236  data.length > 0 || forceCall */\n    tag_279:\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2204:2316  if (data.length > 0 || forceCall) {... */\n      iszero\n      tag_144\n      jumpi\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2252:2305  Address.functionDelegateCall(newImplementation, data) */\n      tag_183\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2281:2298  newImplementation */\n      dup4\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2300:2304  data */\n      dup4\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2252:2280  Address.functionDelegateCall */\n      tag_282\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":2252:2305  Address.functionDelegateCall(newImplementation, data) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2145:2875  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {... */\n    tag_265:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2226:2233  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2235:2247  RecoverError */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2263:2272  signature */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2263:2279  signature.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2283:2285  65 */\n      0x41\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2263:2285  signature.length == 65 */\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2259:2869  if (signature.length == 65) {... */\n      tag_284\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2599:2603  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2584:2604  add(signature, 0x20) */\n      dup4\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2578:2605  mload(add(signature, 0x20)) */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2648:2652  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2633:2653  add(signature, 0x40) */\n      dup5\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2627:2654  mload(add(signature, 0x40)) */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2705:2709  0x60 */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2690:2710  add(signature, 0x60) */\n      dup6\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2684:2711  mload(add(signature, 0x60)) */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2301:2310  bytes32 r */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2676:2712  byte(0, mload(add(signature, 0x60))) */\n      byte\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2746:2771  tryRecover(hash, v, r, s) */\n      tag_285\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2757:2761  hash */\n      dup8\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2676:2712  byte(0, mload(add(signature, 0x60))) */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2578:2605  mload(add(signature, 0x20)) */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2627:2654  mload(add(signature, 0x40)) */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2746:2756  tryRecover */\n      tag_286\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2746:2771  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_285:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2739:2771  return tryRecover(hash, v, r, s) */\n      swap5\n      pop\n      swap5\n      pop\n      pop\n      pop\n      pop\n      jump(tag_287)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2259:2869  if (signature.length == 65) {... */\n    tag_284:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2818:2819  0 */\n      0x00\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2822:2857  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2259:2869  if (signature.length == 65) {... */\n    tag_287:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":2145:2875  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {... */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":570:1081  function _throwError(RecoverError error) private pure {... */\n    tag_267:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":647:667  RecoverError.NoError */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":638:643  error */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":638:667  error == RecoverError.NoError */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_293\n      jumpi\n      tag_293\n      tag_291\n      jump\t// in\n    tag_293:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":634:1075  if (error == RecoverError.NoError) {... */\n      tag_294\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":570:1081  function _throwError(RecoverError error) private pure {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":634:1075  if (error == RecoverError.NoError) {... */\n    tag_294:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":743:772  RecoverError.InvalidSignature */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":734:739  error */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":734:772  error == RecoverError.InvalidSignature */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_299\n      jumpi\n      tag_299\n      tag_291\n      jump\t// in\n    tag_299:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":730:1075  if (error == RecoverError.InvalidSignature) {... */\n      tag_300\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":788:822  revert(\"ECDSA: invalid signature\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13542:13544   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":788:822  revert(\"ECDSA: invalid signature\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13524:13545   */\n      mstore\n        /* \"#utility.yul\":13581:13583   */\n      0x18\n        /* \"#utility.yul\":13561:13579   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13554:13584   */\n      mstore\n        /* \"#utility.yul\":13620:13646   */\n      0x45434453413a20696e76616c6964207369676e61747572650000000000000000\n        /* \"#utility.yul\":13600:13618   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13593:13647   */\n      mstore\n        /* \"#utility.yul\":13664:13682   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":788:822  revert(\"ECDSA: invalid signature\") */\n      tag_97\n        /* \"#utility.yul\":13340:13688   */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":730:1075  if (error == RecoverError.InvalidSignature) {... */\n    tag_300:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":852:887  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":843:848  error */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":843:887  error == RecoverError.InvalidSignatureLength */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_307\n      jumpi\n      tag_307\n      tag_291\n      jump\t// in\n    tag_307:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":839:1075  if (error == RecoverError.InvalidSignatureLength) {... */\n      tag_308\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":903:944  revert(\"ECDSA: invalid signature length\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13895:13897   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":903:944  revert(\"ECDSA: invalid signature length\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13877:13898   */\n      mstore\n        /* \"#utility.yul\":13934:13936   */\n      0x1f\n        /* \"#utility.yul\":13914:13932   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13907:13937   */\n      mstore\n        /* \"#utility.yul\":13973:14006   */\n      0x45434453413a20696e76616c6964207369676e6174757265206c656e67746800\n        /* \"#utility.yul\":13953:13971   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13946:14007   */\n      mstore\n        /* \"#utility.yul\":14024:14042   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":903:944  revert(\"ECDSA: invalid signature length\") */\n      tag_97\n        /* \"#utility.yul\":13693:14048   */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":839:1075  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_308:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":974:1004  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":965:970  error */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":965:1004  error == RecoverError.InvalidSignatureS */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_315\n      jumpi\n      tag_315\n      tag_291\n      jump\t// in\n    tag_315:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":961:1075  if (error == RecoverError.InvalidSignatureS) {... */\n      tag_125\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1020:1064  revert(\"ECDSA: invalid signature 's' value\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14255:14257   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1020:1064  revert(\"ECDSA: invalid signature 's' value\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14237:14258   */\n      mstore\n        /* \"#utility.yul\":14294:14296   */\n      0x22\n        /* \"#utility.yul\":14274:14292   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14267:14297   */\n      mstore\n        /* \"#utility.yul\":14333:14367   */\n      0x45434453413a20696e76616c6964207369676e6174757265202773272076616c\n        /* \"#utility.yul\":14313:14331   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14306:14368   */\n      mstore\n      shl(0xf0, 0x7565)\n        /* \"#utility.yul\":14384:14402   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":14377:14409   */\n      mstore\n        /* \"#utility.yul\":14426:14445   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1020:1064  revert(\"ECDSA: invalid signature 's' value\") */\n      tag_97\n        /* \"#utility.yul\":14053:14451   */\n      jump\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1771:1923  function _upgradeTo(address newImplementation) internal {... */\n    tag_278:\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1837:1874  _setImplementation(newImplementation) */\n      tag_320\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1856:1873  newImplementation */\n      dup2\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1837:1855  _setImplementation */\n      tag_238\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1837:1874  _setImplementation(newImplementation) */\n      jump\t// in\n    tag_320:\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1889:1916  Upgraded(newImplementation) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      swap1\n      0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b\n      swap1\n      0x00\n      swap1\n      log2\n        /* \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":1771:1923  function _upgradeTo(address newImplementation) internal {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6674:6872  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {... */\n    tag_282:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6757:6769  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6788:6865  functionDelegateCall(target, data, \"Address: low-level delegate call failed\") */\n      tag_196\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6809:6815  target */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6817:6821  data */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6788:6865  functionDelegateCall(target, data, \"Address: low-level delegate call failed\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x27\n      dup2\n      mstore\n      0x20\n      add\n      data_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398\n      0x27\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6788:6808  functionDelegateCall */\n      tag_323\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6788:6865  functionDelegateCall(target, data, \"Address: low-level delegate call failed\") */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5009:6465  function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {... */\n    tag_286:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5097:5104  address */\n      0x00\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6021:6087  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6008:6087  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup4\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6004:6165  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      iszero\n      tag_325\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6119:6120  0 */\n      0x00\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6123:6153  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6103:6154  return (address(0), RecoverError.InvalidSignatureS) */\n      jump(tag_324)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6004:6165  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_325:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6276:6300  ecrecover(hash, v, r, s) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6259:6273  address signer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6276:6300  ecrecover(hash, v, r, s) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      dup5\n      mstore\n        /* \"#utility.yul\":14683:14708   */\n      dup10\n      swap1\n      mstore\n        /* \"#utility.yul\":14756:14760   */\n      0xff\n        /* \"#utility.yul\":14744:14761   */\n      dup9\n      and\n        /* \"#utility.yul\":14724:14742   */\n      swap3\n      dup3\n      add\n        /* \"#utility.yul\":14717:14762   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":14778:14796   */\n      0x60\n      dup2\n      add\n        /* \"#utility.yul\":14771:14805   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":14821:14839   */\n      0x80\n      dup2\n      add\n        /* \"#utility.yul\":14814:14848   */\n      dup6\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6276:6300  ecrecover(hash, v, r, s) */\n      0x01\n      swap1\n        /* \"#utility.yul\":14655:14674   */\n      0xa0\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6276:6300  ecrecover(hash, v, r, s) */\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_329\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_329:\n      pop\n      pop\n      mload(add(not(0x1f), mload(0x40)))\n      swap2\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6314:6334  signer == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6310:6411  if (signer == address(0)) {... */\n      tag_330\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6366:6367  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6370:6399  RecoverError.InvalidSignature */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6350:6400  return (address(0), RecoverError.InvalidSignature) */\n      swap3\n      pop\n      swap3\n      pop\n      pop\n      jump(tag_324)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6310:6411  if (signer == address(0)) {... */\n    tag_330:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6429:6435  signer */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6437:6457  RecoverError.NoError */\n      0x00\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5009:6465  function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {... */\n    tag_324:\n      swap5\n      pop\n      swap5\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7058:7383  function functionDelegateCall(... */\n    tag_323:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7199:7211  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7224:7236  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7238:7261  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7265:7271  target */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7265:7284  target.delegatecall */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7285:7289  data */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7265:7290  target.delegatecall(data) */\n      mload(0x40)\n      tag_332\n      swap2\n      swap1\n      tag_223\n      jump\t// in\n    tag_332:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      gas\n      delegatecall\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_335\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_334)\n    tag_335:\n      0x60\n      swap2\n      pop\n    tag_334:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7223:7290  (bool success, bytes memory returndata) = target.delegatecall(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7307:7376  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_336\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7334:7340  target */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7342:7349  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7351:7361  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7363:7375  errorMessage */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7307:7333  verifyCallResultFromTarget */\n      tag_337\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7307:7376  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_336:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7300:7376  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7058:7383  function functionDelegateCall(... */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7671:8299  function verifyCallResultFromTarget(... */\n    tag_337:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7851:7863  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7879:7886  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7875:8293  if (success) {... */\n      iszero\n      tag_339\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7906:7916  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7906:7923  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7927:7928  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7906:7928  returndata.length == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7902:8188  if (returndata.length == 0) {... */\n      tag_342\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1721  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8113:8173  require(isContract(target), \"Address: call to non-contract\") */\n      tag_342\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":15061:15063   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8113:8173  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":15043:15064   */\n      mstore\n        /* \"#utility.yul\":15100:15102   */\n      0x1d\n        /* \"#utility.yul\":15080:15098   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":15073:15103   */\n      mstore\n        /* \"#utility.yul\":15139:15170   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":15119:15137   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":15112:15171   */\n      mstore\n        /* \"#utility.yul\":15188:15206   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8113:8173  require(isContract(target), \"Address: call to non-contract\") */\n      tag_97\n        /* \"#utility.yul\":14859:15212   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8113:8173  require(isContract(target), \"Address: call to non-contract\") */\n    tag_342:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8208:8218  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8201:8218  return returndata */\n      jump(tag_91)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7875:8293  if (success) {... */\n    tag_339:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8249:8282  _revert(returndata, errorMessage) */\n      tag_91\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8257:8267  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8269:8281  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8980:8997  returndata.length */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8980:9001  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8976:9355  if (returndata.length > 0) {... */\n      tag_349\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9208:9218  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9202:9219  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9264:9279  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9251:9261  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9247:9249  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9243:9262  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9236:9280  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8976:9355  if (returndata.length > 0) {... */\n    tag_349:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9331:9343  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9324:9344  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_97\n      swap2\n      swap1\n      tag_352\n      jump\t// in\n        /* \"#utility.yul\":14:145   */\n    tag_353:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":89:120   */\n      dup2\n      and\n        /* \"#utility.yul\":79:121   */\n      dup2\n      eq\n        /* \"#utility.yul\":69:139   */\n      tag_125\n      jumpi\n        /* \"#utility.yul\":135:136   */\n      0x00\n        /* \"#utility.yul\":132:133   */\n      dup1\n        /* \"#utility.yul\":125:137   */\n      revert\n        /* \"#utility.yul\":150:815   */\n    tag_23:\n        /* \"#utility.yul\":269:275   */\n      0x00\n        /* \"#utility.yul\":277:283   */\n      dup1\n        /* \"#utility.yul\":285:291   */\n      0x00\n        /* \"#utility.yul\":293:299   */\n      dup1\n        /* \"#utility.yul\":346:349   */\n      0x80\n        /* \"#utility.yul\":334:343   */\n      dup6\n        /* \"#utility.yul\":325:332   */\n      dup8\n        /* \"#utility.yul\":321:344   */\n      sub\n        /* \"#utility.yul\":317:350   */\n      slt\n        /* \"#utility.yul\":314:367   */\n      iszero\n      tag_361\n      jumpi\n        /* \"#utility.yul\":363:364   */\n      0x00\n        /* \"#utility.yul\":360:361   */\n      dup1\n        /* \"#utility.yul\":353:365   */\n      revert\n        /* \"#utility.yul\":314:367   */\n    tag_361:\n        /* \"#utility.yul\":403:412   */\n      dup5\n        /* \"#utility.yul\":390:413   */\n      calldataload\n        /* \"#utility.yul\":436:454   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":428:434   */\n      dup2\n        /* \"#utility.yul\":425:455   */\n      gt\n        /* \"#utility.yul\":422:472   */\n      iszero\n      tag_362\n      jumpi\n        /* \"#utility.yul\":468:469   */\n      0x00\n        /* \"#utility.yul\":465:466   */\n      dup1\n        /* \"#utility.yul\":458:470   */\n      revert\n        /* \"#utility.yul\":422:472   */\n    tag_362:\n        /* \"#utility.yul\":491:513   */\n      dup6\n      add\n        /* \"#utility.yul\":547:550   */\n      0x0160\n        /* \"#utility.yul\":529:545   */\n      dup2\n      dup9\n      sub\n        /* \"#utility.yul\":525:551   */\n      slt\n        /* \"#utility.yul\":522:568   */\n      iszero\n      tag_363\n      jumpi\n        /* \"#utility.yul\":564:565   */\n      0x00\n        /* \"#utility.yul\":561:562   */\n      dup1\n        /* \"#utility.yul\":554:566   */\n      revert\n        /* \"#utility.yul\":522:568   */\n    tag_363:\n        /* \"#utility.yul\":587:589   */\n      swap4\n      pop\n        /* \"#utility.yul\":636:638   */\n      0x20\n        /* \"#utility.yul\":621:639   */\n      dup6\n      add\n        /* \"#utility.yul\":608:640   */\n      calldataload\n      swap3\n      pop\n        /* \"#utility.yul\":690:692   */\n      0x40\n        /* \"#utility.yul\":675:693   */\n      dup6\n      add\n        /* \"#utility.yul\":662:694   */\n      calldataload\n        /* \"#utility.yul\":703:734   */\n      tag_364\n        /* \"#utility.yul\":662:694   */\n      dup2\n        /* \"#utility.yul\":703:734   */\n      tag_353\n      jump\t// in\n    tag_364:\n        /* \"#utility.yul\":150:815   */\n      swap4\n      swap7\n      swap3\n      swap6\n      pop\n        /* \"#utility.yul\":753:758   */\n      swap3\n      swap4\n        /* \"#utility.yul\":805:807   */\n      0x60\n        /* \"#utility.yul\":790:808   */\n      add\n        /* \"#utility.yul\":777:809   */\n      calldataload\n      swap3\n      pop\n      pop\n        /* \"#utility.yul\":150:815   */\n      jump\t// out\n        /* \"#utility.yul\":1002:1369   */\n    tag_354:\n        /* \"#utility.yul\":1065:1073   */\n      0x00\n        /* \"#utility.yul\":1075:1081   */\n      dup1\n        /* \"#utility.yul\":1129:1132   */\n      dup4\n        /* \"#utility.yul\":1122:1126   */\n      0x1f\n        /* \"#utility.yul\":1114:1120   */\n      dup5\n        /* \"#utility.yul\":1110:1127   */\n      add\n        /* \"#utility.yul\":1106:1133   */\n      slt\n        /* \"#utility.yul\":1096:1151   */\n      tag_367\n      jumpi\n        /* \"#utility.yul\":1147:1148   */\n      0x00\n        /* \"#utility.yul\":1144:1145   */\n      dup1\n        /* \"#utility.yul\":1137:1149   */\n      revert\n        /* \"#utility.yul\":1096:1151   */\n    tag_367:\n      pop\n        /* \"#utility.yul\":1170:1190   */\n      dup2\n      calldataload\n        /* \"#utility.yul\":1213:1231   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1202:1232   */\n      dup2\n      gt\n        /* \"#utility.yul\":1199:1249   */\n      iszero\n      tag_368\n      jumpi\n        /* \"#utility.yul\":1245:1246   */\n      0x00\n        /* \"#utility.yul\":1242:1243   */\n      dup1\n        /* \"#utility.yul\":1235:1247   */\n      revert\n        /* \"#utility.yul\":1199:1249   */\n    tag_368:\n        /* \"#utility.yul\":1282:1286   */\n      0x20\n        /* \"#utility.yul\":1274:1280   */\n      dup4\n        /* \"#utility.yul\":1270:1287   */\n      add\n        /* \"#utility.yul\":1258:1287   */\n      swap2\n      pop\n        /* \"#utility.yul\":1342:1345   */\n      dup4\n        /* \"#utility.yul\":1335:1339   */\n      0x20\n        /* \"#utility.yul\":1325:1331   */\n      dup3\n        /* \"#utility.yul\":1322:1323   */\n      0x05\n        /* \"#utility.yul\":1318:1332   */\n      shl\n        /* \"#utility.yul\":1310:1316   */\n      dup6\n        /* \"#utility.yul\":1306:1333   */\n      add\n        /* \"#utility.yul\":1302:1340   */\n      add\n        /* \"#utility.yul\":1299:1346   */\n      gt\n        /* \"#utility.yul\":1296:1363   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":1359:1360   */\n      0x00\n        /* \"#utility.yul\":1356:1357   */\n      dup1\n        /* \"#utility.yul\":1349:1361   */\n      revert\n        /* \"#utility.yul\":1374:2158   */\n    tag_30:\n        /* \"#utility.yul\":1507:1513   */\n      0x00\n        /* \"#utility.yul\":1515:1521   */\n      dup1\n        /* \"#utility.yul\":1523:1529   */\n      0x00\n        /* \"#utility.yul\":1531:1537   */\n      dup1\n        /* \"#utility.yul\":1584:1586   */\n      0x40\n        /* \"#utility.yul\":1572:1581   */\n      dup6\n        /* \"#utility.yul\":1563:1570   */\n      dup8\n        /* \"#utility.yul\":1559:1582   */\n      sub\n        /* \"#utility.yul\":1555:1587   */\n      slt\n        /* \"#utility.yul\":1552:1604   */\n      iszero\n      tag_371\n      jumpi\n        /* \"#utility.yul\":1600:1601   */\n      0x00\n        /* \"#utility.yul\":1597:1598   */\n      dup1\n        /* \"#utility.yul\":1590:1602   */\n      revert\n        /* \"#utility.yul\":1552:1604   */\n    tag_371:\n        /* \"#utility.yul\":1640:1649   */\n      dup5\n        /* \"#utility.yul\":1627:1650   */\n      calldataload\n        /* \"#utility.yul\":1669:1687   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1710:1712   */\n      dup1\n        /* \"#utility.yul\":1702:1708   */\n      dup3\n        /* \"#utility.yul\":1699:1713   */\n      gt\n        /* \"#utility.yul\":1696:1730   */\n      iszero\n      tag_372\n      jumpi\n        /* \"#utility.yul\":1726:1727   */\n      0x00\n        /* \"#utility.yul\":1723:1724   */\n      dup1\n        /* \"#utility.yul\":1716:1728   */\n      revert\n        /* \"#utility.yul\":1696:1730   */\n    tag_372:\n        /* \"#utility.yul\":1765:1835   */\n      tag_373\n        /* \"#utility.yul\":1827:1834   */\n      dup9\n        /* \"#utility.yul\":1818:1824   */\n      dup4\n        /* \"#utility.yul\":1807:1816   */\n      dup10\n        /* \"#utility.yul\":1803:1825   */\n      add\n        /* \"#utility.yul\":1765:1835   */\n      tag_354\n      jump\t// in\n    tag_373:\n        /* \"#utility.yul\":1854:1862   */\n      swap1\n      swap7\n      pop\n        /* \"#utility.yul\":1739:1835   */\n      swap5\n      pop\n        /* \"#utility.yul\":1942:1944   */\n      0x20\n        /* \"#utility.yul\":1927:1945   */\n      dup8\n      add\n        /* \"#utility.yul\":1914:1946   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1958:1974   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":1955:1991   */\n      iszero\n      tag_374\n      jumpi\n        /* \"#utility.yul\":1987:1988   */\n      0x00\n        /* \"#utility.yul\":1984:1985   */\n      dup1\n        /* \"#utility.yul\":1977:1989   */\n      revert\n        /* \"#utility.yul\":1955:1991   */\n    tag_374:\n      pop\n        /* \"#utility.yul\":2026:2098   */\n      tag_375\n        /* \"#utility.yul\":2090:2097   */\n      dup8\n        /* \"#utility.yul\":2079:2087   */\n      dup3\n        /* \"#utility.yul\":2068:2077   */\n      dup9\n        /* \"#utility.yul\":2064:2088   */\n      add\n        /* \"#utility.yul\":2026:2098   */\n      tag_354\n      jump\t// in\n    tag_375:\n        /* \"#utility.yul\":1374:2158   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n        /* \"#utility.yul\":2117:2125   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1374:2158   */\n      jump\t// out\n        /* \"#utility.yul\":2163:2410   */\n    tag_35:\n        /* \"#utility.yul\":2222:2228   */\n      0x00\n        /* \"#utility.yul\":2275:2277   */\n      0x20\n        /* \"#utility.yul\":2263:2272   */\n      dup3\n        /* \"#utility.yul\":2254:2261   */\n      dup5\n        /* \"#utility.yul\":2250:2273   */\n      sub\n        /* \"#utility.yul\":2246:2278   */\n      slt\n        /* \"#utility.yul\":2243:2295   */\n      iszero\n      tag_377\n      jumpi\n        /* \"#utility.yul\":2291:2292   */\n      0x00\n        /* \"#utility.yul\":2288:2289   */\n      dup1\n        /* \"#utility.yul\":2281:2293   */\n      revert\n        /* \"#utility.yul\":2243:2295   */\n    tag_377:\n        /* \"#utility.yul\":2330:2339   */\n      dup2\n        /* \"#utility.yul\":2317:2340   */\n      calldataload\n        /* \"#utility.yul\":2349:2380   */\n      tag_196\n        /* \"#utility.yul\":2374:2379   */\n      dup2\n        /* \"#utility.yul\":2349:2380   */\n      tag_353\n      jump\t// in\n        /* \"#utility.yul\":2415:2823   */\n    tag_40:\n        /* \"#utility.yul\":2503:2509   */\n      0x00\n        /* \"#utility.yul\":2511:2517   */\n      dup1\n        /* \"#utility.yul\":2564:2566   */\n      0x40\n        /* \"#utility.yul\":2552:2561   */\n      dup4\n        /* \"#utility.yul\":2543:2550   */\n      dup6\n        /* \"#utility.yul\":2539:2562   */\n      sub\n        /* \"#utility.yul\":2535:2567   */\n      slt\n        /* \"#utility.yul\":2532:2584   */\n      iszero\n      tag_380\n      jumpi\n        /* \"#utility.yul\":2580:2581   */\n      0x00\n        /* \"#utility.yul\":2577:2578   */\n      dup1\n        /* \"#utility.yul\":2570:2582   */\n      revert\n        /* \"#utility.yul\":2532:2584   */\n    tag_380:\n        /* \"#utility.yul\":2619:2628   */\n      dup3\n        /* \"#utility.yul\":2606:2629   */\n      calldataload\n        /* \"#utility.yul\":2638:2669   */\n      tag_381\n        /* \"#utility.yul\":2663:2668   */\n      dup2\n        /* \"#utility.yul\":2638:2669   */\n      tag_353\n      jump\t// in\n    tag_381:\n        /* \"#utility.yul\":2688:2693   */\n      swap2\n      pop\n        /* \"#utility.yul\":2745:2747   */\n      0x20\n        /* \"#utility.yul\":2730:2748   */\n      dup4\n      add\n        /* \"#utility.yul\":2717:2749   */\n      calldataload\n        /* \"#utility.yul\":2758:2791   */\n      tag_382\n        /* \"#utility.yul\":2717:2749   */\n      dup2\n        /* \"#utility.yul\":2758:2791   */\n      tag_353\n      jump\t// in\n    tag_382:\n        /* \"#utility.yul\":2810:2817   */\n      dup1\n        /* \"#utility.yul\":2800:2817   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2415:2823   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2828:3151   */\n    tag_47:\n        /* \"#utility.yul\":2904:2910   */\n      0x00\n        /* \"#utility.yul\":2912:2918   */\n      dup1\n        /* \"#utility.yul\":2965:2967   */\n      0x40\n        /* \"#utility.yul\":2953:2962   */\n      dup4\n        /* \"#utility.yul\":2944:2951   */\n      dup6\n        /* \"#utility.yul\":2940:2963   */\n      sub\n        /* \"#utility.yul\":2936:2968   */\n      slt\n        /* \"#utility.yul\":2933:2985   */\n      iszero\n      tag_384\n      jumpi\n        /* \"#utility.yul\":2981:2982   */\n      0x00\n        /* \"#utility.yul\":2978:2979   */\n      dup1\n        /* \"#utility.yul\":2971:2983   */\n      revert\n        /* \"#utility.yul\":2933:2985   */\n    tag_384:\n        /* \"#utility.yul\":3020:3029   */\n      dup3\n        /* \"#utility.yul\":3007:3030   */\n      calldataload\n        /* \"#utility.yul\":3039:3070   */\n      tag_385\n        /* \"#utility.yul\":3064:3069   */\n      dup2\n        /* \"#utility.yul\":3039:3070   */\n      tag_353\n      jump\t// in\n    tag_385:\n        /* \"#utility.yul\":3089:3094   */\n      swap5\n        /* \"#utility.yul\":3141:3143   */\n      0x20\n        /* \"#utility.yul\":3126:3144   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":3113:3145   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2828:3151   */\n      jump\t// out\n        /* \"#utility.yul\":3156:3283   */\n    tag_128:\n        /* \"#utility.yul\":3217:3227   */\n      0x4e487b71\n        /* \"#utility.yul\":3212:3215   */\n      0xe0\n        /* \"#utility.yul\":3208:3228   */\n      shl\n        /* \"#utility.yul\":3205:3206   */\n      0x00\n        /* \"#utility.yul\":3198:3229   */\n      mstore\n        /* \"#utility.yul\":3248:3252   */\n      0x41\n        /* \"#utility.yul\":3245:3246   */\n      0x04\n        /* \"#utility.yul\":3238:3253   */\n      mstore\n        /* \"#utility.yul\":3272:3276   */\n      0x24\n        /* \"#utility.yul\":3269:3270   */\n      0x00\n        /* \"#utility.yul\":3262:3277   */\n      revert\n        /* \"#utility.yul\":3288:4344   */\n    tag_51:\n        /* \"#utility.yul\":3365:3371   */\n      0x00\n        /* \"#utility.yul\":3373:3379   */\n      dup1\n        /* \"#utility.yul\":3426:3428   */\n      0x40\n        /* \"#utility.yul\":3414:3423   */\n      dup4\n        /* \"#utility.yul\":3405:3412   */\n      dup6\n        /* \"#utility.yul\":3401:3424   */\n      sub\n        /* \"#utility.yul\":3397:3429   */\n      slt\n        /* \"#utility.yul\":3394:3446   */\n      iszero\n      tag_388\n      jumpi\n        /* \"#utility.yul\":3442:3443   */\n      0x00\n        /* \"#utility.yul\":3439:3440   */\n      dup1\n        /* \"#utility.yul\":3432:3444   */\n      revert\n        /* \"#utility.yul\":3394:3446   */\n    tag_388:\n        /* \"#utility.yul\":3481:3490   */\n      dup3\n        /* \"#utility.yul\":3468:3491   */\n      calldataload\n        /* \"#utility.yul\":3500:3531   */\n      tag_389\n        /* \"#utility.yul\":3525:3530   */\n      dup2\n        /* \"#utility.yul\":3500:3531   */\n      tag_353\n      jump\t// in\n    tag_389:\n        /* \"#utility.yul\":3550:3555   */\n      swap2\n      pop\n        /* \"#utility.yul\":3606:3608   */\n      0x20\n        /* \"#utility.yul\":3591:3609   */\n      dup4\n      add\n        /* \"#utility.yul\":3578:3610   */\n      calldataload\n        /* \"#utility.yul\":3629:3647   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3659:3673   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":3656:3690   */\n      iszero\n      tag_390\n      jumpi\n        /* \"#utility.yul\":3686:3687   */\n      0x00\n        /* \"#utility.yul\":3683:3684   */\n      dup1\n        /* \"#utility.yul\":3676:3688   */\n      revert\n        /* \"#utility.yul\":3656:3690   */\n    tag_390:\n        /* \"#utility.yul\":3724:3730   */\n      dup2\n        /* \"#utility.yul\":3713:3722   */\n      dup6\n        /* \"#utility.yul\":3709:3731   */\n      add\n        /* \"#utility.yul\":3699:3731   */\n      swap2\n      pop\n        /* \"#utility.yul\":3769:3776   */\n      dup6\n        /* \"#utility.yul\":3762:3766   */\n      0x1f\n        /* \"#utility.yul\":3758:3760   */\n      dup4\n        /* \"#utility.yul\":3754:3767   */\n      add\n        /* \"#utility.yul\":3750:3777   */\n      slt\n        /* \"#utility.yul\":3740:3795   */\n      tag_391\n      jumpi\n        /* \"#utility.yul\":3791:3792   */\n      0x00\n        /* \"#utility.yul\":3788:3789   */\n      dup1\n        /* \"#utility.yul\":3781:3793   */\n      revert\n        /* \"#utility.yul\":3740:3795   */\n    tag_391:\n        /* \"#utility.yul\":3827:3829   */\n      dup2\n        /* \"#utility.yul\":3814:3830   */\n      calldataload\n        /* \"#utility.yul\":3849:3851   */\n      dup2\n        /* \"#utility.yul\":3845:3847   */\n      dup2\n        /* \"#utility.yul\":3842:3852   */\n      gt\n        /* \"#utility.yul\":3839:3875   */\n      iszero\n      tag_393\n      jumpi\n        /* \"#utility.yul\":3855:3873   */\n      tag_393\n      tag_128\n      jump\t// in\n    tag_393:\n        /* \"#utility.yul\":3930:3932   */\n      0x40\n        /* \"#utility.yul\":3924:3933   */\n      mload\n        /* \"#utility.yul\":3898:3900   */\n      0x1f\n        /* \"#utility.yul\":3984:3997   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":3980:4002   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":4004:4006   */\n      0x3f\n        /* \"#utility.yul\":3976:4007   */\n      add\n        /* \"#utility.yul\":3972:4012   */\n      and\n        /* \"#utility.yul\":3960:4013   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":4028:4046   */\n      dup4\n      dup3\n      gt\n        /* \"#utility.yul\":4048:4070   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":4025:4071   */\n      or\n        /* \"#utility.yul\":4022:4094   */\n      iszero\n      tag_395\n      jumpi\n        /* \"#utility.yul\":4074:4092   */\n      tag_395\n      tag_128\n      jump\t// in\n    tag_395:\n        /* \"#utility.yul\":4114:4124   */\n      dup2\n        /* \"#utility.yul\":4110:4112   */\n      0x40\n        /* \"#utility.yul\":4103:4125   */\n      mstore\n        /* \"#utility.yul\":4149:4151   */\n      dup3\n        /* \"#utility.yul\":4141:4147   */\n      dup2\n        /* \"#utility.yul\":4134:4152   */\n      mstore\n        /* \"#utility.yul\":4189:4196   */\n      dup9\n        /* \"#utility.yul\":4184:4186   */\n      0x20\n        /* \"#utility.yul\":4179:4181   */\n      dup5\n        /* \"#utility.yul\":4175:4177   */\n      dup8\n        /* \"#utility.yul\":4171:4182   */\n      add\n        /* \"#utility.yul\":4167:4187   */\n      add\n        /* \"#utility.yul\":4164:4197   */\n      gt\n        /* \"#utility.yul\":4161:4214   */\n      iszero\n      tag_396\n      jumpi\n        /* \"#utility.yul\":4210:4211   */\n      0x00\n        /* \"#utility.yul\":4207:4208   */\n      dup1\n        /* \"#utility.yul\":4200:4212   */\n      revert\n        /* \"#utility.yul\":4161:4214   */\n    tag_396:\n        /* \"#utility.yul\":4266:4268   */\n      dup3\n        /* \"#utility.yul\":4261:4263   */\n      0x20\n        /* \"#utility.yul\":4257:4259   */\n      dup7\n        /* \"#utility.yul\":4253:4264   */\n      add\n        /* \"#utility.yul\":4248:4250   */\n      0x20\n        /* \"#utility.yul\":4240:4246   */\n      dup4\n        /* \"#utility.yul\":4236:4251   */\n      add\n        /* \"#utility.yul\":4223:4269   */\n      calldatacopy\n        /* \"#utility.yul\":4311:4312   */\n      0x00\n        /* \"#utility.yul\":4306:4308   */\n      0x20\n        /* \"#utility.yul\":4301:4303   */\n      dup5\n        /* \"#utility.yul\":4293:4299   */\n      dup4\n        /* \"#utility.yul\":4289:4304   */\n      add\n        /* \"#utility.yul\":4285:4309   */\n      add\n        /* \"#utility.yul\":4278:4313   */\n      mstore\n        /* \"#utility.yul\":4332:4338   */\n      dup1\n        /* \"#utility.yul\":4322:4338   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3288:4344   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4967:5761   */\n    tag_75:\n        /* \"#utility.yul\":5055:5061   */\n      0x00\n        /* \"#utility.yul\":5063:5069   */\n      dup1\n        /* \"#utility.yul\":5071:5077   */\n      0x00\n        /* \"#utility.yul\":5079:5085   */\n      dup1\n        /* \"#utility.yul\":5132:5134   */\n      0x60\n        /* \"#utility.yul\":5120:5129   */\n      dup6\n        /* \"#utility.yul\":5111:5118   */\n      dup8\n        /* \"#utility.yul\":5107:5130   */\n      sub\n        /* \"#utility.yul\":5103:5135   */\n      slt\n        /* \"#utility.yul\":5100:5152   */\n      iszero\n      tag_401\n      jumpi\n        /* \"#utility.yul\":5148:5149   */\n      0x00\n        /* \"#utility.yul\":5145:5146   */\n      dup1\n        /* \"#utility.yul\":5138:5150   */\n      revert\n        /* \"#utility.yul\":5100:5152   */\n    tag_401:\n        /* \"#utility.yul\":5187:5196   */\n      dup5\n        /* \"#utility.yul\":5174:5197   */\n      calldataload\n        /* \"#utility.yul\":5206:5237   */\n      tag_402\n        /* \"#utility.yul\":5231:5236   */\n      dup2\n        /* \"#utility.yul\":5206:5237   */\n      tag_353\n      jump\t// in\n    tag_402:\n        /* \"#utility.yul\":5256:5261   */\n      swap4\n      pop\n        /* \"#utility.yul\":5308:5310   */\n      0x20\n        /* \"#utility.yul\":5293:5311   */\n      dup6\n      add\n        /* \"#utility.yul\":5280:5312   */\n      calldataload\n      swap3\n      pop\n        /* \"#utility.yul\":5363:5365   */\n      0x40\n        /* \"#utility.yul\":5348:5366   */\n      dup6\n      add\n        /* \"#utility.yul\":5335:5367   */\n      calldataload\n        /* \"#utility.yul\":5386:5404   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5416:5430   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":5413:5447   */\n      iszero\n      tag_403\n      jumpi\n        /* \"#utility.yul\":5443:5444   */\n      0x00\n        /* \"#utility.yul\":5440:5441   */\n      dup1\n        /* \"#utility.yul\":5433:5445   */\n      revert\n        /* \"#utility.yul\":5413:5447   */\n    tag_403:\n        /* \"#utility.yul\":5481:5487   */\n      dup2\n        /* \"#utility.yul\":5470:5479   */\n      dup8\n        /* \"#utility.yul\":5466:5488   */\n      add\n        /* \"#utility.yul\":5456:5488   */\n      swap2\n      pop\n        /* \"#utility.yul\":5526:5533   */\n      dup8\n        /* \"#utility.yul\":5519:5523   */\n      0x1f\n        /* \"#utility.yul\":5515:5517   */\n      dup4\n        /* \"#utility.yul\":5511:5524   */\n      add\n        /* \"#utility.yul\":5507:5534   */\n      slt\n        /* \"#utility.yul\":5497:5552   */\n      tag_404\n      jumpi\n        /* \"#utility.yul\":5548:5549   */\n      0x00\n        /* \"#utility.yul\":5545:5546   */\n      dup1\n        /* \"#utility.yul\":5538:5550   */\n      revert\n        /* \"#utility.yul\":5497:5552   */\n    tag_404:\n        /* \"#utility.yul\":5588:5590   */\n      dup2\n        /* \"#utility.yul\":5575:5591   */\n      calldataload\n        /* \"#utility.yul\":5614:5616   */\n      dup2\n        /* \"#utility.yul\":5606:5612   */\n      dup2\n        /* \"#utility.yul\":5603:5617   */\n      gt\n        /* \"#utility.yul\":5600:5634   */\n      iszero\n      tag_405\n      jumpi\n        /* \"#utility.yul\":5630:5631   */\n      0x00\n        /* \"#utility.yul\":5627:5628   */\n      dup1\n        /* \"#utility.yul\":5620:5632   */\n      revert\n        /* \"#utility.yul\":5600:5634   */\n    tag_405:\n        /* \"#utility.yul\":5675:5682   */\n      dup9\n        /* \"#utility.yul\":5670:5672   */\n      0x20\n        /* \"#utility.yul\":5661:5667   */\n      dup3\n        /* \"#utility.yul\":5657:5659   */\n      dup6\n        /* \"#utility.yul\":5653:5668   */\n      add\n        /* \"#utility.yul\":5649:5673   */\n      add\n        /* \"#utility.yul\":5646:5683   */\n      gt\n        /* \"#utility.yul\":5643:5700   */\n      iszero\n      tag_406\n      jumpi\n        /* \"#utility.yul\":5696:5697   */\n      0x00\n        /* \"#utility.yul\":5693:5694   */\n      dup1\n        /* \"#utility.yul\":5686:5698   */\n      revert\n        /* \"#utility.yul\":5643:5700   */\n    tag_406:\n        /* \"#utility.yul\":4967:5761   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n      pop\n        /* \"#utility.yul\":5727:5729   */\n      0x20\n        /* \"#utility.yul\":5719:5730   */\n      add\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":4967:5761   */\n      jump\t// out\n        /* \"#utility.yul\":5766:6287   */\n    tag_87:\n        /* \"#utility.yul\":5843:5847   */\n      0x00\n        /* \"#utility.yul\":5849:5855   */\n      dup1\n        /* \"#utility.yul\":5909:5920   */\n      dup4\n        /* \"#utility.yul\":5896:5921   */\n      calldataload\n        /* \"#utility.yul\":6003:6005   */\n      0x1e\n        /* \"#utility.yul\":5999:6006   */\n      not\n        /* \"#utility.yul\":5988:5996   */\n      dup5\n        /* \"#utility.yul\":5972:5986   */\n      calldatasize\n        /* \"#utility.yul\":5968:5997   */\n      sub\n        /* \"#utility.yul\":5964:6007   */\n      add\n        /* \"#utility.yul\":5944:5962   */\n      dup2\n        /* \"#utility.yul\":5940:6008   */\n      slt\n        /* \"#utility.yul\":5930:6026   */\n      tag_408\n      jumpi\n        /* \"#utility.yul\":6022:6023   */\n      0x00\n        /* \"#utility.yul\":6019:6020   */\n      dup1\n        /* \"#utility.yul\":6012:6024   */\n      revert\n        /* \"#utility.yul\":5930:6026   */\n    tag_408:\n        /* \"#utility.yul\":6049:6082   */\n      dup4\n      add\n        /* \"#utility.yul\":6101:6121   */\n      dup1\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":6144:6162   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":6133:6163   */\n      dup3\n      gt\n        /* \"#utility.yul\":6130:6180   */\n      iszero\n      tag_409\n      jumpi\n        /* \"#utility.yul\":6176:6177   */\n      0x00\n        /* \"#utility.yul\":6173:6174   */\n      dup1\n        /* \"#utility.yul\":6166:6178   */\n      revert\n        /* \"#utility.yul\":6130:6180   */\n    tag_409:\n        /* \"#utility.yul\":6209:6213   */\n      0x20\n        /* \"#utility.yul\":6197:6214   */\n      add\n      swap2\n      pop\n        /* \"#utility.yul\":6240:6254   */\n      calldatasize\n        /* \"#utility.yul\":6236:6263   */\n      dup2\n      swap1\n      sub\n        /* \"#utility.yul\":6226:6264   */\n      dup3\n      sgt\n        /* \"#utility.yul\":6223:6281   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":6277:6278   */\n      0x00\n        /* \"#utility.yul\":6274:6275   */\n      dup1\n        /* \"#utility.yul\":6267:6279   */\n      revert\n        /* \"#utility.yul\":6640:6767   */\n    tag_105:\n        /* \"#utility.yul\":6701:6711   */\n      0x4e487b71\n        /* \"#utility.yul\":6696:6699   */\n      0xe0\n        /* \"#utility.yul\":6692:6712   */\n      shl\n        /* \"#utility.yul\":6689:6690   */\n      0x00\n        /* \"#utility.yul\":6682:6713   */\n      mstore\n        /* \"#utility.yul\":6732:6736   */\n      0x32\n        /* \"#utility.yul\":6729:6730   */\n      0x04\n        /* \"#utility.yul\":6722:6737   */\n      mstore\n        /* \"#utility.yul\":6756:6760   */\n      0x24\n        /* \"#utility.yul\":6753:6754   */\n      0x00\n        /* \"#utility.yul\":6746:6761   */\n      revert\n        /* \"#utility.yul\":6772:6899   */\n    tag_355:\n        /* \"#utility.yul\":6833:6843   */\n      0x4e487b71\n        /* \"#utility.yul\":6828:6831   */\n      0xe0\n        /* \"#utility.yul\":6824:6844   */\n      shl\n        /* \"#utility.yul\":6821:6822   */\n      0x00\n        /* \"#utility.yul\":6814:6845   */\n      mstore\n        /* \"#utility.yul\":6864:6868   */\n      0x11\n        /* \"#utility.yul\":6861:6862   */\n      0x04\n        /* \"#utility.yul\":6854:6869   */\n      mstore\n        /* \"#utility.yul\":6888:6892   */\n      0x24\n        /* \"#utility.yul\":6885:6886   */\n      0x00\n        /* \"#utility.yul\":6878:6893   */\n      revert\n        /* \"#utility.yul\":6904:7039   */\n    tag_112:\n        /* \"#utility.yul\":6943:6946   */\n      0x00\n        /* \"#utility.yul\":6964:6981   */\n      0x01\n      dup3\n      add\n        /* \"#utility.yul\":6961:7004   */\n      tag_416\n      jumpi\n        /* \"#utility.yul\":6984:7002   */\n      tag_416\n      tag_355\n      jump\t// in\n    tag_416:\n      pop\n        /* \"#utility.yul\":7031:7032   */\n      0x01\n        /* \"#utility.yul\":7020:7033   */\n      add\n      swap1\n        /* \"#utility.yul\":6904:7039   */\n      jump\t// out\n        /* \"#utility.yul\":7044:7452   */\n    tag_116:\n        /* \"#utility.yul\":7246:7248   */\n      0x20\n        /* \"#utility.yul\":7228:7249   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7285:7287   */\n      0x2c\n        /* \"#utility.yul\":7265:7283   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7258:7288   */\n      mstore\n        /* \"#utility.yul\":7324:7358   */\n      0x46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820\n        /* \"#utility.yul\":7319:7321   */\n      0x40\n        /* \"#utility.yul\":7304:7322   */\n      dup3\n      add\n        /* \"#utility.yul\":7297:7359   */\n      mstore\n      shl(0xa2, 0x19195b1959d85d1958d85b1b)\n        /* \"#utility.yul\":7390:7392   */\n      0x60\n        /* \"#utility.yul\":7375:7393   */\n      dup3\n      add\n        /* \"#utility.yul\":7368:7410   */\n      mstore\n        /* \"#utility.yul\":7442:7445   */\n      0x80\n        /* \"#utility.yul\":7427:7446   */\n      add\n      swap1\n        /* \"#utility.yul\":7044:7452   */\n      jump\t// out\n        /* \"#utility.yul\":7457:7865   */\n    tag_121:\n        /* \"#utility.yul\":7659:7661   */\n      0x20\n        /* \"#utility.yul\":7641:7662   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7698:7700   */\n      0x2c\n        /* \"#utility.yul\":7678:7696   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7671:7701   */\n      mstore\n        /* \"#utility.yul\":7737:7771   */\n      0x46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820\n        /* \"#utility.yul\":7732:7734   */\n      0x40\n        /* \"#utility.yul\":7717:7735   */\n      dup3\n      add\n        /* \"#utility.yul\":7710:7772   */\n      mstore\n      shl(0xa0, 0x6163746976652070726f7879)\n        /* \"#utility.yul\":7803:7805   */\n      0x60\n        /* \"#utility.yul\":7788:7806   */\n      dup3\n      add\n        /* \"#utility.yul\":7781:7823   */\n      mstore\n        /* \"#utility.yul\":7855:7858   */\n      0x80\n        /* \"#utility.yul\":7840:7859   */\n      add\n      swap1\n        /* \"#utility.yul\":7457:7865   */\n      jump\t// out\n        /* \"#utility.yul\":9414:9598   */\n    tag_190:\n        /* \"#utility.yul\":9484:9490   */\n      0x00\n        /* \"#utility.yul\":9537:9539   */\n      0x20\n        /* \"#utility.yul\":9525:9534   */\n      dup3\n        /* \"#utility.yul\":9516:9523   */\n      dup5\n        /* \"#utility.yul\":9512:9535   */\n      sub\n        /* \"#utility.yul\":9508:9540   */\n      slt\n        /* \"#utility.yul\":9505:9557   */\n      iszero\n      tag_425\n      jumpi\n        /* \"#utility.yul\":9553:9554   */\n      0x00\n        /* \"#utility.yul\":9550:9551   */\n      dup1\n        /* \"#utility.yul\":9543:9555   */\n      revert\n        /* \"#utility.yul\":9505:9557   */\n    tag_425:\n      pop\n        /* \"#utility.yul\":9576:9592   */\n      mload\n      swap2\n        /* \"#utility.yul\":9414:9598   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9960:10177   */\n    tag_205:\n        /* \"#utility.yul\":9998:10001   */\n      0x00\n      sub(shl(0x60, 0x01), 0x01)\n        /* \"#utility.yul\":10087:10089   */\n      dup1\n        /* \"#utility.yul\":10080:10085   */\n      dup4\n        /* \"#utility.yul\":10076:10090   */\n      and\n        /* \"#utility.yul\":10114:10116   */\n      dup2\n        /* \"#utility.yul\":10105:10112   */\n      dup2\n        /* \"#utility.yul\":10102:10117   */\n      sub\n        /* \"#utility.yul\":10099:10140   */\n      tag_429\n      jumpi\n        /* \"#utility.yul\":10120:10138   */\n      tag_429\n      tag_355\n      jump\t// in\n    tag_429:\n        /* \"#utility.yul\":10169:10170   */\n      0x01\n        /* \"#utility.yul\":10156:10171   */\n      add\n      swap4\n        /* \"#utility.yul\":9960:10177   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10894:11144   */\n    tag_356:\n        /* \"#utility.yul\":10979:10980   */\n      0x00\n        /* \"#utility.yul\":10989:11102   */\n    tag_433:\n        /* \"#utility.yul\":11003:11009   */\n      dup4\n        /* \"#utility.yul\":11000:11001   */\n      dup2\n        /* \"#utility.yul\":10997:11010   */\n      lt\n        /* \"#utility.yul\":10989:11102   */\n      iszero\n      tag_435\n      jumpi\n        /* \"#utility.yul\":11079:11090   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":11073:11091   */\n      mload\n        /* \"#utility.yul\":11060:11071   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":11053:11092   */\n      mstore\n        /* \"#utility.yul\":11025:11027   */\n      0x20\n        /* \"#utility.yul\":11018:11028   */\n      add\n        /* \"#utility.yul\":10989:11102   */\n      jump(tag_433)\n    tag_435:\n      pop\n      pop\n        /* \"#utility.yul\":11136:11137   */\n      0x00\n        /* \"#utility.yul\":11118:11134   */\n      swap2\n      add\n        /* \"#utility.yul\":11111:11138   */\n      mstore\n        /* \"#utility.yul\":10894:11144   */\n      jump\t// out\n        /* \"#utility.yul\":11149:11436   */\n    tag_223:\n        /* \"#utility.yul\":11278:11281   */\n      0x00\n        /* \"#utility.yul\":11316:11322   */\n      dup3\n        /* \"#utility.yul\":11310:11323   */\n      mload\n        /* \"#utility.yul\":11332:11398   */\n      tag_437\n        /* \"#utility.yul\":11391:11397   */\n      dup2\n        /* \"#utility.yul\":11386:11389   */\n      dup5\n        /* \"#utility.yul\":11379:11383   */\n      0x20\n        /* \"#utility.yul\":11371:11377   */\n      dup8\n        /* \"#utility.yul\":11367:11384   */\n      add\n        /* \"#utility.yul\":11332:11398   */\n      tag_356\n      jump\t// in\n    tag_437:\n        /* \"#utility.yul\":11414:11430   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":11149:11436   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13208:13335   */\n    tag_291:\n        /* \"#utility.yul\":13269:13279   */\n      0x4e487b71\n        /* \"#utility.yul\":13264:13267   */\n      0xe0\n        /* \"#utility.yul\":13260:13280   */\n      shl\n        /* \"#utility.yul\":13257:13258   */\n      0x00\n        /* \"#utility.yul\":13250:13281   */\n      mstore\n        /* \"#utility.yul\":13300:13304   */\n      0x21\n        /* \"#utility.yul\":13297:13298   */\n      0x04\n        /* \"#utility.yul\":13290:13305   */\n      mstore\n        /* \"#utility.yul\":13324:13328   */\n      0x24\n        /* \"#utility.yul\":13321:13322   */\n      0x00\n        /* \"#utility.yul\":13314:13329   */\n      revert\n        /* \"#utility.yul\":15217:15613   */\n    tag_352:\n        /* \"#utility.yul\":15366:15368   */\n      0x20\n        /* \"#utility.yul\":15355:15364   */\n      dup2\n        /* \"#utility.yul\":15348:15369   */\n      mstore\n        /* \"#utility.yul\":15329:15333   */\n      0x00\n        /* \"#utility.yul\":15398:15404   */\n      dup3\n        /* \"#utility.yul\":15392:15405   */\n      mload\n        /* \"#utility.yul\":15441:15447   */\n      dup1\n        /* \"#utility.yul\":15436:15438   */\n      0x20\n        /* \"#utility.yul\":15425:15434   */\n      dup5\n        /* \"#utility.yul\":15421:15439   */\n      add\n        /* \"#utility.yul\":15414:15448   */\n      mstore\n        /* \"#utility.yul\":15457:15536   */\n      tag_451\n        /* \"#utility.yul\":15529:15535   */\n      dup2\n        /* \"#utility.yul\":15524:15526   */\n      0x40\n        /* \"#utility.yul\":15513:15522   */\n      dup6\n        /* \"#utility.yul\":15509:15527   */\n      add\n        /* \"#utility.yul\":15504:15506   */\n      0x20\n        /* \"#utility.yul\":15496:15502   */\n      dup8\n        /* \"#utility.yul\":15492:15507   */\n      add\n        /* \"#utility.yul\":15457:15536   */\n      tag_356\n      jump\t// in\n    tag_451:\n        /* \"#utility.yul\":15597:15599   */\n      0x1f\n        /* \"#utility.yul\":15576:15591   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":15572:15601   */\n      and\n        /* \"#utility.yul\":15557:15602   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":15604:15606   */\n      0x40\n        /* \"#utility.yul\":15553:15607   */\n      add\n      swap3\n        /* \"#utility.yul\":15217:15613   */\n      swap2\n      pop\n      pop\n      jump\t// out\n    stop\n    data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d 360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n    data_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398 416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564\n\n    auxdata: 0xa26469706673582212205bbbca6dc477817fca3ad86f4a99ec370a0d53a12f9258e93656372a7c1db3a264736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_2878": {
									"entryPoint": null,
									"id": 2878,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_contract$_IEntryPoint_$3424_fromMemory": {
									"entryPoint": 88,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:326:19",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:19",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "115:209:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "161:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "170:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "173:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "163:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "163:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "163:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "136:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "145:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "132:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "132:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "157:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "128:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "128:32:19"
															},
															"nodeType": "YulIf",
															"src": "125:52:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "186:29:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "205:9:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "199:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "199:16:19"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "190:5:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "278:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "287:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "290:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "280:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "280:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "280:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "237:5:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "248:5:19"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "263:3:19",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "268:1:19",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "259:3:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "259:11:19"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "272:1:19",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "255:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "255:19:19"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "244:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "244:31:19"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "234:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "234:42:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "227:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "227:50:19"
															},
															"nodeType": "YulIf",
															"src": "224:70:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "303:15:19",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "313:5:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "303:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IEntryPoint_$3424_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "81:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "92:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "104:6:19",
														"type": ""
													}
												],
												"src": "14:310:19"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_IEntryPoint_$3424_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
									"id": 19,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60a06040523060805234801561001457600080fd5b506040516118bb3803806118bb83398101604081905261003391610058565b600280546001600160a01b0319166001600160a01b0392909216919091179055610088565b60006020828403121561006a57600080fd5b81516001600160a01b038116811461008157600080fd5b9392505050565b6080516117fc6100bf600039600081816103b7015281816103f701528181610698015281816106d8015261076b01526117fc6000f3fe6080604052600436106100c65760003560e01c80634f1ef2861161007f578063affed0e011610059578063affed0e0146101ef578063b0d691fe14610213578063b61d27f614610231578063c399ec881461025157600080fd5b80634f1ef2861461018f57806352d1902d146101a25780638da5cb5b146101b757600080fd5b80630825d1fc146100d257806318dfb3c7146101055780633659cfe614610127578063485cc955146101475780634a58db19146101675780634d44560d1461016f57600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506100f26100ed366004611296565b610266565b6040519081526020015b60405180910390f35b34801561011157600080fd5b50610125610120366004611342565b6102ad565b005b34801561013357600080fd5b506101256101423660046113ae565b6103ad565b34801561015357600080fd5b506101256101623660046113cb565b61048c565b6101256105a1565b34801561017b57600080fd5b5061012561018a366004611404565b610612565b61012561019d366004611446565b61068e565b3480156101ae57600080fd5b506100f261075e565b3480156101c357600080fd5b506001546101d7906001600160a01b031681565b6040516001600160a01b0390911681526020016100fc565b3480156101fb57600080fd5b506000546201000090046001600160601b03166100f2565b34801561021f57600080fd5b506002546001600160a01b03166101d7565b34801561023d57600080fd5b5061012561024c36600461150a565b610811565b34801561025d57600080fd5b506100f2610860565b60006102706108e3565b61027b85858561093f565b905061028a6040860186611593565b905060000361029c5761029c856109e8565b6102a582610a81565b949350505050565b6102b5610ace565b8281146102ff5760405162461bcd60e51b815260206004820152601360248201527277726f6e67206172726179206c656e6774687360681b60448201526064015b60405180910390fd5b60005b838110156103a65761039485858381811061031f5761031f6115da565b905060200201602081019061033491906113ae565b6000858585818110610348576103486115da565b905060200281019061035a9190611593565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b3d92505050565b8061039e81611606565b915050610302565b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103f55760405162461bcd60e51b81526004016102f69061161f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661043e600080516020611780833981519152546001600160a01b031690565b6001600160a01b0316146104645760405162461bcd60e51b81526004016102f69061166b565b61046d81610bad565b6040805160008082526020820190925261048991839190610bb5565b50565b600054610100900460ff16158080156104ac5750600054600160ff909116105b806104c65750303b1580156104c6575060005460ff166001145b6105295760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102f6565b6000805460ff19166001179055801561054c576000805461ff0019166101001790555b6105568383610d20565b801561059c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60006105b56002546001600160a01b031690565b6001600160a01b03163460405160006040518083038185875af1925050503d80600081146105ff576040519150601f19603f3d011682016040523d82523d6000602084013e610604565b606091505b505090508061048957600080fd5b61061a610d7d565b6002546001600160a01b031660405163040b850f60e31b81526001600160a01b03848116600483015260248201849052919091169063205c287890604401600060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106d65760405162461bcd60e51b81526004016102f69061161f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661071f600080516020611780833981519152546001600160a01b031690565b6001600160a01b0316146107455760405162461bcd60e51b81526004016102f69061166b565b61074e82610bad565b61075a82826001610bb5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107fe5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016102f6565b5060008051602061178083398151915290565b610819610ace565b61085a848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b3d92505050565b50505050565b60006108746002546001600160a01b031690565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156108ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de91906116b7565b905090565b6002546001600160a01b0316331461093d5760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016102f6565b565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c839052603c81206109bc61097f610140870187611593565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508593925050610dce9050565b6001546001600160a01b039081169116146109db5760019150506109e1565b60009150505b9392505050565b60008054602083013591620100009091046001600160601b0316906002610a0e836116d0565b91906101000a8154816001600160601b0302191690836001600160601b031602179055506001600160601b0316146104895760405162461bcd60e51b81526020600482015260166024820152756163636f756e743a20696e76616c6964206e6f6e636560501b60448201526064016102f6565b801561048957604051600090339060001990849084818181858888f193505050503d80600081146103a6576040519150601f19603f3d011682016040523d82523d6000602084013e6103a6565b6002546001600160a01b0316331480610af157506001546001600160a01b031633145b61093d5760405162461bcd60e51b815260206004820181905260248201527f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e7460448201526064016102f6565b600080846001600160a01b03168484604051610b59919061171a565b60006040518083038185875af1925050503d8060008114610b96576040519150601f19603f3d011682016040523d82523d6000602084013e610b9b565b606091505b5091509150816103a657805160208201fd5b610489610d7d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610be85761059c83610df2565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610c42575060408051601f3d908101601f19168201909252610c3f918101906116b7565b60015b610ca55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016102f6565b6000805160206117808339815191528114610d145760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016102f6565b5061059c838383610e8e565b600180546001600160a01b038085166001600160a01b03199283168117909355600280549185169190921681179091556040517f47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de90600090a35050565b6001546001600160a01b0316331480610d9557503330145b61093d5760405162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b60448201526064016102f6565b6000806000610ddd8585610eb3565b91509150610dea81610ef8565b509392505050565b6001600160a01b0381163b610e5f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f6565b60008051602061178083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610e9783611042565b600082511180610ea45750805b1561059c5761085a8383611082565b6000808251604103610ee95760208301516040840151606085015160001a610edd878285856110a7565b94509450505050610ef1565b506000905060025b9250929050565b6000816004811115610f0c57610f0c611736565b03610f145750565b6001816004811115610f2857610f28611736565b03610f755760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102f6565b6002816004811115610f8957610f89611736565b03610fd65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102f6565b6003816004811115610fea57610fea611736565b036104895760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102f6565b61104b81610df2565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606109e183836040518060600160405280602781526020016117a06027913961116b565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156110de5750600090506003611162565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611132573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661115b57600060019250925050611162565b9150600090505b94509492505050565b6060600080856001600160a01b031685604051611188919061171a565b600060405180830381855af49150503d80600081146111c3576040519150601f19603f3d011682016040523d82523d6000602084013e6111c8565b606091505b50915091506111d9868383876111e3565b9695505050505050565b6060831561125257825160000361124b576001600160a01b0385163b61124b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f6565b50816102a5565b6102a583838151156112675781518083602001fd5b8060405162461bcd60e51b81526004016102f6919061174c565b6001600160a01b038116811461048957600080fd5b600080600080608085870312156112ac57600080fd5b843567ffffffffffffffff8111156112c357600080fd5b850161016081880312156112d657600080fd5b93506020850135925060408501356112ed81611281565b9396929550929360600135925050565b60008083601f84011261130f57600080fd5b50813567ffffffffffffffff81111561132757600080fd5b6020830191508360208260051b8501011115610ef157600080fd5b6000806000806040858703121561135857600080fd5b843567ffffffffffffffff8082111561137057600080fd5b61137c888389016112fd565b9096509450602087013591508082111561139557600080fd5b506113a2878288016112fd565b95989497509550505050565b6000602082840312156113c057600080fd5b81356109e181611281565b600080604083850312156113de57600080fd5b82356113e981611281565b915060208301356113f981611281565b809150509250929050565b6000806040838503121561141757600080fd5b823561142281611281565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561145957600080fd5b823561146481611281565b9150602083013567ffffffffffffffff8082111561148157600080fd5b818501915085601f83011261149557600080fd5b8135818111156114a7576114a7611430565b604051601f8201601f19908116603f011681019083821181831017156114cf576114cf611430565b816040528281528860208487010111156114e857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806060858703121561152057600080fd5b843561152b81611281565b935060208501359250604085013567ffffffffffffffff8082111561154f57600080fd5b818701915087601f83011261156357600080fd5b81358181111561157257600080fd5b88602082850101111561158457600080fd5b95989497505060200194505050565b6000808335601e198436030181126115aa57600080fd5b83018035915067ffffffffffffffff8211156115c557600080fd5b602001915036819003821315610ef157600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611618576116186115f0565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000602082840312156116c957600080fd5b5051919050565b60006001600160601b038083168181036116ec576116ec6115f0565b6001019392505050565b60005b838110156117115781810151838201526020016116f9565b50506000910152565b6000825161172c8184602087016116f6565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b602081526000825180602084015261176b8160408501602087016116f6565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205bbbca6dc477817fca3ad86f4a99ec370a0d53a12f9258e93656372a7c1db3a264736f6c63430008120033",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x18BB CODESIZE SUB DUP1 PUSH2 0x18BB DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x33 SWAP2 PUSH2 0x58 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x88 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x17FC PUSH2 0xBF PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x3B7 ADD MSTORE DUP2 DUP2 PUSH2 0x3F7 ADD MSTORE DUP2 DUP2 PUSH2 0x698 ADD MSTORE DUP2 DUP2 PUSH2 0x6D8 ADD MSTORE PUSH2 0x76B ADD MSTORE PUSH2 0x17FC PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4F1EF286 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xAFFED0E0 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xB0D691FE EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0xB61D27F6 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0xC399EC88 EQ PUSH2 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x825D1FC EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0x18DFB3C7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x485CC955 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x4A58DB19 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x4D44560D EQ PUSH2 0x16F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0xCD JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0xED CALLDATASIZE PUSH1 0x4 PUSH2 0x1296 JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0x1342 JUMP JUMPDEST PUSH2 0x2AD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0x13AE JUMP JUMPDEST PUSH2 0x3AD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125 PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0x13CB JUMP JUMPDEST PUSH2 0x48C JUMP JUMPDEST PUSH2 0x125 PUSH2 0x5A1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125 PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x1404 JUMP JUMPDEST PUSH2 0x612 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0x1446 JUMP JUMPDEST PUSH2 0x68E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x75E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x1D7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0xF2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125 PUSH2 0x24C CALLDATASIZE PUSH1 0x4 PUSH2 0x150A JUMP JUMPDEST PUSH2 0x811 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x860 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x270 PUSH2 0x8E3 JUMP JUMPDEST PUSH2 0x27B DUP6 DUP6 DUP6 PUSH2 0x93F JUMP JUMPDEST SWAP1 POP PUSH2 0x28A PUSH1 0x40 DUP7 ADD DUP7 PUSH2 0x1593 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SUB PUSH2 0x29C JUMPI PUSH2 0x29C DUP6 PUSH2 0x9E8 JUMP JUMPDEST PUSH2 0x2A5 DUP3 PUSH2 0xA81 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2B5 PUSH2 0xACE JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x2FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x77726F6E67206172726179206C656E67746873 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3A6 JUMPI PUSH2 0x394 DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x31F JUMPI PUSH2 0x31F PUSH2 0x15DA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x334 SWAP2 SWAP1 PUSH2 0x13AE JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x348 JUMPI PUSH2 0x348 PUSH2 0x15DA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x35A SWAP2 SWAP1 PUSH2 0x1593 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xB3D SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x39E DUP2 PUSH2 0x1606 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x302 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x3F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F6 SWAP1 PUSH2 0x161F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x43E PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1780 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x464 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F6 SWAP1 PUSH2 0x166B JUMP JUMPDEST PUSH2 0x46D DUP2 PUSH2 0xBAD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x489 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0xBB5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x4AC JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x4C6 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C6 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x529 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x556 DUP4 DUP4 PUSH2 0xD20 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x59C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B5 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x604 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x61A PUSH2 0xD7D JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD PUSH4 0x40B850F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x205C2878 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x672 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x686 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x6D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F6 SWAP1 PUSH2 0x161F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x71F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1780 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x745 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F6 SWAP1 PUSH2 0x166B JUMP JUMPDEST PUSH2 0x74E DUP3 PUSH2 0xBAD JUMP JUMPDEST PUSH2 0x75A DUP3 DUP3 PUSH1 0x1 PUSH2 0xBB5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x7FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F6 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1780 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x819 PUSH2 0xACE JUMP JUMPDEST PUSH2 0x85A DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xB3D SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x874 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8DE SWAP2 SWAP1 PUSH2 0x16B7 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x93D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6163636F756E743A206E6F742066726F6D20456E747279506F696E7400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C DUP4 SWAP1 MSTORE PUSH1 0x3C DUP2 KECCAK256 PUSH2 0x9BC PUSH2 0x97F PUSH2 0x140 DUP8 ADD DUP8 PUSH2 0x1593 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP6 SWAP4 SWAP3 POP POP PUSH2 0xDCE SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x9DB JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP2 PUSH3 0x10000 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 PUSH1 0x2 PUSH2 0xA0E DUP4 PUSH2 0x16D0 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND EQ PUSH2 0x489 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x6163636F756E743A20696E76616C6964206E6F6E6365 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x489 JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH1 0x0 NOT SWAP1 DUP5 SWAP1 DUP5 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3A6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3A6 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xAF1 JUMPI POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x93D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6163636F756E743A206E6F74204F776E6572206F7220456E747279506F696E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xB59 SWAP2 SWAP1 PUSH2 0x171A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB96 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB9B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x3A6 JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH2 0x489 PUSH2 0xD7D JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xBE8 JUMPI PUSH2 0x59C DUP4 PUSH2 0xDF2 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xC42 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xC3F SWAP2 DUP2 ADD SWAP1 PUSH2 0x16B7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xCA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1780 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0xD14 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F6 JUMP JUMPDEST POP PUSH2 0x59C DUP4 DUP4 DUP4 PUSH2 0xE8E JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP2 DUP6 AND SWAP2 SWAP1 SWAP3 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x47E55C76E7A6F1FD8996A1DA8008C1EA29699CCA35E7BCD057F2DEC313B6E5DE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xD95 JUMPI POP CALLER ADDRESS EQ JUMPDEST PUSH2 0x93D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x37B7363C9037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xDDD DUP6 DUP6 PUSH2 0xEB3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xDEA DUP2 PUSH2 0xEF8 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0xE5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1780 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xE97 DUP4 PUSH2 0x1042 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0xEA4 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x59C JUMPI PUSH2 0x85A DUP4 DUP4 PUSH2 0x1082 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0xEE9 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0xEDD DUP8 DUP3 DUP6 DUP6 PUSH2 0x10A7 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xEF1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xF0C JUMPI PUSH2 0xF0C PUSH2 0x1736 JUMP JUMPDEST SUB PUSH2 0xF14 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xF28 JUMPI PUSH2 0xF28 PUSH2 0x1736 JUMP JUMPDEST SUB PUSH2 0xF75 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xF89 JUMPI PUSH2 0xF89 PUSH2 0x1736 JUMP JUMPDEST SUB PUSH2 0xFD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xFEA JUMPI PUSH2 0xFEA PUSH2 0x1736 JUMP JUMPDEST SUB PUSH2 0x489 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH2 0x104B DUP2 PUSH2 0xDF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9E1 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x17A0 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x116B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x10DE JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1162 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1132 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x115B JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1162 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1188 SWAP2 SWAP1 PUSH2 0x171A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x11C3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x11C8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x11D9 DUP7 DUP4 DUP4 DUP8 PUSH2 0x11E3 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1252 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x124B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x124B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST POP DUP2 PUSH2 0x2A5 JUMP JUMPDEST PUSH2 0x2A5 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1267 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F6 SWAP2 SWAP1 PUSH2 0x174C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH2 0x160 DUP2 DUP9 SUB SLT ISZERO PUSH2 0x12D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x12ED DUP2 PUSH2 0x1281 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x130F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xEF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x137C DUP9 DUP4 DUP10 ADD PUSH2 0x12FD JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1395 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13A2 DUP8 DUP3 DUP9 ADD PUSH2 0x12FD JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9E1 DUP2 PUSH2 0x1281 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x13E9 DUP2 PUSH2 0x1281 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x13F9 DUP2 PUSH2 0x1281 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1422 DUP2 PUSH2 0x1281 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1459 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1464 DUP2 PUSH2 0x1281 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x14A7 JUMPI PUSH2 0x14A7 PUSH2 0x1430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x14CF JUMPI PUSH2 0x14CF PUSH2 0x1430 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x14E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x152B DUP2 PUSH2 0x1281 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x154F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1584 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x15AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x15C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xEF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1618 JUMPI PUSH2 0x1618 PUSH2 0x15F0 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP4 AND DUP2 DUP2 SUB PUSH2 0x16EC JUMPI PUSH2 0x16EC PUSH2 0x15F0 JUMP JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1711 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16F9 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x172C DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x16F6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x176B DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x16F6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A26469706673582212205B 0xBB 0xCA PUSH14 0xC477817FCA3AD86F4A99EC370A0D MSTORE8 LOG1 0x2F SWAP3 PC 0xE9 CALLDATASIZE JUMP CALLDATACOPY 0x2A PUSH29 0x1DB3A264736F6C63430008120033000000000000000000000000000000 ",
							"sourceMap": "585:4472:13:-:0;;;1088:4:5;1045:48;;1246:81:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1294:11;:26;;-1:-1:-1;;;;;;1294:26:13;-1:-1:-1;;;;;1294:26:13;;;;;;;;;;585:4472;;14:310:19;104:6;157:2;145:9;136:7;132:23;128:32;125:52;;;173:1;170;163:12;125:52;199:16;;-1:-1:-1;;;;;244:31:19;;234:42;;224:70;;290:1;287;280:12;224:70;313:5;14:310;-1:-1:-1;;;14:310:19:o;:::-;585:4472:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_2867": {
									"entryPoint": null,
									"id": 2867,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_authorizeUpgrade_3179": {
									"entryPoint": 2989,
									"id": 3179,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_call_3109": {
									"entryPoint": 2877,
									"id": 3109,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_getImplementation_60": {
									"entryPoint": null,
									"id": 60,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_initialize_3010": {
									"entryPoint": 3360,
									"id": 3010,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_onlyOwner_2905": {
									"entryPoint": 3453,
									"id": 2905,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_payPrefund_2813": {
									"entryPoint": 2689,
									"id": 2813,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_requireFromEntryPointOrOwner_3032": {
									"entryPoint": 2766,
									"id": 3032,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requireFromEntryPoint_2760": {
									"entryPoint": 2275,
									"id": 2760,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_revert_958": {
									"entryPoint": null,
									"id": 958,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_setImplementation_84": {
									"entryPoint": 3570,
									"id": 84,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_throwError_1352": {
									"entryPoint": 3832,
									"id": 1352,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_upgradeToAndCallUUPS_182": {
									"entryPoint": 2997,
									"id": 182,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_upgradeToAndCall_129": {
									"entryPoint": 3726,
									"id": 129,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_upgradeTo_99": {
									"entryPoint": 4162,
									"id": 99,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_validateAndUpdateNonce_3050": {
									"entryPoint": 2536,
									"id": 3050,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_validateSignature_3083": {
									"entryPoint": 2367,
									"id": 3083,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@addDeposit_3148": {
									"entryPoint": 1441,
									"id": 3148,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@entryPoint_2853": {
									"entryPoint": null,
									"id": 2853,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@executeBatch_2971": {
									"entryPoint": 685,
									"id": 2971,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@execute_2925": {
									"entryPoint": 2065,
									"id": 2925,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@functionDelegateCall_846": {
									"entryPoint": 4226,
									"id": 846,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@functionDelegateCall_875": {
									"entryPoint": 4459,
									"id": 875,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getAddressSlot_991": {
									"entryPoint": null,
									"id": 991,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getBooleanSlot_1002": {
									"entryPoint": null,
									"id": 1002,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getDeposit_3125": {
									"entryPoint": 2144,
									"id": 3125,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@initialize_2988": {
									"entryPoint": 1164,
									"id": 2988,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@isContract_647": {
									"entryPoint": null,
									"id": 647,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@nonce_2843": {
									"entryPoint": null,
									"id": 2843,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_2834": {
									"entryPoint": null,
									"id": 2834,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@proxiableUUID_579": {
									"entryPoint": 1886,
									"id": 579,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@recover_1425": {
									"entryPoint": 3534,
									"id": 1425,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toEthSignedMessageHash_1609": {
									"entryPoint": null,
									"id": 1609,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tryRecover_1398": {
									"entryPoint": 3763,
									"id": 1398,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@tryRecover_1566": {
									"entryPoint": 4263,
									"id": 1566,
									"parameterSlots": 4,
									"returnSlots": 2
								},
								"@upgradeToAndCall_622": {
									"entryPoint": 1678,
									"id": 622,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@upgradeTo_601": {
									"entryPoint": 941,
									"id": 601,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@validateUserOp_2743": {
									"entryPoint": 614,
									"id": 2743,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@verifyCallResultFromTarget_914": {
									"entryPoint": 4579,
									"id": 914,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@withdrawDepositTo_3166": {
									"entryPoint": 1554,
									"id": 3166,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_array_address_dyn_calldata": {
									"entryPoint": 4861,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 5038,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_payablet_uint256": {
									"entryPoint": 5124,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_bytes_memory_ptr": {
									"entryPoint": 5190,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_contract$_IEntryPoint_$3424": {
									"entryPoint": 5067,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr": {
									"entryPoint": 5386,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr": {
									"entryPoint": 4930,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_bytes32_fromMemory": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_struct$_UserOperation_$3553_calldata_ptrt_bytes32t_addresst_uint256": {
									"entryPoint": 4758,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 5815,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 5914,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IEntryPoint_$3424__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5964,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_046f63b53432b31c38dcec6b5f05e3d65602d684f9163a89310aaaf94e08558e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_26bf1d2fa883929ce8db7f4593c3a7f27ec5e761d3beb6ef3a9db5c68fe51d21__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5663,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_470b5eb05ad46a916385e8f3d185e571bb4498eea99276dfa63667e9faf43873__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5739,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ae2932905fc5bb055d2e7b29311075afd0dbf688106cf649cb515d342f4c7367__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"access_calldata_tail_t_bytes_calldata_ptr": {
									"entryPoint": 5523,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 5878,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"increment_t_uint256": {
									"entryPoint": 5638,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint96": {
									"entryPoint": 5840,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 5616,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x21": {
									"entryPoint": 5942,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 5594,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 5168,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_address": {
									"entryPoint": 4737,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:15615:19",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:19",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:86:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "123:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "132:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "135:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "125:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "125:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "125:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "82:5:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "93:5:19"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "108:3:19",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "113:1:19",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "104:3:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "104:11:19"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "117:1:19",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "100:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "100:19:19"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "89:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "89:31:19"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "79:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "79:42:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "72:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "72:50:19"
															},
															"nodeType": "YulIf",
															"src": "69:70:19"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "48:5:19",
														"type": ""
													}
												],
												"src": "14:131:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "304:511:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "351:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "360:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "363:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "353:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "353:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "353:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "325:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "334:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "321:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "321:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "346:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "317:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "317:33:19"
															},
															"nodeType": "YulIf",
															"src": "314:53:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "376:37:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "403:9:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "390:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "390:23:19"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "380:6:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "456:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "465:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "468:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "458:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "458:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "458:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "428:6:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "436:18:19",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "425:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "425:30:19"
															},
															"nodeType": "YulIf",
															"src": "422:50:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "481:32:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "495:9:19"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "506:6:19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "491:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "491:22:19"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "485:2:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "552:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "561:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "564:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "554:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "554:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "554:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "533:7:19"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "542:2:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "529:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "529:16:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "547:3:19",
																		"type": "",
																		"value": "352"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "525:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "525:26:19"
															},
															"nodeType": "YulIf",
															"src": "522:46:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "577:12:19",
															"value": {
																"name": "_1",
																"nodeType": "YulIdentifier",
																"src": "587:2:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "577:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "598:42:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "625:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "636:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "621:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "621:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "608:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "608:32:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "598:6:19"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "649:45:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "679:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "690:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "675:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "675:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "662:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "662:32:19"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "653:5:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "728:5:19"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "703:24:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "703:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "703:31:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "743:15:19",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "753:5:19"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "743:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "767:42:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "794:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "805:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "790:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "790:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "777:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "777:32:19"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "767:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_UserOperation_$3553_calldata_ptrt_bytes32t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "246:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "257:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "269:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "277:6:19",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "285:6:19",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "293:6:19",
														"type": ""
													}
												],
												"src": "150:665:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "921:76:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "931:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "943:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "954:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "939:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "939:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "931:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "973:9:19"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "984:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "966:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "966:25:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "966:25:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "890:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "901:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "912:4:19",
														"type": ""
													}
												],
												"src": "820:177:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1086:283:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1135:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1144:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1147:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1137:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1137:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1137:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1114:6:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1122:4:19",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1110:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1110:17:19"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "1129:3:19"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "1106:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1106:27:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1099:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1099:35:19"
															},
															"nodeType": "YulIf",
															"src": "1096:55:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1160:30:19",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1183:6:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1170:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1170:20:19"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1160:6:19"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1233:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1242:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1245:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1235:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1235:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1235:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1205:6:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1213:18:19",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1202:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1202:30:19"
															},
															"nodeType": "YulIf",
															"src": "1199:50:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1258:29:19",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1274:6:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1282:4:19",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1270:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1270:17:19"
															},
															"variableNames": [
																{
																	"name": "arrayPos",
																	"nodeType": "YulIdentifier",
																	"src": "1258:8:19"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1347:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1356:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1359:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1349:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1349:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1349:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1310:6:19"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1322:1:19",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1325:6:19"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1318:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1318:14:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1306:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1306:27:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1335:4:19",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1302:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1302:38:19"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "1342:3:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1299:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1299:47:19"
															},
															"nodeType": "YulIf",
															"src": "1296:67:19"
														}
													]
												},
												"name": "abi_decode_array_address_dyn_calldata",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1049:6:19",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1057:3:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "arrayPos",
														"nodeType": "YulTypedName",
														"src": "1065:8:19",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1075:6:19",
														"type": ""
													}
												],
												"src": "1002:367:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1542:616:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1588:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1597:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1600:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1590:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1590:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1590:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1563:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1572:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1559:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1559:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1584:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1555:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1555:32:19"
															},
															"nodeType": "YulIf",
															"src": "1552:52:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1613:37:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1640:9:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1627:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1627:23:19"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1617:6:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1659:28:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1669:18:19",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1663:2:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1714:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1723:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1726:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1716:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1716:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1716:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1702:6:19"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1710:2:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1699:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1699:14:19"
															},
															"nodeType": "YulIf",
															"src": "1696:34:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1739:96:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1807:9:19"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1818:6:19"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1803:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1803:22:19"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1827:7:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_array_address_dyn_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "1765:37:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1765:70:19"
															},
															"variables": [
																{
																	"name": "value0_1",
																	"nodeType": "YulTypedName",
																	"src": "1743:8:19",
																	"type": ""
																},
																{
																	"name": "value1_1",
																	"nodeType": "YulTypedName",
																	"src": "1753:8:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1844:18:19",
															"value": {
																"name": "value0_1",
																"nodeType": "YulIdentifier",
																"src": "1854:8:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1844:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1871:18:19",
															"value": {
																"name": "value1_1",
																"nodeType": "YulIdentifier",
																"src": "1881:8:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1871:6:19"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1898:48:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1931:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1942:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1927:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1927:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1914:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1914:32:19"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1902:8:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1975:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1984:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1987:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1977:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1977:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1977:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1961:8:19"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1971:2:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1958:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1958:16:19"
															},
															"nodeType": "YulIf",
															"src": "1955:36:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2000:98:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2068:9:19"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "2079:8:19"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2064:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2064:24:19"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2090:7:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_array_address_dyn_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "2026:37:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2026:72:19"
															},
															"variables": [
																{
																	"name": "value2_1",
																	"nodeType": "YulTypedName",
																	"src": "2004:8:19",
																	"type": ""
																},
																{
																	"name": "value3_1",
																	"nodeType": "YulTypedName",
																	"src": "2014:8:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2107:18:19",
															"value": {
																"name": "value2_1",
																"nodeType": "YulIdentifier",
																"src": "2117:8:19"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2107:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2134:18:19",
															"value": {
																"name": "value3_1",
																"nodeType": "YulIdentifier",
																"src": "2144:8:19"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2134:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1484:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1495:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1507:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1515:6:19",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1523:6:19",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1531:6:19",
														"type": ""
													}
												],
												"src": "1374:784:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2233:177:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2279:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2288:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2291:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2281:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2281:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2281:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2254:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2263:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2250:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2250:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2275:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2246:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2246:32:19"
															},
															"nodeType": "YulIf",
															"src": "2243:52:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2304:36:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2330:9:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2317:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2317:23:19"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2308:5:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2374:5:19"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2349:24:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2349:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2349:31:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2389:15:19",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2399:5:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2389:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2199:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2210:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2222:6:19",
														"type": ""
													}
												],
												"src": "2163:247:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2522:301:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2568:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2577:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2580:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2570:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2570:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2570:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2543:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2552:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2539:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2539:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2564:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2535:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2535:32:19"
															},
															"nodeType": "YulIf",
															"src": "2532:52:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2593:36:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2619:9:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2606:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2606:23:19"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2597:5:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2663:5:19"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2638:24:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2638:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2638:31:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2678:15:19",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2688:5:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2678:6:19"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2702:47:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2734:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2745:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2730:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2730:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2717:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2717:32:19"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "2706:7:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "2783:7:19"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2758:24:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2758:33:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2758:33:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2800:17:19",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "2810:7:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2800:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_contract$_IEntryPoint_$3424",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2480:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2491:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2503:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2511:6:19",
														"type": ""
													}
												],
												"src": "2415:408:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2923:228:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2969:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2978:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2981:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2971:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2971:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2971:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2944:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2953:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2940:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2940:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2965:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2936:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2936:32:19"
															},
															"nodeType": "YulIf",
															"src": "2933:52:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2994:36:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3020:9:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3007:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3007:23:19"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2998:5:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3064:5:19"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "3039:24:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3039:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3039:31:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3079:15:19",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3089:5:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3079:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3103:42:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3130:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3141:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3126:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3126:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3113:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3113:32:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3103:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_payablet_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2881:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2892:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2904:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2912:6:19",
														"type": ""
													}
												],
												"src": "2828:323:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3188:95:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3205:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3212:3:19",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3217:10:19",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3208:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3208:20:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3198:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3198:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3198:31:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3245:1:19",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3248:4:19",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3238:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3238:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3238:15:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3269:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3272:4:19",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3262:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3262:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3262:15:19"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "3156:127:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3384:960:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3430:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3439:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3442:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3432:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3432:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3432:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3405:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3414:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3401:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3401:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3426:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3397:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3397:32:19"
															},
															"nodeType": "YulIf",
															"src": "3394:52:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3455:36:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3481:9:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3468:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3468:23:19"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3459:5:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3525:5:19"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "3500:24:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3500:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3500:31:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3540:15:19",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3550:5:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3540:6:19"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3564:46:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3595:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3606:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3591:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3591:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3578:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3578:32:19"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3568:6:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3619:28:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3629:18:19",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3623:2:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3674:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3683:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3686:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3676:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3676:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3676:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3662:6:19"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3670:2:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3659:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3659:14:19"
															},
															"nodeType": "YulIf",
															"src": "3656:34:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3699:32:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3713:9:19"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3724:6:19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3709:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3709:22:19"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3703:2:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3779:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3788:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3791:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3781:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3781:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3781:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3758:2:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3762:4:19",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3754:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3754:13:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3769:7:19"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3750:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3750:27:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3743:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3743:35:19"
															},
															"nodeType": "YulIf",
															"src": "3740:55:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3804:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3827:2:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3814:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3814:16:19"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "3808:2:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3853:22:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "3855:16:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3855:18:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3855:18:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "3845:2:19"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3849:2:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3842:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3842:10:19"
															},
															"nodeType": "YulIf",
															"src": "3839:36:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3884:17:19",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3898:2:19",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "3894:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3894:7:19"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "3888:2:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3910:23:19",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3930:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3924:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3924:9:19"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "3914:6:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3942:71:19",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "3964:6:19"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_3",
																										"nodeType": "YulIdentifier",
																										"src": "3988:2:19"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "3992:4:19",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3984:3:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3984:13:19"
																							},
																							{
																								"name": "_4",
																								"nodeType": "YulIdentifier",
																								"src": "3999:2:19"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "3980:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3980:22:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4004:2:19",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3976:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3976:31:19"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "4009:2:19"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3972:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3972:40:19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3960:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3960:53:19"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "3946:10:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4072:22:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4074:16:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4074:18:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4074:18:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4031:10:19"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4043:2:19"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4028:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4028:18:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4051:10:19"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4063:6:19"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4048:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4048:22:19"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4025:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4025:46:19"
															},
															"nodeType": "YulIf",
															"src": "4022:72:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4110:2:19",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "4114:10:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4103:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4103:22:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4103:22:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4141:6:19"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4149:2:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4134:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4134:18:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4134:18:19"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4198:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4207:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4210:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4200:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4200:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4200:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4175:2:19"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4179:2:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4171:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4171:11:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4184:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4167:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4167:20:19"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4189:7:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4164:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4164:33:19"
															},
															"nodeType": "YulIf",
															"src": "4161:53:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4240:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4248:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4236:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4236:15:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4257:2:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4261:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4253:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4253:11:19"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4266:2:19"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "4223:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4223:46:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4223:46:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "4293:6:19"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4301:2:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4289:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4289:15:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4306:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4285:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4285:24:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4311:1:19",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4278:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4278:35:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4278:35:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4322:16:19",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "4332:6:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4322:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3342:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3353:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3365:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3373:6:19",
														"type": ""
													}
												],
												"src": "3288:1056:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4450:76:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4460:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4472:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4483:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4468:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4468:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4460:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4502:9:19"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4513:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4495:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4495:25:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4495:25:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4419:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4430:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4441:4:19",
														"type": ""
													}
												],
												"src": "4349:177:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4632:102:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4642:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4654:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4665:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4650:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4650:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4642:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4684:9:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4699:6:19"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4715:3:19",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4720:1:19",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4711:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4711:11:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4724:1:19",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4707:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4707:19:19"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4695:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4695:32:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4677:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4677:51:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4677:51:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4601:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4612:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4623:4:19",
														"type": ""
													}
												],
												"src": "4531:203:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4860:102:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4870:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4882:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4893:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4878:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4878:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4870:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4912:9:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4927:6:19"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4943:3:19",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4948:1:19",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4939:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4939:11:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4952:1:19",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4935:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4935:19:19"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4923:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4923:32:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4905:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4905:51:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4905:51:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IEntryPoint_$3424__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4829:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4840:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4851:4:19",
														"type": ""
													}
												],
												"src": "4739:223:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5090:671:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5136:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5145:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5148:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5138:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5138:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5138:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5111:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5120:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5107:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5107:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5132:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5103:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5103:32:19"
															},
															"nodeType": "YulIf",
															"src": "5100:52:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5161:36:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5187:9:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5174:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5174:23:19"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5165:5:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5231:5:19"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "5206:24:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5206:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5206:31:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5246:15:19",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "5256:5:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5246:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5270:42:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5297:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5308:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5293:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5293:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5280:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5280:32:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5270:6:19"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5321:46:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5352:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5363:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5348:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5348:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5335:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5335:32:19"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "5325:6:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5376:28:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5386:18:19",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5380:2:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5431:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5440:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5443:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5433:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5433:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5433:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5419:6:19"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5427:2:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5416:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5416:14:19"
															},
															"nodeType": "YulIf",
															"src": "5413:34:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5456:32:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5470:9:19"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5481:6:19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5466:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5466:22:19"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "5460:2:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5536:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5545:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5548:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5538:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5538:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5538:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "5515:2:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5519:4:19",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5511:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5511:13:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5526:7:19"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "5507:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5507:27:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5500:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5500:35:19"
															},
															"nodeType": "YulIf",
															"src": "5497:55:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5561:30:19",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "5588:2:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5575:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5575:16:19"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5565:6:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5618:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5627:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5630:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5620:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5620:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5620:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5606:6:19"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5614:2:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5603:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5603:14:19"
															},
															"nodeType": "YulIf",
															"src": "5600:34:19"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5684:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5693:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5696:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5686:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5686:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5686:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "5657:2:19"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "5661:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5653:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5653:15:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5670:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5649:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5649:24:19"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "5675:7:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5646:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5646:37:19"
															},
															"nodeType": "YulIf",
															"src": "5643:57:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5709:21:19",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "5723:2:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5727:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5719:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5719:11:19"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "5709:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5739:16:19",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "5749:6:19"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "5739:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5032:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5043:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5055:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5063:6:19",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5071:6:19",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5079:6:19",
														"type": ""
													}
												],
												"src": "4967:794:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5860:427:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5870:51:19",
															"value": {
																"arguments": [
																	{
																		"name": "ptr_to_tail",
																		"nodeType": "YulIdentifier",
																		"src": "5909:11:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5896:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5896:25:19"
															},
															"variables": [
																{
																	"name": "rel_offset_of_tail",
																	"nodeType": "YulTypedName",
																	"src": "5874:18:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6010:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6019:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6022:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6012:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6012:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6012:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "rel_offset_of_tail",
																				"nodeType": "YulIdentifier",
																				"src": "5944:18:19"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "calldatasize",
																									"nodeType": "YulIdentifier",
																									"src": "5972:12:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "5972:14:19"
																							},
																							{
																								"name": "base_ref",
																								"nodeType": "YulIdentifier",
																								"src": "5988:8:19"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "5968:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5968:29:19"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6003:2:19",
																								"type": "",
																								"value": "30"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "5999:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5999:7:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5964:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5964:43:19"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "5940:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5940:68:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5933:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5933:76:19"
															},
															"nodeType": "YulIf",
															"src": "5930:96:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6035:47:19",
															"value": {
																"arguments": [
																	{
																		"name": "base_ref",
																		"nodeType": "YulIdentifier",
																		"src": "6053:8:19"
																	},
																	{
																		"name": "rel_offset_of_tail",
																		"nodeType": "YulIdentifier",
																		"src": "6063:18:19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6049:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6049:33:19"
															},
															"variables": [
																{
																	"name": "addr_1",
																	"nodeType": "YulTypedName",
																	"src": "6039:6:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6091:30:19",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "6114:6:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6101:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6101:20:19"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "6091:6:19"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6164:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6173:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6176:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6166:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6166:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6166:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6136:6:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6144:18:19",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6133:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6133:30:19"
															},
															"nodeType": "YulIf",
															"src": "6130:50:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6189:25:19",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "6201:6:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6209:4:19",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6197:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6197:17:19"
															},
															"variableNames": [
																{
																	"name": "addr",
																	"nodeType": "YulIdentifier",
																	"src": "6189:4:19"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6265:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6274:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6277:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6267:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6267:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6267:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "addr",
																		"nodeType": "YulIdentifier",
																		"src": "6230:4:19"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "calldatasize",
																					"nodeType": "YulIdentifier",
																					"src": "6240:12:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6240:14:19"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6256:6:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6236:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6236:27:19"
																	}
																],
																"functionName": {
																	"name": "sgt",
																	"nodeType": "YulIdentifier",
																	"src": "6226:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6226:38:19"
															},
															"nodeType": "YulIf",
															"src": "6223:58:19"
														}
													]
												},
												"name": "access_calldata_tail_t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base_ref",
														"nodeType": "YulTypedName",
														"src": "5817:8:19",
														"type": ""
													},
													{
														"name": "ptr_to_tail",
														"nodeType": "YulTypedName",
														"src": "5827:11:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "addr",
														"nodeType": "YulTypedName",
														"src": "5843:4:19",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5849:6:19",
														"type": ""
													}
												],
												"src": "5766:521:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6466:169:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6483:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6494:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6476:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6476:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6476:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6517:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6528:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6513:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6513:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6533:2:19",
																		"type": "",
																		"value": "19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6506:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6506:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6506:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6556:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6567:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6552:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6552:18:19"
																	},
																	{
																		"hexValue": "77726f6e67206172726179206c656e67746873",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6572:21:19",
																		"type": "",
																		"value": "wrong array lengths"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6545:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6545:49:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6545:49:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6603:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6615:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6626:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6611:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6611:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6603:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_046f63b53432b31c38dcec6b5f05e3d65602d684f9163a89310aaaf94e08558e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6443:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6457:4:19",
														"type": ""
													}
												],
												"src": "6292:343:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6672:95:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6689:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6696:3:19",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6701:10:19",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6692:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6692:20:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6682:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6682:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6682:31:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6729:1:19",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6732:4:19",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6722:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6722:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6722:15:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6753:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6756:4:19",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6746:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6746:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6746:15:19"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "6640:127:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6804:95:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6821:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6828:3:19",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6833:10:19",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6824:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6824:20:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6814:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6814:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6814:31:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6861:1:19",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6864:4:19",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6854:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6854:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6854:15:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6885:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6888:4:19",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6878:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6878:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6878:15:19"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6772:127:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6951:88:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6982:22:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6984:16:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6984:18:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6984:18:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6967:5:19"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6978:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "6974:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6974:6:19"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "6964:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6964:17:19"
															},
															"nodeType": "YulIf",
															"src": "6961:43:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7013:20:19",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7024:5:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7031:1:19",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7020:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7020:13:19"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "7013:3:19"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6933:5:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "6943:3:19",
														"type": ""
													}
												],
												"src": "6904:135:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7218:234:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7235:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7246:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7228:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7228:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7228:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7269:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7280:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7265:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7265:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7285:2:19",
																		"type": "",
																		"value": "44"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7258:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7258:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7258:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7308:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7319:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7304:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7304:18:19"
																	},
																	{
																		"hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7324:34:19",
																		"type": "",
																		"value": "Function must be called through "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7297:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7297:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7297:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7379:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7390:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7375:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7375:18:19"
																	},
																	{
																		"hexValue": "64656c656761746563616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7395:14:19",
																		"type": "",
																		"value": "delegatecall"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7368:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7368:42:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7368:42:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7419:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7431:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7442:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7427:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7427:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7419:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7195:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7209:4:19",
														"type": ""
													}
												],
												"src": "7044:408:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7631:234:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7648:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7659:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7641:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7641:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7641:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7682:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7693:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7678:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7678:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7698:2:19",
																		"type": "",
																		"value": "44"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7671:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7671:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7671:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7721:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7732:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7717:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7717:18:19"
																	},
																	{
																		"hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7737:34:19",
																		"type": "",
																		"value": "Function must be called through "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7710:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7710:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7710:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7792:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7803:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7788:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7788:18:19"
																	},
																	{
																		"hexValue": "6163746976652070726f7879",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7808:14:19",
																		"type": "",
																		"value": "active proxy"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7781:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7781:42:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7781:42:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7832:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7844:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7855:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7840:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7840:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7832:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7608:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7622:4:19",
														"type": ""
													}
												],
												"src": "7457:408:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8044:236:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8061:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8072:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8054:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8054:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8054:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8095:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8106:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8091:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8091:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8111:2:19",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8084:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8084:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8084:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8134:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8145:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8130:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8130:18:19"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8150:34:19",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8123:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8123:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8123:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8205:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8216:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8201:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8201:18:19"
																	},
																	{
																		"hexValue": "647920696e697469616c697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8221:16:19",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8194:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8194:44:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8194:44:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8247:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8259:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8270:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8255:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8255:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8247:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8021:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8035:4:19",
														"type": ""
													}
												],
												"src": "7870:410:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8392:87:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8402:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8414:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8425:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8410:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8410:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8402:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8444:9:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "8459:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8467:4:19",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8455:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8455:17:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8437:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8437:36:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8437:36:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8361:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8372:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8383:4:19",
														"type": ""
													}
												],
												"src": "8285:194:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8675:14:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8677:10:19",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "8684:3:19"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8677:3:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8659:3:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8667:3:19",
														"type": ""
													}
												],
												"src": "8484:205:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8839:145:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8849:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8861:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8872:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8857:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8857:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8849:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8891:9:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "8906:6:19"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8922:3:19",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8927:1:19",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "8918:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8918:11:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8931:1:19",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "8914:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8914:19:19"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8902:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8902:32:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8884:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8884:51:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8884:51:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8955:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8966:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8951:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8951:18:19"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "8971:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8944:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8944:34:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8944:34:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8800:9:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8811:6:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8819:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8830:4:19",
														"type": ""
													}
												],
												"src": "8694:290:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9163:246:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9180:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9191:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9173:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9173:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9173:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9214:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9225:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9210:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9210:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9230:2:19",
																		"type": "",
																		"value": "56"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9203:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9203:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9203:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9253:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9264:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9249:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9249:18:19"
																	},
																	{
																		"hexValue": "555550535570677261646561626c653a206d757374206e6f742062652063616c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9269:34:19",
																		"type": "",
																		"value": "UUPSUpgradeable: must not be cal"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9242:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9242:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9242:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9324:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9335:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9320:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9320:18:19"
																	},
																	{
																		"hexValue": "6c6564207468726f7567682064656c656761746563616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9340:26:19",
																		"type": "",
																		"value": "led through delegatecall"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9313:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9313:54:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9313:54:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9376:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9388:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9399:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9384:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9384:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9376:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9140:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9154:4:19",
														"type": ""
													}
												],
												"src": "8989:420:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9495:103:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9541:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9550:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9553:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9543:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9543:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9543:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9516:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9525:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9512:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9512:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9537:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9508:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9508:32:19"
															},
															"nodeType": "YulIf",
															"src": "9505:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9566:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9582:9:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9576:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9576:16:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "9566:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9461:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "9472:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9484:6:19",
														"type": ""
													}
												],
												"src": "9414:184:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9777:178:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9794:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9805:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9787:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9787:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9787:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9828:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9839:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9824:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9824:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9844:2:19",
																		"type": "",
																		"value": "28"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9817:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9817:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9817:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9867:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9878:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9863:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9863:18:19"
																	},
																	{
																		"hexValue": "6163636f756e743a206e6f742066726f6d20456e747279506f696e74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9883:30:19",
																		"type": "",
																		"value": "account: not from EntryPoint"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9856:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9856:58:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9856:58:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9923:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9935:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9946:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9931:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9931:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9923:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9754:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9768:4:19",
														"type": ""
													}
												],
												"src": "9603:352:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10006:171:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10016:36:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10026:26:19",
																"type": "",
																"value": "0xffffffffffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "10020:2:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10061:29:19",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10080:5:19"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "10087:2:19"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10076:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10076:14:19"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "10065:7:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10118:22:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10120:16:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10120:18:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10120:18:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "10105:7:19"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "10114:2:19"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "10102:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10102:15:19"
															},
															"nodeType": "YulIf",
															"src": "10099:41:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10149:22:19",
															"value": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "10160:7:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10169:1:19",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10156:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10156:15:19"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "10149:3:19"
																}
															]
														}
													]
												},
												"name": "increment_t_uint96",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9988:5:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "9998:3:19",
														"type": ""
													}
												],
												"src": "9960:217:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10356:172:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10373:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10384:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10366:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10366:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10366:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10407:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10418:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10403:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10403:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10423:2:19",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10396:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10396:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10396:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10446:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10457:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10442:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10442:18:19"
																	},
																	{
																		"hexValue": "6163636f756e743a20696e76616c6964206e6f6e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10462:24:19",
																		"type": "",
																		"value": "account: invalid nonce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10435:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10435:52:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10435:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10496:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10508:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10519:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10504:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10504:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10496:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_470b5eb05ad46a916385e8f3d185e571bb4498eea99276dfa63667e9faf43873__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10333:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10347:4:19",
														"type": ""
													}
												],
												"src": "10182:346:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10707:182:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10724:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10735:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10717:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10717:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10717:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10758:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10769:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10754:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10754:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10774:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10747:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10747:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10747:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10797:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10808:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10793:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10793:18:19"
																	},
																	{
																		"hexValue": "6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10813:34:19",
																		"type": "",
																		"value": "account: not Owner or EntryPoint"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10786:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10786:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10786:62:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10857:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10869:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10880:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10865:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10865:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10857:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_26bf1d2fa883929ce8db7f4593c3a7f27ec5e761d3beb6ef3a9db5c68fe51d21__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10684:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10698:4:19",
														"type": ""
													}
												],
												"src": "10533:356:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10960:184:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10970:10:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10979:1:19",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "10974:1:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11039:63:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "11064:3:19"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "11069:1:19"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "11060:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11060:11:19"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "11083:3:19"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "11088:1:19"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "11079:3:19"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "11079:11:19"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "11073:5:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11073:18:19"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "11053:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11053:39:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11053:39:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "11000:1:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11003:6:19"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "10997:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10997:13:19"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "11011:19:19",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "11013:15:19",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "11022:1:19"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11025:2:19",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "11018:3:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11018:10:19"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "11013:1:19"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "10993:3:19",
																"statements": []
															},
															"src": "10989:113:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "11122:3:19"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "11127:6:19"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11118:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11118:16:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11136:1:19",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11111:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11111:27:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11111:27:19"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "10938:3:19",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "10943:3:19",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10948:6:19",
														"type": ""
													}
												],
												"src": "10894:250:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11286:150:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11296:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11316:6:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11310:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11310:13:19"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "11300:6:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "11371:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11379:4:19",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11367:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11367:17:19"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11386:3:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11391:6:19"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "11332:34:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11332:66:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11332:66:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11407:23:19",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11418:3:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11423:6:19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11414:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11414:16:19"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11407:3:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11262:3:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11267:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11278:3:19",
														"type": ""
													}
												],
												"src": "11149:287:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11522:103:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11568:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11577:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11580:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11570:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11570:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11570:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "11543:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11552:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11539:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11539:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11564:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "11535:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11535:32:19"
															},
															"nodeType": "YulIf",
															"src": "11532:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11593:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11609:9:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11603:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11603:16:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "11593:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11488:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "11499:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11511:6:19",
														"type": ""
													}
												],
												"src": "11441:184:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11804:236:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11821:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11832:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11814:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11814:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11814:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11855:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11866:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11851:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11851:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11871:2:19",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11844:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11844:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11844:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11894:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11905:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11890:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11890:18:19"
																	},
																	{
																		"hexValue": "45524331393637557067726164653a206e657720696d706c656d656e74617469",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11910:34:19",
																		"type": "",
																		"value": "ERC1967Upgrade: new implementati"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11883:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11883:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11883:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11965:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11976:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11961:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11961:18:19"
																	},
																	{
																		"hexValue": "6f6e206973206e6f742055555053",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11981:16:19",
																		"type": "",
																		"value": "on is not UUPS"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11954:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11954:44:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11954:44:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12007:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12019:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12030:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12015:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12015:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12007:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11781:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11795:4:19",
														"type": ""
													}
												],
												"src": "11630:410:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12219:231:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12236:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12247:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12229:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12229:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12229:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12270:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12281:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12266:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12266:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12286:2:19",
																		"type": "",
																		"value": "41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12259:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12259:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12259:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12309:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12320:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12305:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12305:18:19"
																	},
																	{
																		"hexValue": "45524331393637557067726164653a20756e737570706f727465642070726f78",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12325:34:19",
																		"type": "",
																		"value": "ERC1967Upgrade: unsupported prox"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12298:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12298:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12298:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12380:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12391:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12376:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12376:18:19"
																	},
																	{
																		"hexValue": "6961626c6555554944",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12396:11:19",
																		"type": "",
																		"value": "iableUUID"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12369:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12369:39:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12369:39:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12417:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12429:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12440:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12425:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12425:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12417:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12196:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12210:4:19",
														"type": ""
													}
												],
												"src": "12045:405:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12629:160:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12646:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12657:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12639:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12639:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12639:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12680:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12691:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12676:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12676:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12696:2:19",
																		"type": "",
																		"value": "10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12669:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12669:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12669:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12719:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12730:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12715:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12715:18:19"
																	},
																	{
																		"hexValue": "6f6e6c79206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12735:12:19",
																		"type": "",
																		"value": "only owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12708:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12708:40:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12708:40:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12757:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12769:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12780:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12765:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12765:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12757:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ae2932905fc5bb055d2e7b29311075afd0dbf688106cf649cb515d342f4c7367__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12606:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12620:4:19",
														"type": ""
													}
												],
												"src": "12455:334:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12968:235:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12985:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12996:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12978:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12978:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12978:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13019:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13030:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13015:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13015:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13035:2:19",
																		"type": "",
																		"value": "45"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13008:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13008:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13008:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13058:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13069:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13054:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13054:18:19"
																	},
																	{
																		"hexValue": "455243313936373a206e657720696d706c656d656e746174696f6e206973206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13074:34:19",
																		"type": "",
																		"value": "ERC1967: new implementation is n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13047:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13047:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13047:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13129:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13140:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13125:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13125:18:19"
																	},
																	{
																		"hexValue": "6f74206120636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13145:15:19",
																		"type": "",
																		"value": "ot a contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13118:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13118:43:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13118:43:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13170:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13182:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13193:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13178:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13178:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13170:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12945:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12959:4:19",
														"type": ""
													}
												],
												"src": "12794:409:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13240:95:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13257:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13264:3:19",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13269:10:19",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "13260:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13260:20:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13250:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13250:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13250:31:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13297:1:19",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13300:4:19",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13290:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13290:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13290:15:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13321:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13324:4:19",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "13314:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13314:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13314:15:19"
														}
													]
												},
												"name": "panic_error_0x21",
												"nodeType": "YulFunctionDefinition",
												"src": "13208:127:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13514:174:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13531:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13542:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13524:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13524:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13524:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13565:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13576:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13561:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13561:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13581:2:19",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13554:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13554:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13554:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13604:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13615:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13600:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13600:18:19"
																	},
																	{
																		"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13620:26:19",
																		"type": "",
																		"value": "ECDSA: invalid signature"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13593:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13593:54:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13593:54:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13656:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13668:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13679:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13664:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13664:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13656:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13491:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13505:4:19",
														"type": ""
													}
												],
												"src": "13340:348:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13867:181:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13884:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13895:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13877:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13877:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13877:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13918:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13929:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13914:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13914:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13934:2:19",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13907:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13907:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13907:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13957:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13968:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13953:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13953:18:19"
																	},
																	{
																		"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13973:33:19",
																		"type": "",
																		"value": "ECDSA: invalid signature length"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13946:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13946:61:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13946:61:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14016:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14028:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14039:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14024:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14024:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14016:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13844:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13858:4:19",
														"type": ""
													}
												],
												"src": "13693:355:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14227:224:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14244:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14255:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14237:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14237:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14237:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14278:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14289:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14274:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14274:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14294:2:19",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14267:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14267:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14267:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14317:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14328:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14313:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14313:18:19"
																	},
																	{
																		"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14333:34:19",
																		"type": "",
																		"value": "ECDSA: invalid signature 's' val"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14306:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14306:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14306:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14388:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14399:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14384:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14384:18:19"
																	},
																	{
																		"hexValue": "7565",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14404:4:19",
																		"type": "",
																		"value": "ue"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14377:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14377:32:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14377:32:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14418:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14430:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14441:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14426:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14426:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14418:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14204:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14218:4:19",
														"type": ""
													}
												],
												"src": "14053:398:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14637:217:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14647:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14659:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14670:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14655:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14655:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14647:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14690:9:19"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "14701:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14683:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14683:25:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14683:25:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14728:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14739:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14724:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14724:18:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "14748:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14756:4:19",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "14744:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14744:17:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14717:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14717:45:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14717:45:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14782:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14793:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14778:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14778:18:19"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "14798:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14771:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14771:34:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14771:34:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14825:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14836:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14821:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14821:18:19"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "14841:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14814:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14814:34:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14814:34:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14582:9:19",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "14593:6:19",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "14601:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "14609:6:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "14617:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14628:4:19",
														"type": ""
													}
												],
												"src": "14456:398:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15033:179:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15050:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15061:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15043:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15043:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15043:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15084:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15095:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15080:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15080:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15100:2:19",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15073:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15073:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15073:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15123:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15134:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15119:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15119:18:19"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15139:31:19",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15112:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15112:59:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15112:59:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15180:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15192:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15203:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15188:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15188:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15180:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15010:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15024:4:19",
														"type": ""
													}
												],
												"src": "14859:353:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15338:275:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15355:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15366:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15348:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15348:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15348:21:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15378:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "15398:6:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "15392:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15392:13:19"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "15382:6:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15425:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15436:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15421:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15421:18:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "15441:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15414:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15414:34:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15414:34:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "15496:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15504:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15492:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15492:15:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15513:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15524:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15509:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15509:18:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "15529:6:19"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "15457:34:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15457:79:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15457:79:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15545:62:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15561:9:19"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "15580:6:19"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "15588:2:19",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "15576:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "15576:15:19"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "15597:2:19",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "15593:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "15593:7:19"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "15572:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15572:29:19"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15557:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15557:45:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15604:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15553:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15553:54:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15545:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15307:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "15318:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15329:4:19",
														"type": ""
													}
												],
												"src": "15217:396:19"
											}
										]
									},
									"contents": "{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_struct$_UserOperation_$3553_calldata_ptrt_bytes32t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 352) { revert(0, 0) }\n        value0 := _1\n        value1 := calldataload(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        validator_revert_address(value)\n        value2 := value\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_contract$_IEntryPoint_$3424(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_address_payablet_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IEntryPoint_$3424__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value2 := add(_2, 32)\n        value3 := length\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_tuple_t_stringliteral_046f63b53432b31c38dcec6b5f05e3d65602d684f9163a89310aaaf94e08558e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"wrong array lengths\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"account: not from EntryPoint\")\n        tail := add(headStart, 96)\n    }\n    function increment_t_uint96(value) -> ret\n    {\n        let _1 := 0xffffffffffffffffffffffff\n        let value_1 := and(value, _1)\n        if eq(value_1, _1) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_470b5eb05ad46a916385e8f3d185e571bb4498eea99276dfa63667e9faf43873__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"account: invalid nonce\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_26bf1d2fa883929ce8db7f4593c3a7f27ec5e761d3beb6ef3a9db5c68fe51d21__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"account: not Owner or EntryPoint\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ae2932905fc5bb055d2e7b29311075afd0dbf688106cf649cb515d342f4c7367__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"only owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 19,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"529": [
									{
										"length": 32,
										"start": 951
									},
									{
										"length": 32,
										"start": 1015
									},
									{
										"length": 32,
										"start": 1688
									},
									{
										"length": 32,
										"start": 1752
									},
									{
										"length": 32,
										"start": 1899
									}
								]
							},
							"linkReferences": {},
							"object": "6080604052600436106100c65760003560e01c80634f1ef2861161007f578063affed0e011610059578063affed0e0146101ef578063b0d691fe14610213578063b61d27f614610231578063c399ec881461025157600080fd5b80634f1ef2861461018f57806352d1902d146101a25780638da5cb5b146101b757600080fd5b80630825d1fc146100d257806318dfb3c7146101055780633659cfe614610127578063485cc955146101475780634a58db19146101675780634d44560d1461016f57600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506100f26100ed366004611296565b610266565b6040519081526020015b60405180910390f35b34801561011157600080fd5b50610125610120366004611342565b6102ad565b005b34801561013357600080fd5b506101256101423660046113ae565b6103ad565b34801561015357600080fd5b506101256101623660046113cb565b61048c565b6101256105a1565b34801561017b57600080fd5b5061012561018a366004611404565b610612565b61012561019d366004611446565b61068e565b3480156101ae57600080fd5b506100f261075e565b3480156101c357600080fd5b506001546101d7906001600160a01b031681565b6040516001600160a01b0390911681526020016100fc565b3480156101fb57600080fd5b506000546201000090046001600160601b03166100f2565b34801561021f57600080fd5b506002546001600160a01b03166101d7565b34801561023d57600080fd5b5061012561024c36600461150a565b610811565b34801561025d57600080fd5b506100f2610860565b60006102706108e3565b61027b85858561093f565b905061028a6040860186611593565b905060000361029c5761029c856109e8565b6102a582610a81565b949350505050565b6102b5610ace565b8281146102ff5760405162461bcd60e51b815260206004820152601360248201527277726f6e67206172726179206c656e6774687360681b60448201526064015b60405180910390fd5b60005b838110156103a65761039485858381811061031f5761031f6115da565b905060200201602081019061033491906113ae565b6000858585818110610348576103486115da565b905060200281019061035a9190611593565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b3d92505050565b8061039e81611606565b915050610302565b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103f55760405162461bcd60e51b81526004016102f69061161f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661043e600080516020611780833981519152546001600160a01b031690565b6001600160a01b0316146104645760405162461bcd60e51b81526004016102f69061166b565b61046d81610bad565b6040805160008082526020820190925261048991839190610bb5565b50565b600054610100900460ff16158080156104ac5750600054600160ff909116105b806104c65750303b1580156104c6575060005460ff166001145b6105295760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102f6565b6000805460ff19166001179055801561054c576000805461ff0019166101001790555b6105568383610d20565b801561059c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60006105b56002546001600160a01b031690565b6001600160a01b03163460405160006040518083038185875af1925050503d80600081146105ff576040519150601f19603f3d011682016040523d82523d6000602084013e610604565b606091505b505090508061048957600080fd5b61061a610d7d565b6002546001600160a01b031660405163040b850f60e31b81526001600160a01b03848116600483015260248201849052919091169063205c287890604401600060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106d65760405162461bcd60e51b81526004016102f69061161f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661071f600080516020611780833981519152546001600160a01b031690565b6001600160a01b0316146107455760405162461bcd60e51b81526004016102f69061166b565b61074e82610bad565b61075a82826001610bb5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107fe5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016102f6565b5060008051602061178083398151915290565b610819610ace565b61085a848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b3d92505050565b50505050565b60006108746002546001600160a01b031690565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156108ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de91906116b7565b905090565b6002546001600160a01b0316331461093d5760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016102f6565b565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c839052603c81206109bc61097f610140870187611593565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508593925050610dce9050565b6001546001600160a01b039081169116146109db5760019150506109e1565b60009150505b9392505050565b60008054602083013591620100009091046001600160601b0316906002610a0e836116d0565b91906101000a8154816001600160601b0302191690836001600160601b031602179055506001600160601b0316146104895760405162461bcd60e51b81526020600482015260166024820152756163636f756e743a20696e76616c6964206e6f6e636560501b60448201526064016102f6565b801561048957604051600090339060001990849084818181858888f193505050503d80600081146103a6576040519150601f19603f3d011682016040523d82523d6000602084013e6103a6565b6002546001600160a01b0316331480610af157506001546001600160a01b031633145b61093d5760405162461bcd60e51b815260206004820181905260248201527f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e7460448201526064016102f6565b600080846001600160a01b03168484604051610b59919061171a565b60006040518083038185875af1925050503d8060008114610b96576040519150601f19603f3d011682016040523d82523d6000602084013e610b9b565b606091505b5091509150816103a657805160208201fd5b610489610d7d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610be85761059c83610df2565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610c42575060408051601f3d908101601f19168201909252610c3f918101906116b7565b60015b610ca55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016102f6565b6000805160206117808339815191528114610d145760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016102f6565b5061059c838383610e8e565b600180546001600160a01b038085166001600160a01b03199283168117909355600280549185169190921681179091556040517f47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de90600090a35050565b6001546001600160a01b0316331480610d9557503330145b61093d5760405162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b60448201526064016102f6565b6000806000610ddd8585610eb3565b91509150610dea81610ef8565b509392505050565b6001600160a01b0381163b610e5f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f6565b60008051602061178083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610e9783611042565b600082511180610ea45750805b1561059c5761085a8383611082565b6000808251604103610ee95760208301516040840151606085015160001a610edd878285856110a7565b94509450505050610ef1565b506000905060025b9250929050565b6000816004811115610f0c57610f0c611736565b03610f145750565b6001816004811115610f2857610f28611736565b03610f755760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102f6565b6002816004811115610f8957610f89611736565b03610fd65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102f6565b6003816004811115610fea57610fea611736565b036104895760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102f6565b61104b81610df2565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606109e183836040518060600160405280602781526020016117a06027913961116b565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156110de5750600090506003611162565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611132573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661115b57600060019250925050611162565b9150600090505b94509492505050565b6060600080856001600160a01b031685604051611188919061171a565b600060405180830381855af49150503d80600081146111c3576040519150601f19603f3d011682016040523d82523d6000602084013e6111c8565b606091505b50915091506111d9868383876111e3565b9695505050505050565b6060831561125257825160000361124b576001600160a01b0385163b61124b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f6565b50816102a5565b6102a583838151156112675781518083602001fd5b8060405162461bcd60e51b81526004016102f6919061174c565b6001600160a01b038116811461048957600080fd5b600080600080608085870312156112ac57600080fd5b843567ffffffffffffffff8111156112c357600080fd5b850161016081880312156112d657600080fd5b93506020850135925060408501356112ed81611281565b9396929550929360600135925050565b60008083601f84011261130f57600080fd5b50813567ffffffffffffffff81111561132757600080fd5b6020830191508360208260051b8501011115610ef157600080fd5b6000806000806040858703121561135857600080fd5b843567ffffffffffffffff8082111561137057600080fd5b61137c888389016112fd565b9096509450602087013591508082111561139557600080fd5b506113a2878288016112fd565b95989497509550505050565b6000602082840312156113c057600080fd5b81356109e181611281565b600080604083850312156113de57600080fd5b82356113e981611281565b915060208301356113f981611281565b809150509250929050565b6000806040838503121561141757600080fd5b823561142281611281565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561145957600080fd5b823561146481611281565b9150602083013567ffffffffffffffff8082111561148157600080fd5b818501915085601f83011261149557600080fd5b8135818111156114a7576114a7611430565b604051601f8201601f19908116603f011681019083821181831017156114cf576114cf611430565b816040528281528860208487010111156114e857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806060858703121561152057600080fd5b843561152b81611281565b935060208501359250604085013567ffffffffffffffff8082111561154f57600080fd5b818701915087601f83011261156357600080fd5b81358181111561157257600080fd5b88602082850101111561158457600080fd5b95989497505060200194505050565b6000808335601e198436030181126115aa57600080fd5b83018035915067ffffffffffffffff8211156115c557600080fd5b602001915036819003821315610ef157600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611618576116186115f0565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000602082840312156116c957600080fd5b5051919050565b60006001600160601b038083168181036116ec576116ec6115f0565b6001019392505050565b60005b838110156117115781810151838201526020016116f9565b50506000910152565b6000825161172c8184602087016116f6565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b602081526000825180602084015261176b8160408501602087016116f6565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205bbbca6dc477817fca3ad86f4a99ec370a0d53a12f9258e93656372a7c1db3a264736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4F1EF286 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xAFFED0E0 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xB0D691FE EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0xB61D27F6 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0xC399EC88 EQ PUSH2 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x825D1FC EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0x18DFB3C7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x485CC955 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x4A58DB19 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x4D44560D EQ PUSH2 0x16F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0xCD JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0xED CALLDATASIZE PUSH1 0x4 PUSH2 0x1296 JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0x1342 JUMP JUMPDEST PUSH2 0x2AD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0x13AE JUMP JUMPDEST PUSH2 0x3AD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125 PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0x13CB JUMP JUMPDEST PUSH2 0x48C JUMP JUMPDEST PUSH2 0x125 PUSH2 0x5A1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125 PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x1404 JUMP JUMPDEST PUSH2 0x612 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0x1446 JUMP JUMPDEST PUSH2 0x68E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x75E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x1D7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0xF2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125 PUSH2 0x24C CALLDATASIZE PUSH1 0x4 PUSH2 0x150A JUMP JUMPDEST PUSH2 0x811 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x860 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x270 PUSH2 0x8E3 JUMP JUMPDEST PUSH2 0x27B DUP6 DUP6 DUP6 PUSH2 0x93F JUMP JUMPDEST SWAP1 POP PUSH2 0x28A PUSH1 0x40 DUP7 ADD DUP7 PUSH2 0x1593 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SUB PUSH2 0x29C JUMPI PUSH2 0x29C DUP6 PUSH2 0x9E8 JUMP JUMPDEST PUSH2 0x2A5 DUP3 PUSH2 0xA81 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2B5 PUSH2 0xACE JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x2FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x77726F6E67206172726179206C656E67746873 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3A6 JUMPI PUSH2 0x394 DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x31F JUMPI PUSH2 0x31F PUSH2 0x15DA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x334 SWAP2 SWAP1 PUSH2 0x13AE JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x348 JUMPI PUSH2 0x348 PUSH2 0x15DA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x35A SWAP2 SWAP1 PUSH2 0x1593 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xB3D SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x39E DUP2 PUSH2 0x1606 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x302 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x3F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F6 SWAP1 PUSH2 0x161F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x43E PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1780 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x464 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F6 SWAP1 PUSH2 0x166B JUMP JUMPDEST PUSH2 0x46D DUP2 PUSH2 0xBAD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x489 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0xBB5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x4AC JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x4C6 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C6 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x529 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x556 DUP4 DUP4 PUSH2 0xD20 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x59C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B5 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x604 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x61A PUSH2 0xD7D JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD PUSH4 0x40B850F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x205C2878 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x672 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x686 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x6D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F6 SWAP1 PUSH2 0x161F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x71F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1780 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x745 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F6 SWAP1 PUSH2 0x166B JUMP JUMPDEST PUSH2 0x74E DUP3 PUSH2 0xBAD JUMP JUMPDEST PUSH2 0x75A DUP3 DUP3 PUSH1 0x1 PUSH2 0xBB5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x7FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F6 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1780 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x819 PUSH2 0xACE JUMP JUMPDEST PUSH2 0x85A DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xB3D SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x874 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8DE SWAP2 SWAP1 PUSH2 0x16B7 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x93D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6163636F756E743A206E6F742066726F6D20456E747279506F696E7400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C DUP4 SWAP1 MSTORE PUSH1 0x3C DUP2 KECCAK256 PUSH2 0x9BC PUSH2 0x97F PUSH2 0x140 DUP8 ADD DUP8 PUSH2 0x1593 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP6 SWAP4 SWAP3 POP POP PUSH2 0xDCE SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x9DB JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP2 PUSH3 0x10000 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 PUSH1 0x2 PUSH2 0xA0E DUP4 PUSH2 0x16D0 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND EQ PUSH2 0x489 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x6163636F756E743A20696E76616C6964206E6F6E6365 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x489 JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH1 0x0 NOT SWAP1 DUP5 SWAP1 DUP5 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3A6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3A6 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xAF1 JUMPI POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x93D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6163636F756E743A206E6F74204F776E6572206F7220456E747279506F696E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xB59 SWAP2 SWAP1 PUSH2 0x171A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB96 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB9B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x3A6 JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH2 0x489 PUSH2 0xD7D JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xBE8 JUMPI PUSH2 0x59C DUP4 PUSH2 0xDF2 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xC42 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xC3F SWAP2 DUP2 ADD SWAP1 PUSH2 0x16B7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xCA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1780 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0xD14 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F6 JUMP JUMPDEST POP PUSH2 0x59C DUP4 DUP4 DUP4 PUSH2 0xE8E JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP2 DUP6 AND SWAP2 SWAP1 SWAP3 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x47E55C76E7A6F1FD8996A1DA8008C1EA29699CCA35E7BCD057F2DEC313B6E5DE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xD95 JUMPI POP CALLER ADDRESS EQ JUMPDEST PUSH2 0x93D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x37B7363C9037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xDDD DUP6 DUP6 PUSH2 0xEB3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xDEA DUP2 PUSH2 0xEF8 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0xE5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1780 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xE97 DUP4 PUSH2 0x1042 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0xEA4 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x59C JUMPI PUSH2 0x85A DUP4 DUP4 PUSH2 0x1082 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0xEE9 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0xEDD DUP8 DUP3 DUP6 DUP6 PUSH2 0x10A7 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xEF1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xF0C JUMPI PUSH2 0xF0C PUSH2 0x1736 JUMP JUMPDEST SUB PUSH2 0xF14 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xF28 JUMPI PUSH2 0xF28 PUSH2 0x1736 JUMP JUMPDEST SUB PUSH2 0xF75 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xF89 JUMPI PUSH2 0xF89 PUSH2 0x1736 JUMP JUMPDEST SUB PUSH2 0xFD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xFEA JUMPI PUSH2 0xFEA PUSH2 0x1736 JUMP JUMPDEST SUB PUSH2 0x489 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F6 JUMP JUMPDEST PUSH2 0x104B DUP2 PUSH2 0xDF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9E1 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x17A0 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x116B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x10DE JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1162 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1132 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x115B JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1162 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1188 SWAP2 SWAP1 PUSH2 0x171A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x11C3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x11C8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x11D9 DUP7 DUP4 DUP4 DUP8 PUSH2 0x11E3 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1252 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x124B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x124B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F6 JUMP JUMPDEST POP DUP2 PUSH2 0x2A5 JUMP JUMPDEST PUSH2 0x2A5 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1267 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F6 SWAP2 SWAP1 PUSH2 0x174C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH2 0x160 DUP2 DUP9 SUB SLT ISZERO PUSH2 0x12D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x12ED DUP2 PUSH2 0x1281 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x130F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xEF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x137C DUP9 DUP4 DUP10 ADD PUSH2 0x12FD JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1395 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13A2 DUP8 DUP3 DUP9 ADD PUSH2 0x12FD JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9E1 DUP2 PUSH2 0x1281 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x13E9 DUP2 PUSH2 0x1281 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x13F9 DUP2 PUSH2 0x1281 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1422 DUP2 PUSH2 0x1281 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1459 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1464 DUP2 PUSH2 0x1281 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x14A7 JUMPI PUSH2 0x14A7 PUSH2 0x1430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x14CF JUMPI PUSH2 0x14CF PUSH2 0x1430 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x14E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x152B DUP2 PUSH2 0x1281 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x154F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1584 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x15AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x15C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xEF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1618 JUMPI PUSH2 0x1618 PUSH2 0x15F0 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP4 AND DUP2 DUP2 SUB PUSH2 0x16EC JUMPI PUSH2 0x16EC PUSH2 0x15F0 JUMP JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1711 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16F9 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x172C DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x16F6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x176B DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x16F6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A26469706673582212205B 0xBB 0xCA PUSH14 0xC477817FCA3AD86F4A99EC370A0D MSTORE8 LOG1 0x2F SWAP3 PC 0xE9 CALLDATASIZE JUMP CALLDATACOPY 0x2A PUSH29 0x1DB3A264736F6C63430008120033000000000000000000000000000000 ",
							"sourceMap": "585:4472:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1964:441:12;;;;;;;;;;-1:-1:-1;1964:441:12;;;;;:::i;:::-;;:::i;:::-;;;966:25:19;;;954:2;939:18;1964:441:12;;;;;;;;1958:297:13;;;;;;;;;;-1:-1:-1;1958:297:13;;;;;:::i;:::-;;:::i;:::-;;3143:195:5;;;;;;;;;;-1:-1:-1;3143:195:5;;;;;:::i;:::-;;:::i;2437:141:13:-;;;;;;;;;;-1:-1:-1;2437:141:13;;;;;:::i;:::-;;:::i;4464:140::-;;;:::i;4756:158::-;;;;;;;;;;-1:-1:-1;4756:158:13;;;;;:::i;:::-;;:::i;3657:220:5:-;;;;;;:::i;:::-;;:::i;2762:131::-;;;;;;;;;;;;;:::i;791:20:13:-;;;;;;;;;;-1:-1:-1;791:20:13;;;;-1:-1:-1;;;;;791:20:13;;;;;;-1:-1:-1;;;;;4695:32:19;;;4677:51;;4665:2;4650:18;791:20:13;4531:203:19;818:94:13;;;;;;;;;;-1:-1:-1;873:7:13;899:6;;;;-1:-1:-1;;;;;899:6:13;818:94;;918:108;;;;;;;;;;-1:-1:-1;1008:11:13;;-1:-1:-1;;;;;1008:11:13;918:108;;1737:158;;;;;;;;;;-1:-1:-1;1737:158:13;;;;;:::i;:::-;;:::i;4268:113::-;;;;;;;;;;;;;:::i;1964:441:12:-;2127:20;2159:24;:22;:24::i;:::-;2208:50;2227:6;2235:10;2247;2208:18;:50::i;:::-;2193:65;-1:-1:-1;2272:15:12;;;;:6;:15;:::i;:::-;:22;;2298:1;2272:27;2268:89;;2315:31;2339:6;2315:23;:31::i;:::-;2366:32;2378:19;2366:11;:32::i;:::-;1964:441;;;;;;:::o;1958:297:13:-;2047:31;:29;:31::i;:::-;2096:26;;;2088:58;;;;-1:-1:-1;;;2088:58:13;;6494:2:19;2088:58:13;;;6476:21:19;6533:2;6513:18;;;6506:30;-1:-1:-1;;;6552:18:19;;;6545:49;6611:18;;2088:58:13;;;;;;;;;2161:9;2156:93;2176:15;;;2156:93;;;2212:26;2218:4;;2223:1;2218:7;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;2227:1;2230:4;;2235:1;2230:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;2212:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2212:5:13;;-1:-1:-1;;;2212:26:13:i;:::-;2193:3;;;;:::i;:::-;;;;2156:93;;;;1958:297;;;;:::o;3143:195:5:-;-1:-1:-1;;;;;1654:6:5;1637:23;1645:4;1637:23;1629:80;;;;-1:-1:-1;;;1629:80:5;;;;;;;:::i;:::-;1751:6;-1:-1:-1;;;;;1727:30:5;:20;-1:-1:-1;;;;;;;;;;;1254:54:2;-1:-1:-1;;;;;1254:54:2;;1175:140;1727:20:5;-1:-1:-1;;;;;1727:30:5;;1719:87;;;;-1:-1:-1;;;1719:87:5;;;;;;;:::i;:::-;3224:36:::1;3242:17;3224;:36::i;:::-;3311:12;::::0;;3321:1:::1;3311:12:::0;;;::::1;::::0;::::1;::::0;;;3270:61:::1;::::0;3292:17;;3311:12;3270:21:::1;:61::i;:::-;3143:195:::0;:::o;2437:141:13:-;3268:19:4;3291:13;;;;;;3290:14;;3336:34;;;;-1:-1:-1;3354:12:4;;3369:1;3354:12;;;;:16;3336:34;3335:97;;;-1:-1:-1;3404:4:4;1702:19:6;:23;;;3376:55:4;;-1:-1:-1;3414:12:4;;;;;:17;3376:55;3314:190;;;;-1:-1:-1;;;3314:190:4;;8072:2:19;3314:190:4;;;8054:21:19;8111:2;8091:18;;;8084:30;8150:34;8130:18;;;8123:62;-1:-1:-1;;;8201:18:19;;;8194:44;8255:19;;3314:190:4;7870:410:19;3314:190:4;3514:12;:16;;-1:-1:-1;;3514:16:4;3529:1;3514:16;;;3540:65;;;;3574:13;:20;;-1:-1:-1;;3574:20:4;;;;;3540:65;2537:34:13::1;2549:7;2558:12;2537:11;:34::i;:::-;3629:14:4::0;3625:99;;;3675:5;3659:21;;-1:-1:-1;;3659:21:4;;;3699:14;;-1:-1:-1;8437:36:19;;3699:14:4;;8425:2:19;8410:18;3699:14:4;;;;;;;3625:99;3258:472;2437:141:13;;:::o;4464:140::-;4513:8;4534:12;1008:11;;-1:-1:-1;;;;;1008:11:13;;918:108;4534:12;-1:-1:-1;;;;;4526:26:13;4561:9;4526:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4512:63;;;4593:3;4585:12;;;;;4756:158;1364:12;:10;:12::i;:::-;1008:11;;-1:-1:-1;;;;;1008:11:13;4859:48:::1;::::0;-1:-1:-1;;;4859:48:13;;-1:-1:-1;;;;;8902:32:19;;;4859:48:13::1;::::0;::::1;8884:51:19::0;8951:18;;;8944:34;;;4859:23:13;;;::::1;::::0;::::1;::::0;8857:18:19;;4859:48:13::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;4756:158:::0;;:::o;3657:220:5:-;-1:-1:-1;;;;;1654:6:5;1637:23;1645:4;1637:23;1629:80;;;;-1:-1:-1;;;1629:80:5;;;;;;;:::i;:::-;1751:6;-1:-1:-1;;;;;1727:30:5;:20;-1:-1:-1;;;;;;;;;;;1254:54:2;-1:-1:-1;;;;;1254:54:2;;1175:140;1727:20:5;-1:-1:-1;;;;;1727:30:5;;1719:87;;;;-1:-1:-1;;;1719:87:5;;;;;;;:::i;:::-;3772:36:::1;3790:17;3772;:36::i;:::-;3818:52;3840:17;3859:4;3865;3818:21;:52::i;:::-;3657:220:::0;;:::o;2762:131::-;2840:7;2080:4;-1:-1:-1;;;;;2089:6:5;2072:23;;2064:92;;;;-1:-1:-1;;;2064:92:5;;9191:2:19;2064:92:5;;;9173:21:19;9230:2;9210:18;;;9203:30;9269:34;9249:18;;;9242:62;9340:26;9320:18;;;9313:54;9384:19;;2064:92:5;8989:420:19;2064:92:5;-1:-1:-1;;;;;;;;;;;;2762:131:5;:::o;1737:158:13:-;1823:31;:29;:31::i;:::-;1864:24;1870:4;1876:5;1883:4;;1864:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1864:5:13;;-1:-1:-1;;;1864:24:13:i;:::-;1737:158;;;;:::o;4268:113::-;4311:7;4337:12;1008:11;;-1:-1:-1;;;;;1008:11:13;;918:108;4337:12;:37;;-1:-1:-1;;;4337:37:13;;4368:4;4337:37;;;4677:51:19;-1:-1:-1;;;;;4337:22:13;;;;;;;4650:18:19;;4337:37:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4330:44;;4268:113;:::o;2486:149:12:-;1008:11:13;;-1:-1:-1;;;;;1008:11:13;2560:10:12;:35;2552:76;;;;-1:-1:-1;;;2552:76:12;;9805:2:19;2552:76:12;;;9787:21:19;9844:2;9824:18;;;9817:30;9883;9863:18;;;9856:58;9931:18;;2552:76:12;9603:352:19;2552:76:12;2486:149::o;3569:329:13:-;7389:34:9;3696:20:13;7376:48:9;;;7444:4;7437:18;;;7495:4;7479:21;;3801:30:13;3814:16;;;;:6;:16;:::i;:::-;3801:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3801:4:13;;:30;-1:-1:-1;;3801:12:13;:30;-1:-1:-1;3801:30:13:i;:::-;3792:5;;-1:-1:-1;;;;;3792:5:13;;;:39;;;3788:85;;756:1:12;3845:28:13;;;;;3788:85;3890:1;3883:8;;;3569:329;;;;;;:::o;3356:158::-;3456:6;:8;;3468:12;;;;;3456:8;;;;-1:-1:-1;;;;;3456:8:13;;:6;:8;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;3456:8:13;;;;;-1:-1:-1;;;;;3456:8:13;;;;;;-1:-1:-1;;;;;3456:24:13;;3448:59;;;;-1:-1:-1;;;3448:59:13;;10384:2:19;3448:59:13;;;10366:21:19;10423:2;10403:18;;;10396:30;-1:-1:-1;;;10442:18:19;;;10435:52;10504:18;;3448:59:13;10182:346:19;4641:337:12;4722:24;;4718:254;;4780:82;;4763:12;;4788:10;;-1:-1:-1;;4840:17:12;4813:19;;4763:12;4780:82;4763:12;4780:82;4813:19;4788:10;4840:17;4780:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3126:175:13;1008:11;;-1:-1:-1;;;;;1008:11:13;3199:10;:35;;:58;;-1:-1:-1;3252:5:13;;-1:-1:-1;;;;;3252:5:13;3238:10;:19;3199:58;3191:103;;;;-1:-1:-1;;;3191:103:13;;10735:2:19;3191:103:13;;;10717:21:19;;;10754:18;;;10747:30;10813:34;10793:18;;;10786:62;10865:18;;3191:103:13;10533:356:19;3904:287:13;3989:12;4003:19;4026:6;-1:-1:-1;;;;;4026:11:13;4046:5;4053:4;4026:32;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3988:70;;;;4073:7;4068:117;;4153:6;4147:13;4142:2;4134:6;4130:15;4123:38;4920:135;5036:12;:10;:12::i;2494:922:2:-;689:66;2910:48;;;2906:504;;;2974:37;2993:17;2974:18;:37::i;2906:504::-;3064:17;-1:-1:-1;;;;;3046:50:2;;:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3046:52:2;;;;;;;;-1:-1:-1;;3046:52:2;;;;;;;;;;;;:::i;:::-;;;3042:291;;3262:56;;-1:-1:-1;;;3262:56:2;;11832:2:19;3262:56:2;;;11814:21:19;11871:2;11851:18;;;11844:30;11910:34;11890:18;;;11883:62;-1:-1:-1;;;11961:18:19;;;11954:44;12015:19;;3262:56:2;11630:410:19;3042:291:2;-1:-1:-1;;;;;;;;;;;3148:28:2;;3140:82;;;;-1:-1:-1;;;3140:82:2;;12247:2:19;3140:82:2;;;12229:21:19;12286:2;12266:18;;;12259:30;12325:34;12305:18;;;12298:62;-1:-1:-1;;;12376:18:19;;;12369:39;12425:19;;3140:82:2;12045:405:19;3140:82:2;3099:138;3346:53;3364:17;3383:4;3389:9;3346:17;:53::i;2584:208:13:-;2675:5;:15;;-1:-1:-1;;;;;2675:15:13;;;-1:-1:-1;;;;;;2675:15:13;;;;;;;;2700:11;:26;;;;;;;;;;;;;;2741:44;;;;2675:5;;2741:44;2584:208;;:::o;1400:238::-;1580:5;;-1:-1:-1;;;;;1580:5:13;1566:10;:19;;:50;;-1:-1:-1;1589:10:13;1611:4;1589:27;1566:50;1558:73;;;;-1:-1:-1;;;1558:73:13;;12657:2:19;1558:73:13;;;12639:21:19;12696:2;12676:18;;;12669:30;-1:-1:-1;;;12715:18:19;;;12708:40;12765:18;;1558:73:13;12455:334:19;3661:227:9;3739:7;3759:17;3778:18;3800:27;3811:4;3817:9;3800:10;:27::i;:::-;3758:69;;;;3837:18;3849:5;3837:11;:18::i;:::-;-1:-1:-1;3872:9:9;3661:227;-1:-1:-1;;;3661:227:9:o;1406:259:2:-;-1:-1:-1;;;;;1702:19:6;;;1479:95:2;;;;-1:-1:-1;;;1479:95:2;;12996:2:19;1479:95:2;;;12978:21:19;13035:2;13015:18;;;13008:30;13074:34;13054:18;;;13047:62;-1:-1:-1;;;13125:18:19;;;13118:43;13178:19;;1479:95:2;12794:409:19;1479:95:2;-1:-1:-1;;;;;;;;;;;1584:74:2;;-1:-1:-1;;;;;;1584:74:2;-1:-1:-1;;;;;1584:74:2;;;;;;;;;;1406:259::o;2057:265::-;2165:29;2176:17;2165:10;:29::i;:::-;2222:1;2208:4;:11;:15;:28;;;;2227:9;2208:28;2204:112;;;2252:53;2281:17;2300:4;2252:28;:53::i;2145:730:9:-;2226:7;2235:12;2263:9;:16;2283:2;2263:22;2259:610;;2599:4;2584:20;;2578:27;2648:4;2633:20;;2627:27;2705:4;2690:20;;2684:27;2301:9;2676:36;2746:25;2757:4;2676:36;2578:27;2627;2746:10;:25::i;:::-;2739:32;;;;;;;;;2259:610;-1:-1:-1;2818:1:9;;-1:-1:-1;2822:35:9;2259:610;2145:730;;;;;:::o;570:511::-;647:20;638:5;:29;;;;;;;;:::i;:::-;;634:441;;570:511;:::o;634:441::-;743:29;734:5;:38;;;;;;;;:::i;:::-;;730:345;;788:34;;-1:-1:-1;;;788:34:9;;13542:2:19;788:34:9;;;13524:21:19;13581:2;13561:18;;;13554:30;13620:26;13600:18;;;13593:54;13664:18;;788:34:9;13340:348:19;730:345:9;852:35;843:5;:44;;;;;;;;:::i;:::-;;839:236;;903:41;;-1:-1:-1;;;903:41:9;;13895:2:19;903:41:9;;;13877:21:19;13934:2;13914:18;;;13907:30;13973:33;13953:18;;;13946:61;14024:18;;903:41:9;13693:355:19;839:236:9;974:30;965:5;:39;;;;;;;;:::i;:::-;;961:114;;1020:44;;-1:-1:-1;;;1020:44:9;;14255:2:19;1020:44:9;;;14237:21:19;14294:2;14274:18;;;14267:30;14333:34;14313:18;;;14306:62;-1:-1:-1;;;14384:18:19;;;14377:32;14426:19;;1020:44:9;14053:398:19;1771:152:2;1837:37;1856:17;1837:18;:37::i;:::-;1889:27;;-1:-1:-1;;;;;1889:27:2;;;;;;;;1771:152;:::o;6674:198:6:-;6757:12;6788:77;6809:6;6817:4;6788:77;;;;;;;;;;;;;;;;;:20;:77::i;5009:1456:9:-;5097:7;;6021:66;6008:79;;6004:161;;;-1:-1:-1;6119:1:9;;-1:-1:-1;6123:30:9;6103:51;;6004:161;6276:24;;;6259:14;6276:24;;;;;;;;;14683:25:19;;;14756:4;14744:17;;14724:18;;;14717:45;;;;14778:18;;;14771:34;;;14821:18;;;14814:34;;;6276:24:9;;14655:19:19;;6276:24:9;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6276:24:9;;-1:-1:-1;;6276:24:9;;;-1:-1:-1;;;;;;;6314:20:9;;6310:101;;6366:1;6370:29;6350:50;;;;;;;6310:101;6429:6;-1:-1:-1;6437:20:9;;-1:-1:-1;5009:1456:9;;;;;;;;:::o;7058:325:6:-;7199:12;7224;7238:23;7265:6;-1:-1:-1;;;;;7265:19:6;7285:4;7265:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7223:67;;;;7307:69;7334:6;7342:7;7351:10;7363:12;7307:26;:69::i;:::-;7300:76;7058:325;-1:-1:-1;;;;;;7058:325:6:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;-1:-1:-1;;;;;1702:19:6;;;8113:60;;;;-1:-1:-1;;;8113:60:6;;15061:2:19;8113:60:6;;;15043:21:19;15100:2;15080:18;;;15073:30;15139:31;15119:18;;;15112:59;15188:18;;8113:60:6;14859:353:19;8113:60:6;-1:-1:-1;8208:10:6;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;-1:-1:-1;;;9324:20:6;;;;;;;;:::i;14:131:19:-;-1:-1:-1;;;;;89:31:19;;79:42;;69:70;;135:1;132;125:12;150:665;269:6;277;285;293;346:3;334:9;325:7;321:23;317:33;314:53;;;363:1;360;353:12;314:53;403:9;390:23;436:18;428:6;425:30;422:50;;;468:1;465;458:12;422:50;491:22;;547:3;529:16;;;525:26;522:46;;;564:1;561;554:12;522:46;587:2;-1:-1:-1;636:2:19;621:18;;608:32;;-1:-1:-1;690:2:19;675:18;;662:32;703:31;662:32;703:31;:::i;:::-;150:665;;;;-1:-1:-1;753:5:19;;805:2;790:18;777:32;;-1:-1:-1;;150:665:19:o;1002:367::-;1065:8;1075:6;1129:3;1122:4;1114:6;1110:17;1106:27;1096:55;;1147:1;1144;1137:12;1096:55;-1:-1:-1;1170:20:19;;1213:18;1202:30;;1199:50;;;1245:1;1242;1235:12;1199:50;1282:4;1274:6;1270:17;1258:29;;1342:3;1335:4;1325:6;1322:1;1318:14;1310:6;1306:27;1302:38;1299:47;1296:67;;;1359:1;1356;1349:12;1374:784;1507:6;1515;1523;1531;1584:2;1572:9;1563:7;1559:23;1555:32;1552:52;;;1600:1;1597;1590:12;1552:52;1640:9;1627:23;1669:18;1710:2;1702:6;1699:14;1696:34;;;1726:1;1723;1716:12;1696:34;1765:70;1827:7;1818:6;1807:9;1803:22;1765:70;:::i;:::-;1854:8;;-1:-1:-1;1739:96:19;-1:-1:-1;1942:2:19;1927:18;;1914:32;;-1:-1:-1;1958:16:19;;;1955:36;;;1987:1;1984;1977:12;1955:36;;2026:72;2090:7;2079:8;2068:9;2064:24;2026:72;:::i;:::-;1374:784;;;;-1:-1:-1;2117:8:19;-1:-1:-1;;;;1374:784:19:o;2163:247::-;2222:6;2275:2;2263:9;2254:7;2250:23;2246:32;2243:52;;;2291:1;2288;2281:12;2243:52;2330:9;2317:23;2349:31;2374:5;2349:31;:::i;2415:408::-;2503:6;2511;2564:2;2552:9;2543:7;2539:23;2535:32;2532:52;;;2580:1;2577;2570:12;2532:52;2619:9;2606:23;2638:31;2663:5;2638:31;:::i;:::-;2688:5;-1:-1:-1;2745:2:19;2730:18;;2717:32;2758:33;2717:32;2758:33;:::i;:::-;2810:7;2800:17;;;2415:408;;;;;:::o;2828:323::-;2904:6;2912;2965:2;2953:9;2944:7;2940:23;2936:32;2933:52;;;2981:1;2978;2971:12;2933:52;3020:9;3007:23;3039:31;3064:5;3039:31;:::i;:::-;3089:5;3141:2;3126:18;;;;3113:32;;-1:-1:-1;;;2828:323:19:o;3156:127::-;3217:10;3212:3;3208:20;3205:1;3198:31;3248:4;3245:1;3238:15;3272:4;3269:1;3262:15;3288:1056;3365:6;3373;3426:2;3414:9;3405:7;3401:23;3397:32;3394:52;;;3442:1;3439;3432:12;3394:52;3481:9;3468:23;3500:31;3525:5;3500:31;:::i;:::-;3550:5;-1:-1:-1;3606:2:19;3591:18;;3578:32;3629:18;3659:14;;;3656:34;;;3686:1;3683;3676:12;3656:34;3724:6;3713:9;3709:22;3699:32;;3769:7;3762:4;3758:2;3754:13;3750:27;3740:55;;3791:1;3788;3781:12;3740:55;3827:2;3814:16;3849:2;3845;3842:10;3839:36;;;3855:18;;:::i;:::-;3930:2;3924:9;3898:2;3984:13;;-1:-1:-1;;3980:22:19;;;4004:2;3976:31;3972:40;3960:53;;;4028:18;;;4048:22;;;4025:46;4022:72;;;4074:18;;:::i;:::-;4114:10;4110:2;4103:22;4149:2;4141:6;4134:18;4189:7;4184:2;4179;4175;4171:11;4167:20;4164:33;4161:53;;;4210:1;4207;4200:12;4161:53;4266:2;4261;4257;4253:11;4248:2;4240:6;4236:15;4223:46;4311:1;4306:2;4301;4293:6;4289:15;4285:24;4278:35;4332:6;4322:16;;;;;;;3288:1056;;;;;:::o;4967:794::-;5055:6;5063;5071;5079;5132:2;5120:9;5111:7;5107:23;5103:32;5100:52;;;5148:1;5145;5138:12;5100:52;5187:9;5174:23;5206:31;5231:5;5206:31;:::i;:::-;5256:5;-1:-1:-1;5308:2:19;5293:18;;5280:32;;-1:-1:-1;5363:2:19;5348:18;;5335:32;5386:18;5416:14;;;5413:34;;;5443:1;5440;5433:12;5413:34;5481:6;5470:9;5466:22;5456:32;;5526:7;5519:4;5515:2;5511:13;5507:27;5497:55;;5548:1;5545;5538:12;5497:55;5588:2;5575:16;5614:2;5606:6;5603:14;5600:34;;;5630:1;5627;5620:12;5600:34;5675:7;5670:2;5661:6;5657:2;5653:15;5649:24;5646:37;5643:57;;;5696:1;5693;5686:12;5643:57;4967:794;;;;-1:-1:-1;;5727:2:19;5719:11;;-1:-1:-1;;;4967:794:19:o;5766:521::-;5843:4;5849:6;5909:11;5896:25;6003:2;5999:7;5988:8;5972:14;5968:29;5964:43;5944:18;5940:68;5930:96;;6022:1;6019;6012:12;5930:96;6049:33;;6101:20;;;-1:-1:-1;6144:18:19;6133:30;;6130:50;;;6176:1;6173;6166:12;6130:50;6209:4;6197:17;;-1:-1:-1;6240:14:19;6236:27;;;6226:38;;6223:58;;;6277:1;6274;6267:12;6640:127;6701:10;6696:3;6692:20;6689:1;6682:31;6732:4;6729:1;6722:15;6756:4;6753:1;6746:15;6772:127;6833:10;6828:3;6824:20;6821:1;6814:31;6864:4;6861:1;6854:15;6888:4;6885:1;6878:15;6904:135;6943:3;6964:17;;;6961:43;;6984:18;;:::i;:::-;-1:-1:-1;7031:1:19;7020:13;;6904:135::o;7044:408::-;7246:2;7228:21;;;7285:2;7265:18;;;7258:30;7324:34;7319:2;7304:18;;7297:62;-1:-1:-1;;;7390:2:19;7375:18;;7368:42;7442:3;7427:19;;7044:408::o;7457:::-;7659:2;7641:21;;;7698:2;7678:18;;;7671:30;7737:34;7732:2;7717:18;;7710:62;-1:-1:-1;;;7803:2:19;7788:18;;7781:42;7855:3;7840:19;;7457:408::o;9414:184::-;9484:6;9537:2;9525:9;9516:7;9512:23;9508:32;9505:52;;;9553:1;9550;9543:12;9505:52;-1:-1:-1;9576:16:19;;9414:184;-1:-1:-1;9414:184:19:o;9960:217::-;9998:3;-1:-1:-1;;;;;10087:2:19;10080:5;10076:14;10114:2;10105:7;10102:15;10099:41;;10120:18;;:::i;:::-;10169:1;10156:15;;9960:217;-1:-1:-1;;;9960:217:19:o;10894:250::-;10979:1;10989:113;11003:6;11000:1;10997:13;10989:113;;;11079:11;;;11073:18;11060:11;;;11053:39;11025:2;11018:10;10989:113;;;-1:-1:-1;;11136:1:19;11118:16;;11111:27;10894:250::o;11149:287::-;11278:3;11316:6;11310:13;11332:66;11391:6;11386:3;11379:4;11371:6;11367:17;11332:66;:::i;:::-;11414:16;;;;;11149:287;-1:-1:-1;;11149:287:19:o;13208:127::-;13269:10;13264:3;13260:20;13257:1;13250:31;13300:4;13297:1;13290:15;13324:4;13321:1;13314:15;15217:396;15366:2;15355:9;15348:21;15329:4;15398:6;15392:13;15441:6;15436:2;15425:9;15421:18;15414:34;15457:79;15529:6;15524:2;15513:9;15509:18;15504:2;15496:6;15492:15;15457:79;:::i;:::-;15597:2;15576:15;-1:-1:-1;;15572:29:19;15557:45;;;;15604:2;15553:54;;15217:396;-1:-1:-1;;15217:396:19:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1228000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"addDeposit()": "infinite",
								"entryPoint()": "2375",
								"execute(address,uint256,bytes)": "infinite",
								"executeBatch(address[],bytes[])": "infinite",
								"getDeposit()": "infinite",
								"initialize(address,address)": "infinite",
								"nonce()": "2332",
								"owner()": "2404",
								"proxiableUUID()": "infinite",
								"upgradeTo(address)": "infinite",
								"upgradeToAndCall(address,bytes)": "infinite",
								"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)": "infinite",
								"withdrawDepositTo(address,uint256)": "infinite"
							},
							"internal": {
								"_authorizeUpgrade(address)": "infinite",
								"_call(address,uint256,bytes memory)": "infinite",
								"_initialize(address,contract IEntryPoint)": "50048",
								"_onlyOwner()": "infinite",
								"_requireFromEntryPointOrOwner()": "infinite",
								"_validateAndUpdateNonce(struct UserOperation calldata)": "infinite",
								"_validateSignature(struct UserOperation calldata,bytes32,address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 585,
									"end": 5057,
									"name": "PUSH",
									"source": 13,
									"value": "A0"
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1088,
									"end": 1092,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 1045,
									"end": 1093,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 1045,
									"end": 1093,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "CALLVALUE",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "PUSHSIZE",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "CODESIZE",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "PUSHSIZE",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 1246,
									"end": 1327,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "tag",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 1246,
									"end": 1327,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1294,
									"end": 1305,
									"name": "PUSH",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "AND",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1294,
									"end": 1320,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "7"
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 14,
									"end": 324,
									"name": "tag",
									"source": 19,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 324,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 104,
									"end": 110,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 157,
									"end": 159,
									"name": "PUSH",
									"source": 19,
									"value": "20"
								},
								{
									"begin": 145,
									"end": 154,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 136,
									"end": 143,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 132,
									"end": 155,
									"name": "SUB",
									"source": 19
								},
								{
									"begin": 128,
									"end": 160,
									"name": "SLT",
									"source": 19
								},
								{
									"begin": 125,
									"end": 177,
									"name": "ISZERO",
									"source": 19
								},
								{
									"begin": 125,
									"end": 177,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "9"
								},
								{
									"begin": 125,
									"end": 177,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 173,
									"end": 174,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 170,
									"end": 171,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 163,
									"end": 175,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 125,
									"end": 177,
									"name": "tag",
									"source": 19,
									"value": "9"
								},
								{
									"begin": 125,
									"end": 177,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 199,
									"end": 215,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 199,
									"end": 215,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 244,
									"end": 275,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 244,
									"end": 275,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 234,
									"end": 276,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 234,
									"end": 276,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 224,
									"end": 294,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "10"
								},
								{
									"begin": 224,
									"end": 294,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 287,
									"end": 288,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 280,
									"end": 292,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 224,
									"end": 294,
									"name": "tag",
									"source": 19,
									"value": "10"
								},
								{
									"begin": 224,
									"end": 294,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 313,
									"end": 318,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 14,
									"end": 324,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 324,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 14,
									"end": 324,
									"name": "tag",
									"source": 19,
									"value": "7"
								},
								{
									"begin": 14,
									"end": 324,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "ASSIGNIMMUTABLE",
									"source": 13,
									"value": "529"
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 585,
									"end": 5057,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205bbbca6dc477817fca3ad86f4a99ec370a0d53a12f9258e93656372a7c1db3a264736f6c63430008120033",
									".code": [
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "4F1EF286"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "16"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "AFFED0E0"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "AFFED0E0"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "B0D691FE"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "13"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "B61D27F6"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "C399EC88"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "tag",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "4F1EF286"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "9"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "52D1902D"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "8DA5CB5B"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "tag",
											"source": 13,
											"value": "16"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "825D1FC"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "18DFB3C7"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "3659CFE6"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "485CC955"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "4A58DB19"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "4D44560D"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "8"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "tag",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "STOP",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "tag",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 585,
											"end": 5057,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "tag",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "tag",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 1964,
											"end": 2405,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "tag",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1964,
											"end": 2405,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "tag",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 966,
											"end": 991,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 966,
											"end": 991,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 966,
											"end": 991,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 954,
											"end": 956,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 939,
											"end": 957,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "tag",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "tag",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "tag",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "30"
										},
										{
											"begin": 1958,
											"end": 2255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "tag",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 1958,
											"end": 2255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "tag",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "STOP",
											"source": 13
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "tag",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "34"
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 3143,
											"end": 3338,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "tag",
											"source": 5,
											"value": "34"
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 3143,
											"end": 3338,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "tag",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "37"
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "tag",
											"source": 13,
											"value": "37"
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "39"
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2437,
											"end": 2578,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "tag",
											"source": 13,
											"value": "39"
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 2437,
											"end": 2578,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4464,
											"end": 4604,
											"name": "tag",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 4464,
											"end": 4604,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4464,
											"end": 4604,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 4464,
											"end": 4604,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "43"
										},
										{
											"begin": 4464,
											"end": 4604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "tag",
											"source": 13,
											"value": "8"
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "tag",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "46"
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "47"
										},
										{
											"begin": 4756,
											"end": 4914,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "tag",
											"source": 13,
											"value": "46"
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "48"
										},
										{
											"begin": 4756,
											"end": 4914,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "tag",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "50"
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "51"
										},
										{
											"begin": 3657,
											"end": 3877,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "tag",
											"source": 5,
											"value": "50"
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "52"
										},
										{
											"begin": 3657,
											"end": 3877,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "tag",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 2762,
											"end": 2893,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 791,
											"end": 811,
											"name": "tag",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 791,
											"end": 811,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 791,
											"end": 811,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 791,
											"end": 811,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 791,
											"end": 811,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 791,
											"end": 811,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "58"
										},
										{
											"begin": 791,
											"end": 811,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 791,
											"end": 811,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 791,
											"end": 811,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 791,
											"end": 811,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 791,
											"end": 811,
											"name": "tag",
											"source": 13,
											"value": "58"
										},
										{
											"begin": 791,
											"end": 811,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 791,
											"end": 811,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 791,
											"end": 811,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 791,
											"end": 811,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "59"
										},
										{
											"begin": 791,
											"end": 811,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 791,
											"end": 811,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 791,
											"end": 811,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 791,
											"end": 811,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 791,
											"end": 811,
											"name": "tag",
											"source": 13,
											"value": "59"
										},
										{
											"begin": 791,
											"end": 811,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 791,
											"end": 811,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 791,
											"end": 811,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4695,
											"end": 4727,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 4695,
											"end": 4727,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 4695,
											"end": 4727,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 4677,
											"end": 4728,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 4677,
											"end": 4728,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4665,
											"end": 4667,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 4650,
											"end": 4668,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 791,
											"end": 811,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 4531,
											"end": 4734,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 818,
											"end": 912,
											"name": "tag",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 818,
											"end": 912,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 818,
											"end": 912,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 818,
											"end": 912,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 818,
											"end": 912,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 818,
											"end": 912,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "63"
										},
										{
											"begin": 818,
											"end": 912,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 818,
											"end": 912,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 818,
											"end": 912,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 818,
											"end": 912,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 818,
											"end": 912,
											"name": "tag",
											"source": 13,
											"value": "63"
										},
										{
											"begin": 818,
											"end": 912,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 873,
											"end": 880,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 899,
											"end": 905,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 899,
											"end": 905,
											"name": "PUSH",
											"source": 13,
											"value": "10000"
										},
										{
											"begin": 899,
											"end": 905,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 899,
											"end": 905,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 899,
											"end": 905,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 818,
											"end": 912,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 818,
											"end": 912,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "tag",
											"source": 13,
											"value": "13"
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "67"
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "tag",
											"source": 13,
											"value": "67"
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "59"
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "tag",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "72"
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "tag",
											"source": 13,
											"value": "72"
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "75"
										},
										{
											"begin": 1737,
											"end": 1895,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "tag",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "76"
										},
										{
											"begin": 1737,
											"end": 1895,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "tag",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "77"
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "tag",
											"source": 13,
											"value": "77"
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "79"
										},
										{
											"begin": 4268,
											"end": 4381,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "tag",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2159,
											"end": 2183,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "82"
										},
										{
											"begin": 2159,
											"end": 2181,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 2159,
											"end": 2183,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2159,
											"end": 2183,
											"name": "tag",
											"source": 12,
											"value": "82"
										},
										{
											"begin": 2159,
											"end": 2183,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2208,
											"end": 2258,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 2227,
											"end": 2233,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2235,
											"end": 2245,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2247,
											"end": 2257,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2208,
											"end": 2226,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "85"
										},
										{
											"begin": 2208,
											"end": 2258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2208,
											"end": 2258,
											"name": "tag",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 2208,
											"end": 2258,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2193,
											"end": 2258,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2272,
											"end": 2287,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 2272,
											"end": 2287,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2272,
											"end": 2287,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2272,
											"end": 2287,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2272,
											"end": 2278,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2272,
											"end": 2287,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 2272,
											"end": 2287,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2272,
											"end": 2287,
											"name": "tag",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 2272,
											"end": 2287,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2272,
											"end": 2294,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2272,
											"end": 2294,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2298,
											"end": 2299,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2272,
											"end": 2299,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2268,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 2268,
											"end": 2357,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2315,
											"end": 2346,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 2339,
											"end": 2345,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2315,
											"end": 2338,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 2315,
											"end": 2346,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2315,
											"end": 2346,
											"name": "tag",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 2315,
											"end": 2346,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2366,
											"end": 2398,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 2378,
											"end": 2397,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2366,
											"end": 2377,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "92"
										},
										{
											"begin": 2366,
											"end": 2398,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2366,
											"end": 2398,
											"name": "tag",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 2366,
											"end": 2398,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1964,
											"end": 2405,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "tag",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2047,
											"end": 2078,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "94"
										},
										{
											"begin": 2047,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "95"
										},
										{
											"begin": 2047,
											"end": 2078,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2047,
											"end": 2078,
											"name": "tag",
											"source": 13,
											"value": "94"
										},
										{
											"begin": 2047,
											"end": 2078,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2096,
											"end": 2122,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2096,
											"end": 2122,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2096,
											"end": 2122,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "96"
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6494,
											"end": 6496,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6476,
											"end": 6497,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6533,
											"end": 6535,
											"name": "PUSH",
											"source": 19,
											"value": "13"
										},
										{
											"begin": 6513,
											"end": 6531,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 6513,
											"end": 6531,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6513,
											"end": 6531,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6506,
											"end": 6536,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "77726F6E67206172726179206C656E67746873"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6552,
											"end": 6570,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 6552,
											"end": 6570,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6552,
											"end": 6570,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6545,
											"end": 6594,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6611,
											"end": 6629,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 6611,
											"end": 6629,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "tag",
											"source": 13,
											"value": "97"
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "tag",
											"source": 13,
											"value": "96"
										},
										{
											"begin": 2088,
											"end": 2146,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2161,
											"end": 2170,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2156,
											"end": 2249,
											"name": "tag",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 2156,
											"end": 2249,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2176,
											"end": 2191,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2176,
											"end": 2191,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2176,
											"end": 2191,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2156,
											"end": 2249,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2156,
											"end": 2249,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 2156,
											"end": 2249,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "102"
										},
										{
											"begin": 2218,
											"end": 2222,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2222,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2223,
											"end": 2224,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "104"
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "104"
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "105"
										},
										{
											"begin": 2218,
											"end": 2225,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "tag",
											"source": 13,
											"value": "104"
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "106"
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "35"
										},
										{
											"begin": 2218,
											"end": 2225,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "tag",
											"source": 13,
											"value": "106"
										},
										{
											"begin": 2218,
											"end": 2225,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2227,
											"end": 2228,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2230,
											"end": 2234,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2234,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2235,
											"end": 2236,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "108"
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "108"
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "105"
										},
										{
											"begin": 2230,
											"end": 2237,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "tag",
											"source": 13,
											"value": "108"
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "87"
										},
										{
											"begin": 2230,
											"end": 2237,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "tag",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "CALLDATACOPY",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2212,
											"end": 2217,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "110"
										},
										{
											"begin": 2212,
											"end": 2217,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2212,
											"end": 2238,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "tag",
											"source": 13,
											"value": "102"
										},
										{
											"begin": 2212,
											"end": 2238,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2193,
											"end": 2196,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2193,
											"end": 2196,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "111"
										},
										{
											"begin": 2193,
											"end": 2196,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2193,
											"end": 2196,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "112"
										},
										{
											"begin": 2193,
											"end": 2196,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2193,
											"end": 2196,
											"name": "tag",
											"source": 13,
											"value": "111"
										},
										{
											"begin": 2193,
											"end": 2196,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2193,
											"end": 2196,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2193,
											"end": 2196,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2193,
											"end": 2196,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2156,
											"end": 2249,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 2156,
											"end": 2249,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2156,
											"end": 2249,
											"name": "tag",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 2156,
											"end": 2249,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2156,
											"end": 2249,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 2255,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "tag",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1654,
											"end": 1660,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "529"
										},
										{
											"begin": 1637,
											"end": 1660,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1645,
											"end": 1649,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1637,
											"end": 1660,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 1629,
											"end": 1709,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "tag",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1751,
											"end": 1757,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "529"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1727,
											"end": 1757,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1727,
											"end": 1747,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "117"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1254,
											"end": 1308,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1254,
											"end": 1308,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1254,
											"end": 1308,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1175,
											"end": 1315,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1727,
											"end": 1747,
											"name": "tag",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 1727,
											"end": 1747,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1727,
											"end": 1757,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1727,
											"end": 1757,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 1719,
											"end": 1806,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "tag",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3224,
											"end": 3260,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "123"
										},
										{
											"begin": 3242,
											"end": 3259,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3224,
											"end": 3241,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 3224,
											"end": 3260,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3224,
											"end": 3260,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "123"
										},
										{
											"begin": 3224,
											"end": 3260,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3311,
											"end": 3323,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3311,
											"end": 3323,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3311,
											"end": 3323,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3321,
											"end": 3322,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3311,
											"end": 3323,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3311,
											"end": 3323,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3311,
											"end": 3323,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3311,
											"end": 3323,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3311,
											"end": 3323,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3311,
											"end": 3323,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3311,
											"end": 3323,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3311,
											"end": 3323,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3311,
											"end": 3323,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3270,
											"end": 3331,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 3270,
											"end": 3331,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3292,
											"end": 3309,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3292,
											"end": 3309,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3311,
											"end": 3323,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3270,
											"end": 3291,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 3270,
											"end": 3331,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3270,
											"end": 3331,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 3270,
											"end": 3331,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3143,
											"end": 3338,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3143,
											"end": 3338,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "tag",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3268,
											"end": 3287,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3290,
											"end": 3304,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3290,
											"end": 3304,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3369,
											"end": 3370,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3354,
											"end": 3370,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "tag",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3335,
											"end": 3432,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3335,
											"end": 3432,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 3335,
											"end": 3432,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3404,
											"end": 3408,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "EXTCODESIZE",
											"source": 6
										},
										{
											"begin": 1702,
											"end": 1725,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1702,
											"end": 1725,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1702,
											"end": 1725,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3376,
											"end": 3431,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 3376,
											"end": 3431,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3414,
											"end": 3426,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3414,
											"end": 3426,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3414,
											"end": 3426,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 3414,
											"end": 3426,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3414,
											"end": 3426,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3414,
											"end": 3431,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 3376,
											"end": 3431,
											"name": "tag",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 3376,
											"end": 3431,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3314,
											"end": 3504,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 3314,
											"end": 3504,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3314,
											"end": 3504,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3314,
											"end": 3504,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3314,
											"end": 3504,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3314,
											"end": 3504,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8072,
											"end": 8074,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3314,
											"end": 3504,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3314,
											"end": 3504,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3314,
											"end": 3504,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8054,
											"end": 8075,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 8111,
											"end": 8113,
											"name": "PUSH",
											"source": 19,
											"value": "2E"
										},
										{
											"begin": 8091,
											"end": 8109,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 8091,
											"end": 8109,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8091,
											"end": 8109,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8084,
											"end": 8114,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 8150,
											"end": 8184,
											"name": "PUSH",
											"source": 19,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 8130,
											"end": 8148,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 8130,
											"end": 8148,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8130,
											"end": 8148,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8123,
											"end": 8185,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8201,
											"end": 8219,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 8201,
											"end": 8219,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8201,
											"end": 8219,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8194,
											"end": 8238,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 8255,
											"end": 8274,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 8255,
											"end": 8274,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3314,
											"end": 3504,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 7870,
											"end": 8280,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3314,
											"end": 3504,
											"name": "tag",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 3314,
											"end": 3504,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3514,
											"end": 3526,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3514,
											"end": 3530,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3514,
											"end": 3530,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3514,
											"end": 3530,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3529,
											"end": 3530,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3514,
											"end": 3530,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 3514,
											"end": 3530,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3514,
											"end": 3530,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 3540,
											"end": 3605,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3540,
											"end": 3605,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3540,
											"end": 3605,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 3540,
											"end": 3605,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3574,
											"end": 3587,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3574,
											"end": 3594,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3574,
											"end": 3594,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3574,
											"end": 3594,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3574,
											"end": 3594,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 3574,
											"end": 3594,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 3574,
											"end": 3594,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3574,
											"end": 3594,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 3540,
											"end": 3605,
											"name": "tag",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 3540,
											"end": 3605,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2537,
											"end": 2571,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "142"
										},
										{
											"begin": 2549,
											"end": 2556,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2558,
											"end": 2570,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2537,
											"end": 2548,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "143"
										},
										{
											"begin": 2537,
											"end": 2571,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2537,
											"end": 2571,
											"modifierDepth": 1,
											"name": "tag",
											"source": 13,
											"value": "142"
										},
										{
											"begin": 2537,
											"end": 2571,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3629,
											"end": 3643,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3625,
											"end": 3724,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3625,
											"end": 3724,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 3625,
											"end": 3724,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3675,
											"end": 3680,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3659,
											"end": 3680,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3659,
											"end": 3680,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3659,
											"end": 3680,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3659,
											"end": 3680,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3659,
											"end": 3680,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 3699,
											"end": 3713,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3699,
											"end": 3713,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 8437,
											"end": 8473,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 8437,
											"end": 8473,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3699,
											"end": 3713,
											"name": "PUSH",
											"source": 4,
											"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
										},
										{
											"begin": 3699,
											"end": 3713,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8425,
											"end": 8427,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 8410,
											"end": 8428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3699,
											"end": 3713,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3699,
											"end": 3713,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3699,
											"end": 3713,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3699,
											"end": 3713,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3699,
											"end": 3713,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3699,
											"end": 3713,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3699,
											"end": 3713,
											"name": "LOG1",
											"source": 4
										},
										{
											"begin": 3625,
											"end": 3724,
											"name": "tag",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 3625,
											"end": 3724,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3258,
											"end": 3730,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2437,
											"end": 2578,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2437,
											"end": 2578,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4464,
											"end": 4604,
											"name": "tag",
											"source": 13,
											"value": "43"
										},
										{
											"begin": 4464,
											"end": 4604,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4513,
											"end": 4521,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4534,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "148"
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4534,
											"end": 4546,
											"name": "tag",
											"source": 13,
											"value": "148"
										},
										{
											"begin": 4534,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4526,
											"end": 4552,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4561,
											"end": 4570,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "153"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH",
											"source": 13,
											"value": "3F"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "152"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "tag",
											"source": 13,
											"value": "153"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "tag",
											"source": 13,
											"value": "152"
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4526,
											"end": 4575,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4512,
											"end": 4575,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4512,
											"end": 4575,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4512,
											"end": 4575,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4593,
											"end": 4596,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4585,
											"end": 4597,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "125"
										},
										{
											"begin": 4585,
											"end": 4597,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4585,
											"end": 4597,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4585,
											"end": 4597,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4585,
											"end": 4597,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "tag",
											"source": 13,
											"value": "48"
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1364,
											"end": 1376,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "156"
										},
										{
											"begin": 1364,
											"end": 1374,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "157"
										},
										{
											"begin": 1364,
											"end": 1376,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1364,
											"end": 1376,
											"name": "tag",
											"source": 13,
											"value": "156"
										},
										{
											"begin": 1364,
											"end": 1376,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4859,
											"end": 4907,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40B850F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4859,
											"end": 4907,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8902,
											"end": 8934,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 8902,
											"end": 8934,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 8902,
											"end": 8934,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4859,
											"end": 4907,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8884,
											"end": 8935,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 8951,
											"end": 8969,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 8951,
											"end": 8969,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8951,
											"end": 8969,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8944,
											"end": 8978,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 8944,
											"end": 8978,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 8944,
											"end": 8978,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4859,
											"end": 4882,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4882,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4882,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4882,
											"modifierDepth": 1,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4882,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4882,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 13,
											"value": "205C2878"
										},
										{
											"begin": 4859,
											"end": 4882,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8857,
											"end": 8875,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 8857,
											"end": 8875,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "162"
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4859,
											"end": 4907,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "tag",
											"source": 13,
											"value": "162"
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "164"
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4859,
											"end": 4907,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "tag",
											"source": 13,
											"value": "164"
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4859,
											"end": 4907,
											"modifierDepth": 1,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4756,
											"end": 4914,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "tag",
											"source": 5,
											"value": "52"
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1654,
											"end": 1660,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "529"
										},
										{
											"begin": 1637,
											"end": 1660,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1645,
											"end": 1649,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1637,
											"end": 1660,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "166"
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 1629,
											"end": 1709,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "tag",
											"source": 5,
											"value": "166"
										},
										{
											"begin": 1629,
											"end": 1709,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1751,
											"end": 1757,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "529"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1727,
											"end": 1757,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1727,
											"end": 1747,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "168"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1254,
											"end": 1308,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1254,
											"end": 1308,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1254,
											"end": 1308,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1175,
											"end": 1315,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1727,
											"end": 1747,
											"name": "tag",
											"source": 5,
											"value": "168"
										},
										{
											"begin": 1727,
											"end": 1747,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1727,
											"end": 1757,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1727,
											"end": 1757,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "169"
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 1719,
											"end": 1806,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "tag",
											"source": 5,
											"value": "169"
										},
										{
											"begin": 1719,
											"end": 1806,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3772,
											"end": 3808,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "172"
										},
										{
											"begin": 3790,
											"end": 3807,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3772,
											"end": 3789,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 3772,
											"end": 3808,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3772,
											"end": 3808,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "172"
										},
										{
											"begin": 3772,
											"end": 3808,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3818,
											"end": 3870,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "173"
										},
										{
											"begin": 3840,
											"end": 3857,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3859,
											"end": 3863,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3865,
											"end": 3869,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 3818,
											"end": 3839,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 3818,
											"end": 3870,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3818,
											"end": 3870,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "173"
										},
										{
											"begin": 3818,
											"end": 3870,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3657,
											"end": 3877,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3657,
											"end": 3877,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "tag",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2840,
											"end": 2847,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2080,
											"end": 2084,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2089,
											"end": 2095,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "529"
										},
										{
											"begin": 2072,
											"end": 2095,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2072,
											"end": 2095,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 2064,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "175"
										},
										{
											"begin": 2064,
											"end": 2156,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2064,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2064,
											"end": 2156,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2064,
											"end": 2156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2064,
											"end": 2156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9191,
											"end": 9193,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2064,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2064,
											"end": 2156,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2064,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9173,
											"end": 9194,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9230,
											"end": 9232,
											"name": "PUSH",
											"source": 19,
											"value": "38"
										},
										{
											"begin": 9210,
											"end": 9228,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 9210,
											"end": 9228,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9210,
											"end": 9228,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9203,
											"end": 9233,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9269,
											"end": 9303,
											"name": "PUSH",
											"source": 19,
											"value": "555550535570677261646561626C653A206D757374206E6F742062652063616C"
										},
										{
											"begin": 9249,
											"end": 9267,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 9249,
											"end": 9267,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9249,
											"end": 9267,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9242,
											"end": 9304,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9340,
											"end": 9366,
											"name": "PUSH",
											"source": 19,
											"value": "6C6564207468726F7567682064656C656761746563616C6C0000000000000000"
										},
										{
											"begin": 9320,
											"end": 9338,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 9320,
											"end": 9338,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9320,
											"end": 9338,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9313,
											"end": 9367,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9384,
											"end": 9403,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 9384,
											"end": 9403,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2064,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 8989,
											"end": 9409,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2064,
											"end": 2156,
											"name": "tag",
											"source": 5,
											"value": "175"
										},
										{
											"begin": 2064,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2762,
											"end": 2893,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2762,
											"end": 2893,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "tag",
											"source": 13,
											"value": "76"
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1823,
											"end": 1854,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "182"
										},
										{
											"begin": 1823,
											"end": 1852,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "95"
										},
										{
											"begin": 1823,
											"end": 1854,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1823,
											"end": 1854,
											"name": "tag",
											"source": 13,
											"value": "182"
										},
										{
											"begin": 1823,
											"end": 1854,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "183"
										},
										{
											"begin": 1870,
											"end": 1874,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1876,
											"end": 1881,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1883,
											"end": 1887,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1883,
											"end": 1887,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "CALLDATACOPY",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1864,
											"end": 1869,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "110"
										},
										{
											"begin": 1864,
											"end": 1869,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1864,
											"end": 1888,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "tag",
											"source": 13,
											"value": "183"
										},
										{
											"begin": 1864,
											"end": 1888,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1737,
											"end": 1895,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "tag",
											"source": 13,
											"value": "79"
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4311,
											"end": 4318,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "185"
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 918,
											"end": 1026,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "tag",
											"source": 13,
											"value": "185"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4368,
											"end": 4372,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4677,
											"end": 4728,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4337,
											"end": 4359,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4359,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4359,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4359,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4359,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4359,
											"name": "PUSH",
											"source": 13,
											"value": "70A08231"
										},
										{
											"begin": 4337,
											"end": 4359,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4650,
											"end": 4668,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 4650,
											"end": 4668,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "STATICCALL",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "188"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "tag",
											"source": 13,
											"value": "188"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "189"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "190"
										},
										{
											"begin": 4337,
											"end": 4374,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "tag",
											"source": 13,
											"value": "189"
										},
										{
											"begin": 4337,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4330,
											"end": 4374,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4330,
											"end": 4374,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4268,
											"end": 4381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2486,
											"end": 2635,
											"name": "tag",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 2486,
											"end": 2635,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2560,
											"end": 2570,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 2560,
											"end": 2595,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 2552,
											"end": 2628,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "193"
										},
										{
											"begin": 2552,
											"end": 2628,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2552,
											"end": 2628,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2552,
											"end": 2628,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2552,
											"end": 2628,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2552,
											"end": 2628,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9805,
											"end": 9807,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2552,
											"end": 2628,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2552,
											"end": 2628,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2552,
											"end": 2628,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9808,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9844,
											"end": 9846,
											"name": "PUSH",
											"source": 19,
											"value": "1C"
										},
										{
											"begin": 9824,
											"end": 9842,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 9824,
											"end": 9842,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9824,
											"end": 9842,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9817,
											"end": 9847,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9883,
											"end": 9913,
											"name": "PUSH",
											"source": 19,
											"value": "6163636F756E743A206E6F742066726F6D20456E747279506F696E7400000000"
										},
										{
											"begin": 9863,
											"end": 9881,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 9863,
											"end": 9881,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9863,
											"end": 9881,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9856,
											"end": 9914,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9931,
											"end": 9949,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 9931,
											"end": 9949,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2552,
											"end": 2628,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 9603,
											"end": 9955,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2552,
											"end": 2628,
											"name": "tag",
											"source": 12,
											"value": "193"
										},
										{
											"begin": 2552,
											"end": 2628,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2486,
											"end": 2635,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3569,
											"end": 3898,
											"name": "tag",
											"source": 13,
											"value": "85"
										},
										{
											"begin": 3569,
											"end": 3898,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7389,
											"end": 7423,
											"name": "PUSH",
											"source": 9,
											"value": "19457468657265756D205369676E6564204D6573736167653A0A333200000000"
										},
										{
											"begin": 3696,
											"end": 3716,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7376,
											"end": 7424,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7376,
											"end": 7424,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7376,
											"end": 7424,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7444,
											"end": 7448,
											"name": "PUSH",
											"source": 9,
											"value": "1C"
										},
										{
											"begin": 7437,
											"end": 7455,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7437,
											"end": 7455,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7437,
											"end": 7455,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7495,
											"end": 7499,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 7479,
											"end": 7500,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7479,
											"end": 7500,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "199"
										},
										{
											"begin": 3814,
											"end": 3830,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "200"
										},
										{
											"begin": 3814,
											"end": 3830,
											"name": "PUSH",
											"source": 13,
											"value": "140"
										},
										{
											"begin": 3814,
											"end": 3830,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3814,
											"end": 3830,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3814,
											"end": 3820,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3814,
											"end": 3830,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "87"
										},
										{
											"begin": 3814,
											"end": 3830,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3814,
											"end": 3830,
											"name": "tag",
											"source": 13,
											"value": "200"
										},
										{
											"begin": 3814,
											"end": 3830,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "CALLDATACOPY",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3801,
											"end": 3805,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3805,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3801,
											"end": 3813,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "201"
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3801,
											"end": 3831,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "tag",
											"source": 13,
											"value": "199"
										},
										{
											"begin": 3801,
											"end": 3831,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3792,
											"end": 3797,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 3792,
											"end": 3797,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3792,
											"end": 3797,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3792,
											"end": 3797,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3792,
											"end": 3797,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3792,
											"end": 3831,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3792,
											"end": 3831,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3792,
											"end": 3831,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3788,
											"end": 3873,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "202"
										},
										{
											"begin": 3788,
											"end": 3873,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 756,
											"end": 757,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 3845,
											"end": 3873,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3845,
											"end": 3873,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3845,
											"end": 3873,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3845,
											"end": 3873,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "196"
										},
										{
											"begin": 3845,
											"end": 3873,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3788,
											"end": 3873,
											"name": "tag",
											"source": 13,
											"value": "202"
										},
										{
											"begin": 3788,
											"end": 3873,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3890,
											"end": 3891,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3883,
											"end": 3891,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3883,
											"end": 3891,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3883,
											"end": 3891,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3569,
											"end": 3898,
											"name": "tag",
											"source": 13,
											"value": "196"
										},
										{
											"begin": 3569,
											"end": 3898,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3569,
											"end": 3898,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3569,
											"end": 3898,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3569,
											"end": 3898,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3569,
											"end": 3898,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3569,
											"end": 3898,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3569,
											"end": 3898,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3356,
											"end": 3514,
											"name": "tag",
											"source": 13,
											"value": "90"
										},
										{
											"begin": 3356,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3462,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3468,
											"end": 3480,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3468,
											"end": 3480,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3468,
											"end": 3480,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3468,
											"end": 3480,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3468,
											"end": 3480,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "PUSH",
											"source": 13,
											"value": "10000"
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3462,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "204"
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "205"
										},
										{
											"begin": 3456,
											"end": 3464,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "tag",
											"source": 13,
											"value": "204"
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "POP",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3456,
											"end": 3480,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3480,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3448,
											"end": 3507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "125"
										},
										{
											"begin": 3448,
											"end": 3507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3448,
											"end": 3507,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3448,
											"end": 3507,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3448,
											"end": 3507,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3448,
											"end": 3507,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10384,
											"end": 10386,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3448,
											"end": 3507,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3448,
											"end": 3507,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3448,
											"end": 3507,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10366,
											"end": 10387,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10423,
											"end": 10425,
											"name": "PUSH",
											"source": 19,
											"value": "16"
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10396,
											"end": 10426,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6163636F756E743A20696E76616C6964206E6F6E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "50"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10442,
											"end": 10460,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 10442,
											"end": 10460,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10442,
											"end": 10460,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10435,
											"end": 10487,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10504,
											"end": 10522,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 10504,
											"end": 10522,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3448,
											"end": 3507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "97"
										},
										{
											"begin": 10182,
											"end": 10528,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 4641,
											"end": 4978,
											"name": "tag",
											"source": 12,
											"value": "92"
										},
										{
											"begin": 4641,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4722,
											"end": 4746,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4722,
											"end": 4746,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4718,
											"end": 4972,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 4718,
											"end": 4972,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4763,
											"end": 4775,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4763,
											"end": 4775,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4788,
											"end": 4798,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 4788,
											"end": 4798,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4840,
											"end": 4857,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4813,
											"end": 4832,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4813,
											"end": 4832,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4763,
											"end": 4775,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4763,
											"end": 4775,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4813,
											"end": 4832,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4788,
											"end": 4798,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 4840,
											"end": 4857,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "PUSH",
											"source": 12,
											"value": "3F"
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 4780,
											"end": 4862,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3126,
											"end": 3301,
											"name": "tag",
											"source": 13,
											"value": "95"
										},
										{
											"begin": 3126,
											"end": 3301,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1008,
											"end": 1019,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3199,
											"end": 3209,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 3199,
											"end": 3234,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3199,
											"end": 3234,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3199,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "217"
										},
										{
											"begin": 3199,
											"end": 3257,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3252,
											"end": 3257,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 3252,
											"end": 3257,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3252,
											"end": 3257,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3238,
											"end": 3248,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 3238,
											"end": 3257,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3199,
											"end": 3257,
											"name": "tag",
											"source": 13,
											"value": "217"
										},
										{
											"begin": 3199,
											"end": 3257,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3191,
											"end": 3294,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "193"
										},
										{
											"begin": 3191,
											"end": 3294,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3191,
											"end": 3294,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3191,
											"end": 3294,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3191,
											"end": 3294,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3191,
											"end": 3294,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10735,
											"end": 10737,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3191,
											"end": 3294,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3191,
											"end": 3294,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3191,
											"end": 3294,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10717,
											"end": 10738,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 10717,
											"end": 10738,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10717,
											"end": 10738,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10754,
											"end": 10772,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 10754,
											"end": 10772,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10754,
											"end": 10772,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10747,
											"end": 10777,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10813,
											"end": 10847,
											"name": "PUSH",
											"source": 19,
											"value": "6163636F756E743A206E6F74204F776E6572206F7220456E747279506F696E74"
										},
										{
											"begin": 10793,
											"end": 10811,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 10793,
											"end": 10811,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10793,
											"end": 10811,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10786,
											"end": 10848,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10865,
											"end": 10883,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 10865,
											"end": 10883,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3191,
											"end": 3294,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "97"
										},
										{
											"begin": 10533,
											"end": 10889,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3904,
											"end": 4191,
											"name": "tag",
											"source": 13,
											"value": "110"
										},
										{
											"begin": 3904,
											"end": 4191,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3989,
											"end": 4001,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4003,
											"end": 4022,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4032,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4026,
											"end": 4037,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4046,
											"end": 4051,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4053,
											"end": 4057,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "222"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "223"
										},
										{
											"begin": 4026,
											"end": 4058,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "tag",
											"source": 13,
											"value": "222"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "226"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH",
											"source": 13,
											"value": "3F"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "225"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "tag",
											"source": 13,
											"value": "226"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "tag",
											"source": 13,
											"value": "225"
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4058,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3988,
											"end": 4058,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3988,
											"end": 4058,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3988,
											"end": 4058,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3988,
											"end": 4058,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4073,
											"end": 4080,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4068,
											"end": 4185,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 4068,
											"end": 4185,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4153,
											"end": 4159,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4147,
											"end": 4160,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4142,
											"end": 4144,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4134,
											"end": 4140,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4130,
											"end": 4145,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4123,
											"end": 4161,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4920,
											"end": 5055,
											"name": "tag",
											"source": 13,
											"value": "124"
										},
										{
											"begin": 4920,
											"end": 5055,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5036,
											"end": 5048,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "125"
										},
										{
											"begin": 5036,
											"end": 5046,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "157"
										},
										{
											"begin": 5036,
											"end": 5048,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2494,
											"end": 3416,
											"name": "tag",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 2494,
											"end": 3416,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 689,
											"end": 755,
											"name": "PUSH",
											"source": 2,
											"value": "4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143"
										},
										{
											"begin": 2910,
											"end": 2958,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2910,
											"end": 2958,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 2910,
											"end": 2958,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2906,
											"end": 3410,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2906,
											"end": 3410,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 2906,
											"end": 3410,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2974,
											"end": 3011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 2993,
											"end": 3010,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2974,
											"end": 2992,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 2974,
											"end": 3011,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2906,
											"end": 3410,
											"name": "tag",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 2906,
											"end": 3410,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3064,
											"end": 3081,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3046,
											"end": 3096,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3096,
											"name": "PUSH",
											"source": 2,
											"value": "52D1902D"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 3046,
											"end": 3098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "tag",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "tag",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 3046,
											"end": 3098,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3042,
											"end": 3333,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 3042,
											"end": 3333,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3318,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3262,
											"end": 3318,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3262,
											"end": 3318,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3318,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11832,
											"end": 11834,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3262,
											"end": 3318,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3262,
											"end": 3318,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3318,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11814,
											"end": 11835,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11871,
											"end": 11873,
											"name": "PUSH",
											"source": 19,
											"value": "2E"
										},
										{
											"begin": 11851,
											"end": 11869,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 11851,
											"end": 11869,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11851,
											"end": 11869,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11844,
											"end": 11874,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11910,
											"end": 11944,
											"name": "PUSH",
											"source": 19,
											"value": "45524331393637557067726164653A206E657720696D706C656D656E74617469"
										},
										{
											"begin": 11890,
											"end": 11908,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 11890,
											"end": 11908,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11890,
											"end": 11908,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11883,
											"end": 11945,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F6E206973206E6F742055555053"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11961,
											"end": 11979,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 11961,
											"end": 11979,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11961,
											"end": 11979,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11954,
											"end": 11998,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12015,
											"end": 12034,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 12015,
											"end": 12034,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3262,
											"end": 3318,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 11630,
											"end": 12040,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3042,
											"end": 3333,
											"name": "tag",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 3042,
											"end": 3333,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3148,
											"end": 3176,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3148,
											"end": 3176,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 3140,
											"end": 3222,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "250"
										},
										{
											"begin": 3140,
											"end": 3222,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3140,
											"end": 3222,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3140,
											"end": 3222,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3140,
											"end": 3222,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3140,
											"end": 3222,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12247,
											"end": 12249,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3140,
											"end": 3222,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3140,
											"end": 3222,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3140,
											"end": 3222,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12229,
											"end": 12250,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12286,
											"end": 12288,
											"name": "PUSH",
											"source": 19,
											"value": "29"
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12259,
											"end": 12289,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12325,
											"end": 12359,
											"name": "PUSH",
											"source": 19,
											"value": "45524331393637557067726164653A20756E737570706F727465642070726F78"
										},
										{
											"begin": 12305,
											"end": 12323,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 12305,
											"end": 12323,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12305,
											"end": 12323,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12298,
											"end": 12360,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1A58589B1955555251"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "BA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12376,
											"end": 12394,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 12376,
											"end": 12394,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12376,
											"end": 12394,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12369,
											"end": 12408,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12425,
											"end": 12444,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 12425,
											"end": 12444,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3140,
											"end": 3222,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 12045,
											"end": 12450,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3140,
											"end": 3222,
											"name": "tag",
											"source": 2,
											"value": "250"
										},
										{
											"begin": 3140,
											"end": 3222,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3099,
											"end": 3237,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3346,
											"end": 3399,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 3364,
											"end": 3381,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3383,
											"end": 3387,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3389,
											"end": 3398,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3346,
											"end": 3363,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "254"
										},
										{
											"begin": 3346,
											"end": 3399,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2584,
											"end": 2792,
											"name": "tag",
											"source": 13,
											"value": "143"
										},
										{
											"begin": 2584,
											"end": 2792,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2680,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "AND",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2690,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2711,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2726,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 2741,
											"end": 2785,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2741,
											"end": 2785,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2741,
											"end": 2785,
											"name": "PUSH",
											"source": 13,
											"value": "47E55C76E7A6F1FD8996A1DA8008C1EA29699CCA35E7BCD057F2DEC313B6E5DE"
										},
										{
											"begin": 2741,
											"end": 2785,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2680,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2675,
											"end": 2680,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2741,
											"end": 2785,
											"name": "LOG3",
											"source": 13
										},
										{
											"begin": 2584,
											"end": 2792,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2584,
											"end": 2792,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2584,
											"end": 2792,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1400,
											"end": 1638,
											"name": "tag",
											"source": 13,
											"value": "157"
										},
										{
											"begin": 1400,
											"end": 1638,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1580,
											"end": 1585,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 1580,
											"end": 1585,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1580,
											"end": 1585,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1566,
											"end": 1576,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 1566,
											"end": 1585,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1566,
											"end": 1585,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1566,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "258"
										},
										{
											"begin": 1566,
											"end": 1616,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1589,
											"end": 1599,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 1611,
											"end": 1615,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 1589,
											"end": 1616,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1566,
											"end": 1616,
											"name": "tag",
											"source": 13,
											"value": "258"
										},
										{
											"begin": 1566,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1558,
											"end": 1631,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "193"
										},
										{
											"begin": 1558,
											"end": 1631,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1558,
											"end": 1631,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1558,
											"end": 1631,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1558,
											"end": 1631,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1558,
											"end": 1631,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12657,
											"end": 12659,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1558,
											"end": 1631,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1558,
											"end": 1631,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1558,
											"end": 1631,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12639,
											"end": 12660,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12696,
											"end": 12698,
											"name": "PUSH",
											"source": 19,
											"value": "A"
										},
										{
											"begin": 12676,
											"end": 12694,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 12676,
											"end": 12694,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12676,
											"end": 12694,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12669,
											"end": 12699,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "37B7363C9037BBB732B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12715,
											"end": 12733,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 12715,
											"end": 12733,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12715,
											"end": 12733,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12708,
											"end": 12748,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12765,
											"end": 12783,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 12765,
											"end": 12783,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1558,
											"end": 1631,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "97"
										},
										{
											"begin": 12455,
											"end": 12789,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3661,
											"end": 3888,
											"name": "tag",
											"source": 9,
											"value": "201"
										},
										{
											"begin": 3661,
											"end": 3888,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3739,
											"end": 3746,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3759,
											"end": 3776,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3778,
											"end": 3796,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3800,
											"end": 3827,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 3811,
											"end": 3815,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3817,
											"end": 3826,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3800,
											"end": 3810,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "265"
										},
										{
											"begin": 3800,
											"end": 3827,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3800,
											"end": 3827,
											"name": "tag",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 3800,
											"end": 3827,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3758,
											"end": 3827,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3758,
											"end": 3827,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3758,
											"end": 3827,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3758,
											"end": 3827,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3855,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 3849,
											"end": 3854,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3848,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "267"
										},
										{
											"begin": 3837,
											"end": 3855,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3855,
											"name": "tag",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 3837,
											"end": 3855,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3872,
											"end": 3881,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3661,
											"end": 3888,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3661,
											"end": 3888,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1406,
											"end": 1665,
											"name": "tag",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 1406,
											"end": 1665,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "EXTCODESIZE",
											"source": 6
										},
										{
											"begin": 1479,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "272"
										},
										{
											"begin": 1479,
											"end": 1574,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1479,
											"end": 1574,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1479,
											"end": 1574,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1479,
											"end": 1574,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1479,
											"end": 1574,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12996,
											"end": 12998,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1479,
											"end": 1574,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1479,
											"end": 1574,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1479,
											"end": 1574,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12978,
											"end": 12999,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13035,
											"end": 13037,
											"name": "PUSH",
											"source": 19,
											"value": "2D"
										},
										{
											"begin": 13015,
											"end": 13033,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 13015,
											"end": 13033,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13015,
											"end": 13033,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13008,
											"end": 13038,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13074,
											"end": 13108,
											"name": "PUSH",
											"source": 19,
											"value": "455243313936373A206E657720696D706C656D656E746174696F6E206973206E"
										},
										{
											"begin": 13054,
											"end": 13072,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 13054,
											"end": 13072,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13054,
											"end": 13072,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13047,
											"end": 13109,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD08184818DBDB9D1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "9A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13125,
											"end": 13143,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 13125,
											"end": 13143,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13125,
											"end": 13143,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13118,
											"end": 13161,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13178,
											"end": 13197,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 13178,
											"end": 13197,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1479,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 12794,
											"end": 13203,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1479,
											"end": 1574,
											"name": "tag",
											"source": 2,
											"value": "272"
										},
										{
											"begin": 1479,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1584,
											"end": 1658,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1406,
											"end": 1665,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2057,
											"end": 2322,
											"name": "tag",
											"source": 2,
											"value": "254"
										},
										{
											"begin": 2057,
											"end": 2322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2165,
											"end": 2194,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "277"
										},
										{
											"begin": 2176,
											"end": 2193,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2165,
											"end": 2175,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "278"
										},
										{
											"begin": 2165,
											"end": 2194,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2165,
											"end": 2194,
											"name": "tag",
											"source": 2,
											"value": "277"
										},
										{
											"begin": 2165,
											"end": 2194,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2222,
											"end": 2223,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2208,
											"end": 2212,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2208,
											"end": 2219,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2208,
											"end": 2223,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2208,
											"end": 2236,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2208,
											"end": 2236,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "279"
										},
										{
											"begin": 2208,
											"end": 2236,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2208,
											"end": 2236,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2236,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2208,
											"end": 2236,
											"name": "tag",
											"source": 2,
											"value": "279"
										},
										{
											"begin": 2208,
											"end": 2236,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2204,
											"end": 2316,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2204,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 2204,
											"end": 2316,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2252,
											"end": 2305,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2300,
											"end": 2304,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2252,
											"end": 2280,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "282"
										},
										{
											"begin": 2252,
											"end": 2305,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2145,
											"end": 2875,
											"name": "tag",
											"source": 9,
											"value": "265"
										},
										{
											"begin": 2145,
											"end": 2875,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2226,
											"end": 2233,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2263,
											"end": 2272,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2263,
											"end": 2279,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2283,
											"end": 2285,
											"name": "PUSH",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 2263,
											"end": 2285,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2259,
											"end": 2869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "284"
										},
										{
											"begin": 2259,
											"end": 2869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2599,
											"end": 2603,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2605,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2648,
											"end": 2652,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2633,
											"end": 2653,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2633,
											"end": 2653,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2654,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2690,
											"end": 2710,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2690,
											"end": 2710,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2684,
											"end": 2711,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2301,
											"end": 2310,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2676,
											"end": 2712,
											"name": "BYTE",
											"source": 9
										},
										{
											"begin": 2746,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "285"
										},
										{
											"begin": 2757,
											"end": 2761,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2676,
											"end": 2712,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2578,
											"end": 2605,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2654,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2746,
											"end": 2756,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "286"
										},
										{
											"begin": 2746,
											"end": 2771,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2746,
											"end": 2771,
											"name": "tag",
											"source": 9,
											"value": "285"
										},
										{
											"begin": 2746,
											"end": 2771,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2771,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2771,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2771,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2771,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2771,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2771,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2771,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "287"
										},
										{
											"begin": 2739,
											"end": 2771,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2259,
											"end": 2869,
											"name": "tag",
											"source": 9,
											"value": "284"
										},
										{
											"begin": 2259,
											"end": 2869,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2818,
											"end": 2819,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2818,
											"end": 2819,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2822,
											"end": 2857,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2259,
											"end": 2869,
											"name": "tag",
											"source": 9,
											"value": "287"
										},
										{
											"begin": 2259,
											"end": 2869,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2145,
											"end": 2875,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2145,
											"end": 2875,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2145,
											"end": 2875,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2145,
											"end": 2875,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2145,
											"end": 2875,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2145,
											"end": 2875,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 570,
											"end": 1081,
											"name": "tag",
											"source": 9,
											"value": "267"
										},
										{
											"begin": 570,
											"end": 1081,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 647,
											"end": 667,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 638,
											"end": 643,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 638,
											"end": 667,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 638,
											"end": 667,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 638,
											"end": 667,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 638,
											"end": 667,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 638,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "293"
										},
										{
											"begin": 638,
											"end": 667,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 638,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "293"
										},
										{
											"begin": 638,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "291"
										},
										{
											"begin": 638,
											"end": 667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 638,
											"end": 667,
											"name": "tag",
											"source": 9,
											"value": "293"
										},
										{
											"begin": 638,
											"end": 667,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 638,
											"end": 667,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 634,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "294"
										},
										{
											"begin": 634,
											"end": 1075,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 570,
											"end": 1081,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 570,
											"end": 1081,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 634,
											"end": 1075,
											"name": "tag",
											"source": 9,
											"value": "294"
										},
										{
											"begin": 634,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 743,
											"end": 772,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 734,
											"end": 739,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 734,
											"end": 772,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 734,
											"end": 772,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 734,
											"end": 772,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 734,
											"end": 772,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 734,
											"end": 772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "299"
										},
										{
											"begin": 734,
											"end": 772,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 734,
											"end": 772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "299"
										},
										{
											"begin": 734,
											"end": 772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "291"
										},
										{
											"begin": 734,
											"end": 772,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 734,
											"end": 772,
											"name": "tag",
											"source": 9,
											"value": "299"
										},
										{
											"begin": 734,
											"end": 772,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 734,
											"end": 772,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 730,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "300"
										},
										{
											"begin": 730,
											"end": 1075,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 788,
											"end": 822,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 788,
											"end": 822,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 788,
											"end": 822,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 788,
											"end": 822,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13542,
											"end": 13544,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 788,
											"end": 822,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 788,
											"end": 822,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 788,
											"end": 822,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 13524,
											"end": 13545,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13581,
											"end": 13583,
											"name": "PUSH",
											"source": 19,
											"value": "18"
										},
										{
											"begin": 13561,
											"end": 13579,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 13561,
											"end": 13579,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13561,
											"end": 13579,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13554,
											"end": 13584,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13620,
											"end": 13646,
											"name": "PUSH",
											"source": 19,
											"value": "45434453413A20696E76616C6964207369676E61747572650000000000000000"
										},
										{
											"begin": 13600,
											"end": 13618,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 13600,
											"end": 13618,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13600,
											"end": 13618,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13593,
											"end": 13647,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13664,
											"end": 13682,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 13664,
											"end": 13682,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 788,
											"end": 822,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 13340,
											"end": 13688,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 730,
											"end": 1075,
											"name": "tag",
											"source": 9,
											"value": "300"
										},
										{
											"begin": 730,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 852,
											"end": 887,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 843,
											"end": 848,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 843,
											"end": 887,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 843,
											"end": 887,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 843,
											"end": 887,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 843,
											"end": 887,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 843,
											"end": 887,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "307"
										},
										{
											"begin": 843,
											"end": 887,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 843,
											"end": 887,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "307"
										},
										{
											"begin": 843,
											"end": 887,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "291"
										},
										{
											"begin": 843,
											"end": 887,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 843,
											"end": 887,
											"name": "tag",
											"source": 9,
											"value": "307"
										},
										{
											"begin": 843,
											"end": 887,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 843,
											"end": 887,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 839,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "308"
										},
										{
											"begin": 839,
											"end": 1075,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 903,
											"end": 944,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 903,
											"end": 944,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 903,
											"end": 944,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 903,
											"end": 944,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13895,
											"end": 13897,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 903,
											"end": 944,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 903,
											"end": 944,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 903,
											"end": 944,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 13877,
											"end": 13898,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13934,
											"end": 13936,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 13914,
											"end": 13932,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 13914,
											"end": 13932,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13914,
											"end": 13932,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13907,
											"end": 13937,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13973,
											"end": 14006,
											"name": "PUSH",
											"source": 19,
											"value": "45434453413A20696E76616C6964207369676E6174757265206C656E67746800"
										},
										{
											"begin": 13953,
											"end": 13971,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 13953,
											"end": 13971,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13953,
											"end": 13971,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13946,
											"end": 14007,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14024,
											"end": 14042,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 14024,
											"end": 14042,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 903,
											"end": 944,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 13693,
											"end": 14048,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 839,
											"end": 1075,
											"name": "tag",
											"source": 9,
											"value": "308"
										},
										{
											"begin": 839,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 974,
											"end": 1004,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 965,
											"end": 970,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "315"
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "315"
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "291"
										},
										{
											"begin": 965,
											"end": 1004,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "tag",
											"source": 9,
											"value": "315"
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 961,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 961,
											"end": 1075,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 14255,
											"end": 14257,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 14237,
											"end": 14258,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14294,
											"end": 14296,
											"name": "PUSH",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 14274,
											"end": 14292,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 14274,
											"end": 14292,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 14274,
											"end": 14292,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 14267,
											"end": 14297,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14333,
											"end": 14367,
											"name": "PUSH",
											"source": 19,
											"value": "45434453413A20696E76616C6964207369676E6174757265202773272076616C"
										},
										{
											"begin": 14313,
											"end": 14331,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 14313,
											"end": 14331,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 14313,
											"end": 14331,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 14306,
											"end": 14368,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14384,
											"end": 14402,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 14384,
											"end": 14402,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 14384,
											"end": 14402,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 14377,
											"end": 14409,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14426,
											"end": 14445,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 14426,
											"end": 14445,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 14053,
											"end": 14451,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1771,
											"end": 1923,
											"name": "tag",
											"source": 2,
											"value": "278"
										},
										{
											"begin": 1771,
											"end": 1923,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1837,
											"end": 1874,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "320"
										},
										{
											"begin": 1856,
											"end": 1873,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1837,
											"end": 1855,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 1837,
											"end": 1874,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1837,
											"end": 1874,
											"name": "tag",
											"source": 2,
											"value": "320"
										},
										{
											"begin": 1837,
											"end": 1874,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1889,
											"end": 1916,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1889,
											"end": 1916,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1889,
											"end": 1916,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1889,
											"end": 1916,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1889,
											"end": 1916,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1889,
											"end": 1916,
											"name": "PUSH",
											"source": 2,
											"value": "BC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B"
										},
										{
											"begin": 1889,
											"end": 1916,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1889,
											"end": 1916,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1889,
											"end": 1916,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1889,
											"end": 1916,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 1771,
											"end": 1923,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1771,
											"end": 1923,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6674,
											"end": 6872,
											"name": "tag",
											"source": 6,
											"value": "282"
										},
										{
											"begin": 6674,
											"end": 6872,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6757,
											"end": 6769,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 6809,
											"end": 6815,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6817,
											"end": 6821,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "PUSH",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "PUSH data",
											"source": 6,
											"value": "9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398"
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "PUSH",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6865,
											"name": "CODECOPY",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6808,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "323"
										},
										{
											"begin": 6788,
											"end": 6865,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "tag",
											"source": 9,
											"value": "286"
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5097,
											"end": 5104,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5097,
											"end": 5104,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6021,
											"end": 6087,
											"name": "PUSH",
											"source": 9,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6008,
											"end": 6087,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6008,
											"end": 6087,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "325"
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6119,
											"end": 6120,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6119,
											"end": 6120,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6123,
											"end": 6153,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "324"
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "tag",
											"source": 9,
											"value": "325"
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6259,
											"end": 6273,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 14683,
											"end": 14708,
											"name": "DUP10",
											"source": 19
										},
										{
											"begin": 14683,
											"end": 14708,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 14683,
											"end": 14708,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14756,
											"end": 14760,
											"name": "PUSH",
											"source": 19,
											"value": "FF"
										},
										{
											"begin": 14744,
											"end": 14761,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 14744,
											"end": 14761,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 14724,
											"end": 14742,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 14724,
											"end": 14742,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 14724,
											"end": 14742,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 14717,
											"end": 14762,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 14717,
											"end": 14762,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 14717,
											"end": 14762,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 14717,
											"end": 14762,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14778,
											"end": 14796,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 14778,
											"end": 14796,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 14778,
											"end": 14796,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 14771,
											"end": 14805,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 14771,
											"end": 14805,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 14771,
											"end": 14805,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14821,
											"end": 14839,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 14821,
											"end": 14839,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 14821,
											"end": 14839,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 14814,
											"end": 14848,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 14814,
											"end": 14848,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 14814,
											"end": 14848,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 14655,
											"end": 14674,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 14655,
											"end": 14674,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "STATICCALL",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "329"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "tag",
											"source": 9,
											"value": "329"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6314,
											"end": 6334,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6314,
											"end": 6334,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6310,
											"end": 6411,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "330"
										},
										{
											"begin": 6310,
											"end": 6411,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6366,
											"end": 6367,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6370,
											"end": 6399,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 6350,
											"end": 6400,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6350,
											"end": 6400,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6350,
											"end": 6400,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6350,
											"end": 6400,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6350,
											"end": 6400,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6350,
											"end": 6400,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "324"
										},
										{
											"begin": 6350,
											"end": 6400,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6310,
											"end": 6411,
											"name": "tag",
											"source": 9,
											"value": "330"
										},
										{
											"begin": 6310,
											"end": 6411,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6429,
											"end": 6435,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6437,
											"end": 6457,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6437,
											"end": 6457,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "tag",
											"source": 9,
											"value": "324"
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5009,
											"end": 6465,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7058,
											"end": 7383,
											"name": "tag",
											"source": 6,
											"value": "323"
										},
										{
											"begin": 7058,
											"end": 7383,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7199,
											"end": 7211,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7224,
											"end": 7236,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7238,
											"end": 7261,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7271,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7265,
											"end": 7284,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7285,
											"end": 7289,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "332"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 7265,
											"end": 7290,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "tag",
											"source": 6,
											"value": "332"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "DELEGATECALL",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "335"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH",
											"source": 6,
											"value": "3F"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "334"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "tag",
											"source": 6,
											"value": "335"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "tag",
											"source": 6,
											"value": "334"
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7265,
											"end": 7290,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7223,
											"end": 7290,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7223,
											"end": 7290,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7223,
											"end": 7290,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7223,
											"end": 7290,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7307,
											"end": 7376,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "336"
										},
										{
											"begin": 7334,
											"end": 7340,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 7342,
											"end": 7349,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7351,
											"end": 7361,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7363,
											"end": 7375,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7307,
											"end": 7333,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "337"
										},
										{
											"begin": 7307,
											"end": 7376,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7307,
											"end": 7376,
											"name": "tag",
											"source": 6,
											"value": "336"
										},
										{
											"begin": 7307,
											"end": 7376,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7300,
											"end": 7376,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": 7058,
											"end": 7383,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7058,
											"end": 7383,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "tag",
											"source": 6,
											"value": "337"
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7851,
											"end": 7863,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7879,
											"end": 7886,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "339"
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7916,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7923,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7927,
											"end": 7928,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7906,
											"end": 7928,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7902,
											"end": 8188,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "342"
										},
										{
											"begin": 7902,
											"end": 8188,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "EXTCODESIZE",
											"source": 6
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "342"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 15061,
											"end": 15063,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 15043,
											"end": 15064,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15100,
											"end": 15102,
											"name": "PUSH",
											"source": 19,
											"value": "1D"
										},
										{
											"begin": 15080,
											"end": 15098,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 15080,
											"end": 15098,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 15080,
											"end": 15098,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15073,
											"end": 15103,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15139,
											"end": 15170,
											"name": "PUSH",
											"source": 19,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 15119,
											"end": 15137,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 15119,
											"end": 15137,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 15119,
											"end": 15137,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15112,
											"end": 15171,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15188,
											"end": 15206,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 15188,
											"end": 15206,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 14859,
											"end": 15212,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "tag",
											"source": 6,
											"value": "342"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8208,
											"end": 8218,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8201,
											"end": 8218,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 8201,
											"end": 8218,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "tag",
											"source": 6,
											"value": "339"
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8249,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 8257,
											"end": 8267,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8269,
											"end": 8281,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8980,
											"end": 8997,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8980,
											"end": 8997,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8980,
											"end": 9001,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "349"
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9208,
											"end": 9218,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9202,
											"end": 9219,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9264,
											"end": 9279,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9251,
											"end": 9261,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9247,
											"end": 9249,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9243,
											"end": 9262,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9236,
											"end": 9280,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "tag",
											"source": 6,
											"value": "349"
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9331,
											"end": 9343,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "352"
										},
										{
											"begin": 9324,
											"end": 9344,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 14,
											"end": 145,
											"name": "tag",
											"source": 19,
											"value": "353"
										},
										{
											"begin": 14,
											"end": 145,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 89,
											"end": 120,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 89,
											"end": 120,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 79,
											"end": 121,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 79,
											"end": 121,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 69,
											"end": 139,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "125"
										},
										{
											"begin": 69,
											"end": 139,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 135,
											"end": 136,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 125,
											"end": 137,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 150,
											"end": 815,
											"name": "tag",
											"source": 19,
											"value": "23"
										},
										{
											"begin": 150,
											"end": 815,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 269,
											"end": 275,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 277,
											"end": 283,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 285,
											"end": 291,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 293,
											"end": 299,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 346,
											"end": 349,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 334,
											"end": 343,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 325,
											"end": 332,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 321,
											"end": 344,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 317,
											"end": 350,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 314,
											"end": 367,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 314,
											"end": 367,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "361"
										},
										{
											"begin": 314,
											"end": 367,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 363,
											"end": 364,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 360,
											"end": 361,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 353,
											"end": 365,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 314,
											"end": 367,
											"name": "tag",
											"source": 19,
											"value": "361"
										},
										{
											"begin": 314,
											"end": 367,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 403,
											"end": 412,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 390,
											"end": 413,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 436,
											"end": 454,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 428,
											"end": 434,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 425,
											"end": 455,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 422,
											"end": 472,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 422,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "362"
										},
										{
											"begin": 422,
											"end": 472,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 468,
											"end": 469,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 465,
											"end": 466,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 458,
											"end": 470,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 422,
											"end": 472,
											"name": "tag",
											"source": 19,
											"value": "362"
										},
										{
											"begin": 422,
											"end": 472,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 491,
											"end": 513,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 491,
											"end": 513,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 547,
											"end": 550,
											"name": "PUSH",
											"source": 19,
											"value": "160"
										},
										{
											"begin": 529,
											"end": 545,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 529,
											"end": 545,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 529,
											"end": 545,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 525,
											"end": 551,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 522,
											"end": 568,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 522,
											"end": 568,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "363"
										},
										{
											"begin": 522,
											"end": 568,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 564,
											"end": 565,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 561,
											"end": 562,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 554,
											"end": 566,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 522,
											"end": 568,
											"name": "tag",
											"source": 19,
											"value": "363"
										},
										{
											"begin": 522,
											"end": 568,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 587,
											"end": 589,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 636,
											"end": 638,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 621,
											"end": 639,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 621,
											"end": 639,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 608,
											"end": 640,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 608,
											"end": 640,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 690,
											"end": 692,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 675,
											"end": 693,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 675,
											"end": 693,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 662,
											"end": 694,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 703,
											"end": 734,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "364"
										},
										{
											"begin": 662,
											"end": 694,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 703,
											"end": 734,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "353"
										},
										{
											"begin": 703,
											"end": 734,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 703,
											"end": 734,
											"name": "tag",
											"source": 19,
											"value": "364"
										},
										{
											"begin": 703,
											"end": 734,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 150,
											"end": 815,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 150,
											"end": 815,
											"name": "SWAP7",
											"source": 19
										},
										{
											"begin": 150,
											"end": 815,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 150,
											"end": 815,
											"name": "SWAP6",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 753,
											"end": 758,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 753,
											"end": 758,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 805,
											"end": 807,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 790,
											"end": 808,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 777,
											"end": 809,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 777,
											"end": 809,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 150,
											"end": 815,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1002,
											"end": 1369,
											"name": "tag",
											"source": 19,
											"value": "354"
										},
										{
											"begin": 1002,
											"end": 1369,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1065,
											"end": 1073,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1075,
											"end": 1081,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1129,
											"end": 1132,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 1122,
											"end": 1126,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 1114,
											"end": 1120,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1110,
											"end": 1127,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1106,
											"end": 1133,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 1096,
											"end": 1151,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "367"
										},
										{
											"begin": 1096,
											"end": 1151,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1147,
											"end": 1148,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1144,
											"end": 1145,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1137,
											"end": 1149,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1096,
											"end": 1151,
											"name": "tag",
											"source": 19,
											"value": "367"
										},
										{
											"begin": 1096,
											"end": 1151,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1170,
											"end": 1190,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1170,
											"end": 1190,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 1213,
											"end": 1231,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1202,
											"end": 1232,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1202,
											"end": 1232,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 1199,
											"end": 1249,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1199,
											"end": 1249,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "368"
										},
										{
											"begin": 1199,
											"end": 1249,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1245,
											"end": 1246,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1242,
											"end": 1243,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1235,
											"end": 1247,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1199,
											"end": 1249,
											"name": "tag",
											"source": 19,
											"value": "368"
										},
										{
											"begin": 1199,
											"end": 1249,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1282,
											"end": 1286,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1274,
											"end": 1280,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 1270,
											"end": 1287,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1258,
											"end": 1287,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 1258,
											"end": 1287,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1342,
											"end": 1345,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 1335,
											"end": 1339,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1325,
											"end": 1331,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1322,
											"end": 1323,
											"name": "PUSH",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 1318,
											"end": 1332,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 1310,
											"end": 1316,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 1306,
											"end": 1333,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1302,
											"end": 1340,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1299,
											"end": 1346,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 1296,
											"end": 1363,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1296,
											"end": 1363,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "287"
										},
										{
											"begin": 1296,
											"end": 1363,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1359,
											"end": 1360,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1356,
											"end": 1357,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1349,
											"end": 1361,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1374,
											"end": 2158,
											"name": "tag",
											"source": 19,
											"value": "30"
										},
										{
											"begin": 1374,
											"end": 2158,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1507,
											"end": 1513,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 1521,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1523,
											"end": 1529,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1531,
											"end": 1537,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1584,
											"end": 1586,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1572,
											"end": 1581,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 1563,
											"end": 1570,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 1559,
											"end": 1582,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 1555,
											"end": 1587,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 1552,
											"end": 1604,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1552,
											"end": 1604,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "371"
										},
										{
											"begin": 1552,
											"end": 1604,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1600,
											"end": 1601,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1597,
											"end": 1598,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1590,
											"end": 1602,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1552,
											"end": 1604,
											"name": "tag",
											"source": 19,
											"value": "371"
										},
										{
											"begin": 1552,
											"end": 1604,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1640,
											"end": 1649,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1627,
											"end": 1650,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 1669,
											"end": 1687,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1710,
											"end": 1712,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1702,
											"end": 1708,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1699,
											"end": 1713,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 1696,
											"end": 1730,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1696,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "372"
										},
										{
											"begin": 1696,
											"end": 1730,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1726,
											"end": 1727,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1723,
											"end": 1724,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1716,
											"end": 1728,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1696,
											"end": 1730,
											"name": "tag",
											"source": 19,
											"value": "372"
										},
										{
											"begin": 1696,
											"end": 1730,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1765,
											"end": 1835,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "373"
										},
										{
											"begin": 1827,
											"end": 1834,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 1818,
											"end": 1824,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 1807,
											"end": 1816,
											"name": "DUP10",
											"source": 19
										},
										{
											"begin": 1803,
											"end": 1825,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1765,
											"end": 1835,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "354"
										},
										{
											"begin": 1765,
											"end": 1835,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1765,
											"end": 1835,
											"name": "tag",
											"source": 19,
											"value": "373"
										},
										{
											"begin": 1765,
											"end": 1835,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1854,
											"end": 1862,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1854,
											"end": 1862,
											"name": "SWAP7",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1739,
											"end": 1835,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1942,
											"end": 1944,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1927,
											"end": 1945,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 1927,
											"end": 1945,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1914,
											"end": 1946,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 1914,
											"end": 1946,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1958,
											"end": 1974,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1958,
											"end": 1974,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1958,
											"end": 1974,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 1955,
											"end": 1991,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1955,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "374"
										},
										{
											"begin": 1955,
											"end": 1991,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1987,
											"end": 1988,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1984,
											"end": 1985,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1977,
											"end": 1989,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1955,
											"end": 1991,
											"name": "tag",
											"source": 19,
											"value": "374"
										},
										{
											"begin": 1955,
											"end": 1991,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1955,
											"end": 1991,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2026,
											"end": 2098,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "375"
										},
										{
											"begin": 2090,
											"end": 2097,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 2079,
											"end": 2087,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2068,
											"end": 2077,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 2064,
											"end": 2088,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2026,
											"end": 2098,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "354"
										},
										{
											"begin": 2026,
											"end": 2098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2026,
											"end": 2098,
											"name": "tag",
											"source": 19,
											"value": "375"
										},
										{
											"begin": 2026,
											"end": 2098,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1374,
											"end": 2158,
											"name": "SWAP6",
											"source": 19
										},
										{
											"begin": 1374,
											"end": 2158,
											"name": "SWAP9",
											"source": 19
										},
										{
											"begin": 1374,
											"end": 2158,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 1374,
											"end": 2158,
											"name": "SWAP8",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2117,
											"end": 2125,
											"name": "SWAP6",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1374,
											"end": 2158,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2163,
											"end": 2410,
											"name": "tag",
											"source": 19,
											"value": "35"
										},
										{
											"begin": 2163,
											"end": 2410,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2222,
											"end": 2228,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2275,
											"end": 2277,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2263,
											"end": 2272,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2254,
											"end": 2261,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 2250,
											"end": 2273,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 2246,
											"end": 2278,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 2243,
											"end": 2295,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2243,
											"end": 2295,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "377"
										},
										{
											"begin": 2243,
											"end": 2295,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2291,
											"end": 2292,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2288,
											"end": 2289,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2281,
											"end": 2293,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2243,
											"end": 2295,
											"name": "tag",
											"source": 19,
											"value": "377"
										},
										{
											"begin": 2243,
											"end": 2295,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2330,
											"end": 2339,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 2317,
											"end": 2340,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 2349,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "196"
										},
										{
											"begin": 2374,
											"end": 2379,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 2349,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "353"
										},
										{
											"begin": 2349,
											"end": 2380,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2415,
											"end": 2823,
											"name": "tag",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 2415,
											"end": 2823,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2503,
											"end": 2509,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2511,
											"end": 2517,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2564,
											"end": 2566,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 2552,
											"end": 2561,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2543,
											"end": 2550,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 2539,
											"end": 2562,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 2535,
											"end": 2567,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 2532,
											"end": 2584,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2532,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "380"
										},
										{
											"begin": 2532,
											"end": 2584,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2580,
											"end": 2581,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2577,
											"end": 2578,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2532,
											"end": 2584,
											"name": "tag",
											"source": 19,
											"value": "380"
										},
										{
											"begin": 2532,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2619,
											"end": 2628,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2606,
											"end": 2629,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 2638,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "381"
										},
										{
											"begin": 2663,
											"end": 2668,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 2638,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "353"
										},
										{
											"begin": 2638,
											"end": 2669,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2638,
											"end": 2669,
											"name": "tag",
											"source": 19,
											"value": "381"
										},
										{
											"begin": 2638,
											"end": 2669,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2688,
											"end": 2693,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2745,
											"end": 2747,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2730,
											"end": 2748,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2730,
											"end": 2748,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2717,
											"end": 2749,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 2758,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "382"
										},
										{
											"begin": 2717,
											"end": 2749,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 2758,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "353"
										},
										{
											"begin": 2758,
											"end": 2791,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2758,
											"end": 2791,
											"name": "tag",
											"source": 19,
											"value": "382"
										},
										{
											"begin": 2758,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2810,
											"end": 2817,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2800,
											"end": 2817,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2800,
											"end": 2817,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2800,
											"end": 2817,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2415,
											"end": 2823,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 2415,
											"end": 2823,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2415,
											"end": 2823,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 2415,
											"end": 2823,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 2415,
											"end": 2823,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2415,
											"end": 2823,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2828,
											"end": 3151,
											"name": "tag",
											"source": 19,
											"value": "47"
										},
										{
											"begin": 2828,
											"end": 3151,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2904,
											"end": 2910,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2912,
											"end": 2918,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2965,
											"end": 2967,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 2953,
											"end": 2962,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2944,
											"end": 2951,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 2940,
											"end": 2963,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 2936,
											"end": 2968,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 2933,
											"end": 2985,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2933,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "384"
										},
										{
											"begin": 2933,
											"end": 2985,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2981,
											"end": 2982,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2978,
											"end": 2979,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2971,
											"end": 2983,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2933,
											"end": 2985,
											"name": "tag",
											"source": 19,
											"value": "384"
										},
										{
											"begin": 2933,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3020,
											"end": 3029,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3007,
											"end": 3030,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 3039,
											"end": 3070,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "385"
										},
										{
											"begin": 3064,
											"end": 3069,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3039,
											"end": 3070,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "353"
										},
										{
											"begin": 3039,
											"end": 3070,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3039,
											"end": 3070,
											"name": "tag",
											"source": 19,
											"value": "385"
										},
										{
											"begin": 3039,
											"end": 3070,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3089,
											"end": 3094,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 3141,
											"end": 3143,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3126,
											"end": 3144,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 3126,
											"end": 3144,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3126,
											"end": 3144,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 3126,
											"end": 3144,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3113,
											"end": 3145,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 3113,
											"end": 3145,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2828,
											"end": 3151,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3156,
											"end": 3283,
											"name": "tag",
											"source": 19,
											"value": "128"
										},
										{
											"begin": 3156,
											"end": 3283,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3217,
											"end": 3227,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 3212,
											"end": 3215,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 3208,
											"end": 3228,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 3205,
											"end": 3206,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 3198,
											"end": 3229,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3248,
											"end": 3252,
											"name": "PUSH",
											"source": 19,
											"value": "41"
										},
										{
											"begin": 3245,
											"end": 3246,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 3238,
											"end": 3253,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3272,
											"end": 3276,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 3269,
											"end": 3270,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 3262,
											"end": 3277,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 3288,
											"end": 4344,
											"name": "tag",
											"source": 19,
											"value": "51"
										},
										{
											"begin": 3288,
											"end": 4344,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3365,
											"end": 3371,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 3373,
											"end": 3379,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 3426,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 3414,
											"end": 3423,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 3405,
											"end": 3412,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 3401,
											"end": 3424,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 3397,
											"end": 3429,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 3394,
											"end": 3446,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 3394,
											"end": 3446,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "388"
										},
										{
											"begin": 3394,
											"end": 3446,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3442,
											"end": 3443,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 3439,
											"end": 3440,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 3432,
											"end": 3444,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 3394,
											"end": 3446,
											"name": "tag",
											"source": 19,
											"value": "388"
										},
										{
											"begin": 3394,
											"end": 3446,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3481,
											"end": 3490,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3468,
											"end": 3491,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 3500,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "389"
										},
										{
											"begin": 3525,
											"end": 3530,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3500,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "353"
										},
										{
											"begin": 3500,
											"end": 3531,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3500,
											"end": 3531,
											"name": "tag",
											"source": 19,
											"value": "389"
										},
										{
											"begin": 3500,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3550,
											"end": 3555,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3606,
											"end": 3608,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3591,
											"end": 3609,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 3591,
											"end": 3609,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3578,
											"end": 3610,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 3629,
											"end": 3647,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3659,
											"end": 3673,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 3659,
											"end": 3673,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3659,
											"end": 3673,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 3656,
											"end": 3690,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 3656,
											"end": 3690,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "390"
										},
										{
											"begin": 3656,
											"end": 3690,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3686,
											"end": 3687,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 3683,
											"end": 3684,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 3676,
											"end": 3688,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 3656,
											"end": 3690,
											"name": "tag",
											"source": 19,
											"value": "390"
										},
										{
											"begin": 3656,
											"end": 3690,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3724,
											"end": 3730,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3713,
											"end": 3722,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 3709,
											"end": 3731,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3699,
											"end": 3731,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 3699,
											"end": 3731,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3769,
											"end": 3776,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 3762,
											"end": 3766,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 3758,
											"end": 3760,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 3754,
											"end": 3767,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3750,
											"end": 3777,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 3740,
											"end": 3795,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "391"
										},
										{
											"begin": 3740,
											"end": 3795,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3791,
											"end": 3792,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 3788,
											"end": 3789,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 3781,
											"end": 3793,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 3740,
											"end": 3795,
											"name": "tag",
											"source": 19,
											"value": "391"
										},
										{
											"begin": 3740,
											"end": 3795,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3827,
											"end": 3829,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3814,
											"end": 3830,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 3849,
											"end": 3851,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3845,
											"end": 3847,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3842,
											"end": 3852,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 3839,
											"end": 3875,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 3839,
											"end": 3875,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "393"
										},
										{
											"begin": 3839,
											"end": 3875,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "393"
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "128"
										},
										{
											"begin": 3855,
											"end": 3873,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "tag",
											"source": 19,
											"value": "393"
										},
										{
											"begin": 3855,
											"end": 3873,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3930,
											"end": 3932,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 3924,
											"end": 3933,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 3898,
											"end": 3900,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 3984,
											"end": 3997,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3984,
											"end": 3997,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3980,
											"end": 4002,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3980,
											"end": 4002,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3980,
											"end": 4002,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 4004,
											"end": 4006,
											"name": "PUSH",
											"source": 19,
											"value": "3F"
										},
										{
											"begin": 3976,
											"end": 4007,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3972,
											"end": 4012,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 3960,
											"end": 4013,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3960,
											"end": 4013,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3960,
											"end": 4013,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 4028,
											"end": 4046,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 4028,
											"end": 4046,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4028,
											"end": 4046,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 4048,
											"end": 4070,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 4048,
											"end": 4070,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 4048,
											"end": 4070,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 4025,
											"end": 4071,
											"name": "OR",
											"source": 19
										},
										{
											"begin": 4022,
											"end": 4094,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 4022,
											"end": 4094,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "395"
										},
										{
											"begin": 4022,
											"end": 4094,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 4074,
											"end": 4092,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "395"
										},
										{
											"begin": 4074,
											"end": 4092,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "128"
										},
										{
											"begin": 4074,
											"end": 4092,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 4074,
											"end": 4092,
											"name": "tag",
											"source": 19,
											"value": "395"
										},
										{
											"begin": 4074,
											"end": 4092,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4114,
											"end": 4124,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 4110,
											"end": 4112,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 4103,
											"end": 4125,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4149,
											"end": 4151,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4141,
											"end": 4147,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 4134,
											"end": 4152,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4189,
											"end": 4196,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 4184,
											"end": 4186,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 4179,
											"end": 4181,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 4175,
											"end": 4177,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 4171,
											"end": 4182,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4167,
											"end": 4187,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4164,
											"end": 4197,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 4161,
											"end": 4214,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 4161,
											"end": 4214,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "396"
										},
										{
											"begin": 4161,
											"end": 4214,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 4210,
											"end": 4211,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 4207,
											"end": 4208,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 4200,
											"end": 4212,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 4161,
											"end": 4214,
											"name": "tag",
											"source": 19,
											"value": "396"
										},
										{
											"begin": 4161,
											"end": 4214,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4266,
											"end": 4268,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4261,
											"end": 4263,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 4257,
											"end": 4259,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 4253,
											"end": 4264,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4248,
											"end": 4250,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 4240,
											"end": 4246,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 4236,
											"end": 4251,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4223,
											"end": 4269,
											"name": "CALLDATACOPY",
											"source": 19
										},
										{
											"begin": 4311,
											"end": 4312,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 4306,
											"end": 4308,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 4301,
											"end": 4303,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 4293,
											"end": 4299,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 4289,
											"end": 4304,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4285,
											"end": 4309,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4278,
											"end": 4313,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4332,
											"end": 4338,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 4322,
											"end": 4338,
											"name": "SWAP6",
											"source": 19
										},
										{
											"begin": 4322,
											"end": 4338,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4322,
											"end": 4338,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4322,
											"end": 4338,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4322,
											"end": 4338,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4322,
											"end": 4338,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4322,
											"end": 4338,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3288,
											"end": 4344,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 3288,
											"end": 4344,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3288,
											"end": 4344,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 3288,
											"end": 4344,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3288,
											"end": 4344,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3288,
											"end": 4344,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 4967,
											"end": 5761,
											"name": "tag",
											"source": 19,
											"value": "75"
										},
										{
											"begin": 4967,
											"end": 5761,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5055,
											"end": 5061,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5063,
											"end": 5069,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 5071,
											"end": 5077,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5079,
											"end": 5085,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 5132,
											"end": 5134,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 5120,
											"end": 5129,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 5111,
											"end": 5118,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 5107,
											"end": 5130,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 5103,
											"end": 5135,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 5100,
											"end": 5152,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 5100,
											"end": 5152,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "401"
										},
										{
											"begin": 5100,
											"end": 5152,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 5148,
											"end": 5149,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5145,
											"end": 5146,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 5138,
											"end": 5150,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 5100,
											"end": 5152,
											"name": "tag",
											"source": 19,
											"value": "401"
										},
										{
											"begin": 5100,
											"end": 5152,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5187,
											"end": 5196,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 5174,
											"end": 5197,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 5206,
											"end": 5237,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "402"
										},
										{
											"begin": 5231,
											"end": 5236,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 5206,
											"end": 5237,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "353"
										},
										{
											"begin": 5206,
											"end": 5237,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 5206,
											"end": 5237,
											"name": "tag",
											"source": 19,
											"value": "402"
										},
										{
											"begin": 5206,
											"end": 5237,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5256,
											"end": 5261,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5308,
											"end": 5310,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 5293,
											"end": 5311,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 5293,
											"end": 5311,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5280,
											"end": 5312,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 5280,
											"end": 5312,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5363,
											"end": 5365,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 5348,
											"end": 5366,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 5348,
											"end": 5366,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5335,
											"end": 5367,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 5386,
											"end": 5404,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5416,
											"end": 5430,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 5416,
											"end": 5430,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5416,
											"end": 5430,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 5413,
											"end": 5447,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 5413,
											"end": 5447,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "403"
										},
										{
											"begin": 5413,
											"end": 5447,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 5443,
											"end": 5444,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5440,
											"end": 5441,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 5433,
											"end": 5445,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 5413,
											"end": 5447,
											"name": "tag",
											"source": 19,
											"value": "403"
										},
										{
											"begin": 5413,
											"end": 5447,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5481,
											"end": 5487,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 5470,
											"end": 5479,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 5466,
											"end": 5488,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5456,
											"end": 5488,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 5456,
											"end": 5488,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 5526,
											"end": 5533,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 5519,
											"end": 5523,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 5515,
											"end": 5517,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 5511,
											"end": 5524,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5507,
											"end": 5534,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 5497,
											"end": 5552,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "404"
										},
										{
											"begin": 5497,
											"end": 5552,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 5548,
											"end": 5549,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5545,
											"end": 5546,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 5538,
											"end": 5550,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 5497,
											"end": 5552,
											"name": "tag",
											"source": 19,
											"value": "404"
										},
										{
											"begin": 5497,
											"end": 5552,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5588,
											"end": 5590,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 5575,
											"end": 5591,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 5614,
											"end": 5616,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 5606,
											"end": 5612,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 5603,
											"end": 5617,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 5600,
											"end": 5634,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 5600,
											"end": 5634,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "405"
										},
										{
											"begin": 5600,
											"end": 5634,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 5630,
											"end": 5631,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5627,
											"end": 5628,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 5620,
											"end": 5632,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 5600,
											"end": 5634,
											"name": "tag",
											"source": 19,
											"value": "405"
										},
										{
											"begin": 5600,
											"end": 5634,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5675,
											"end": 5682,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 5670,
											"end": 5672,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 5661,
											"end": 5667,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5657,
											"end": 5659,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 5653,
											"end": 5668,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5649,
											"end": 5673,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5646,
											"end": 5683,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 5643,
											"end": 5700,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 5643,
											"end": 5700,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "406"
										},
										{
											"begin": 5643,
											"end": 5700,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 5696,
											"end": 5697,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5693,
											"end": 5694,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 5686,
											"end": 5698,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 5643,
											"end": 5700,
											"name": "tag",
											"source": 19,
											"value": "406"
										},
										{
											"begin": 5643,
											"end": 5700,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4967,
											"end": 5761,
											"name": "SWAP6",
											"source": 19
										},
										{
											"begin": 4967,
											"end": 5761,
											"name": "SWAP9",
											"source": 19
										},
										{
											"begin": 4967,
											"end": 5761,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 4967,
											"end": 5761,
											"name": "SWAP8",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5727,
											"end": 5729,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 5719,
											"end": 5730,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5719,
											"end": 5730,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4967,
											"end": 5761,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 5766,
											"end": 6287,
											"name": "tag",
											"source": 19,
											"value": "87"
										},
										{
											"begin": 5766,
											"end": 6287,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5843,
											"end": 5847,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5849,
											"end": 5855,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 5909,
											"end": 5920,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 5896,
											"end": 5921,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 6003,
											"end": 6005,
											"name": "PUSH",
											"source": 19,
											"value": "1E"
										},
										{
											"begin": 5999,
											"end": 6006,
											"name": "NOT",
											"source": 19
										},
										{
											"begin": 5988,
											"end": 5996,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 5972,
											"end": 5986,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 5968,
											"end": 5997,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 5964,
											"end": 6007,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5944,
											"end": 5962,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 5940,
											"end": 6008,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 5930,
											"end": 6026,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "408"
										},
										{
											"begin": 5930,
											"end": 6026,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 6022,
											"end": 6023,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 6019,
											"end": 6020,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 6012,
											"end": 6024,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 5930,
											"end": 6026,
											"name": "tag",
											"source": 19,
											"value": "408"
										},
										{
											"begin": 5930,
											"end": 6026,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6049,
											"end": 6082,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 6049,
											"end": 6082,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6101,
											"end": 6121,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 6101,
											"end": 6121,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 6101,
											"end": 6121,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6144,
											"end": 6162,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6133,
											"end": 6163,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6133,
											"end": 6163,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 6130,
											"end": 6180,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 6130,
											"end": 6180,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "409"
										},
										{
											"begin": 6130,
											"end": 6180,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 6176,
											"end": 6177,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 6173,
											"end": 6174,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 6166,
											"end": 6178,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 6130,
											"end": 6180,
											"name": "tag",
											"source": 19,
											"value": "409"
										},
										{
											"begin": 6130,
											"end": 6180,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6209,
											"end": 6213,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 6197,
											"end": 6214,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6197,
											"end": 6214,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6240,
											"end": 6254,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 6236,
											"end": 6263,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 6236,
											"end": 6263,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 6236,
											"end": 6263,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 6226,
											"end": 6264,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6226,
											"end": 6264,
											"name": "SGT",
											"source": 19
										},
										{
											"begin": 6223,
											"end": 6281,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 6223,
											"end": 6281,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "287"
										},
										{
											"begin": 6223,
											"end": 6281,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 6277,
											"end": 6278,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 6274,
											"end": 6275,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 6267,
											"end": 6279,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 6640,
											"end": 6767,
											"name": "tag",
											"source": 19,
											"value": "105"
										},
										{
											"begin": 6640,
											"end": 6767,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6701,
											"end": 6711,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 6696,
											"end": 6699,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 6692,
											"end": 6712,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 6689,
											"end": 6690,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 6682,
											"end": 6713,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6732,
											"end": 6736,
											"name": "PUSH",
											"source": 19,
											"value": "32"
										},
										{
											"begin": 6729,
											"end": 6730,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 6722,
											"end": 6737,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6756,
											"end": 6760,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 6753,
											"end": 6754,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 6746,
											"end": 6761,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 6772,
											"end": 6899,
											"name": "tag",
											"source": 19,
											"value": "355"
										},
										{
											"begin": 6772,
											"end": 6899,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6833,
											"end": 6843,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 6828,
											"end": 6831,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 6824,
											"end": 6844,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 6821,
											"end": 6822,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 6814,
											"end": 6845,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6864,
											"end": 6868,
											"name": "PUSH",
											"source": 19,
											"value": "11"
										},
										{
											"begin": 6861,
											"end": 6862,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 6854,
											"end": 6869,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6888,
											"end": 6892,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 6885,
											"end": 6886,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 6878,
											"end": 6893,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 6904,
											"end": 7039,
											"name": "tag",
											"source": 19,
											"value": "112"
										},
										{
											"begin": 6904,
											"end": 7039,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6943,
											"end": 6946,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 6964,
											"end": 6981,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 6964,
											"end": 6981,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6964,
											"end": 6981,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6961,
											"end": 7004,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "416"
										},
										{
											"begin": 6961,
											"end": 7004,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 6984,
											"end": 7002,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "416"
										},
										{
											"begin": 6984,
											"end": 7002,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "355"
										},
										{
											"begin": 6984,
											"end": 7002,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 6984,
											"end": 7002,
											"name": "tag",
											"source": 19,
											"value": "416"
										},
										{
											"begin": 6984,
											"end": 7002,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7031,
											"end": 7032,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 7020,
											"end": 7033,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7020,
											"end": 7033,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 6904,
											"end": 7039,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7044,
											"end": 7452,
											"name": "tag",
											"source": 19,
											"value": "116"
										},
										{
											"begin": 7044,
											"end": 7452,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7246,
											"end": 7248,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7228,
											"end": 7249,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 7228,
											"end": 7249,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7228,
											"end": 7249,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 7285,
											"end": 7287,
											"name": "PUSH",
											"source": 19,
											"value": "2C"
										},
										{
											"begin": 7265,
											"end": 7283,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 7265,
											"end": 7283,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7265,
											"end": 7283,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7258,
											"end": 7288,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 7324,
											"end": 7358,
											"name": "PUSH",
											"source": 19,
											"value": "46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820"
										},
										{
											"begin": 7319,
											"end": 7321,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 7304,
											"end": 7322,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7304,
											"end": 7322,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7297,
											"end": 7359,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "19195B1959D85D1958D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7390,
											"end": 7392,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 7375,
											"end": 7393,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7375,
											"end": 7393,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7368,
											"end": 7410,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 7442,
											"end": 7445,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 7427,
											"end": 7446,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7427,
											"end": 7446,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 7044,
											"end": 7452,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7457,
											"end": 7865,
											"name": "tag",
											"source": 19,
											"value": "121"
										},
										{
											"begin": 7457,
											"end": 7865,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7659,
											"end": 7661,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7641,
											"end": 7662,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 7641,
											"end": 7662,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7641,
											"end": 7662,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 7698,
											"end": 7700,
											"name": "PUSH",
											"source": 19,
											"value": "2C"
										},
										{
											"begin": 7678,
											"end": 7696,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 7678,
											"end": 7696,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7678,
											"end": 7696,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7671,
											"end": 7701,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 7737,
											"end": 7771,
											"name": "PUSH",
											"source": 19,
											"value": "46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820"
										},
										{
											"begin": 7732,
											"end": 7734,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 7717,
											"end": 7735,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7717,
											"end": 7735,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7710,
											"end": 7772,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6163746976652070726F7879"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7803,
											"end": 7805,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 7788,
											"end": 7806,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7788,
											"end": 7806,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7781,
											"end": 7823,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 7855,
											"end": 7858,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 7840,
											"end": 7859,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7840,
											"end": 7859,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 7457,
											"end": 7865,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 9414,
											"end": 9598,
											"name": "tag",
											"source": 19,
											"value": "190"
										},
										{
											"begin": 9414,
											"end": 9598,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9484,
											"end": 9490,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 9537,
											"end": 9539,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 9525,
											"end": 9534,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9516,
											"end": 9523,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 9512,
											"end": 9535,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 9508,
											"end": 9540,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 9505,
											"end": 9557,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 9505,
											"end": 9557,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "425"
										},
										{
											"begin": 9505,
											"end": 9557,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 9553,
											"end": 9554,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 9550,
											"end": 9551,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 9543,
											"end": 9555,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 9505,
											"end": 9557,
											"name": "tag",
											"source": 19,
											"value": "425"
										},
										{
											"begin": 9505,
											"end": 9557,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9576,
											"end": 9592,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 9576,
											"end": 9592,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 9414,
											"end": 9598,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9414,
											"end": 9598,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 9960,
											"end": 10177,
											"name": "tag",
											"source": 19,
											"value": "205"
										},
										{
											"begin": 9960,
											"end": 10177,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9998,
											"end": 10001,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10087,
											"end": 10089,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 10080,
											"end": 10085,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 10076,
											"end": 10090,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 10114,
											"end": 10116,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 10105,
											"end": 10112,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 10102,
											"end": 10117,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 10099,
											"end": 10140,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "429"
										},
										{
											"begin": 10099,
											"end": 10140,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 10120,
											"end": 10138,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "429"
										},
										{
											"begin": 10120,
											"end": 10138,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "355"
										},
										{
											"begin": 10120,
											"end": 10138,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 10120,
											"end": 10138,
											"name": "tag",
											"source": 19,
											"value": "429"
										},
										{
											"begin": 10120,
											"end": 10138,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 10169,
											"end": 10170,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 10156,
											"end": 10171,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10156,
											"end": 10171,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 9960,
											"end": 10177,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9960,
											"end": 10177,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 10894,
											"end": 11144,
											"name": "tag",
											"source": 19,
											"value": "356"
										},
										{
											"begin": 10894,
											"end": 11144,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 10979,
											"end": 10980,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 10989,
											"end": 11102,
											"name": "tag",
											"source": 19,
											"value": "433"
										},
										{
											"begin": 10989,
											"end": 11102,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 11003,
											"end": 11009,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 11000,
											"end": 11001,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 10997,
											"end": 11010,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 10989,
											"end": 11102,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 10989,
											"end": 11102,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "435"
										},
										{
											"begin": 10989,
											"end": 11102,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 11079,
											"end": 11090,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 11079,
											"end": 11090,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 11079,
											"end": 11090,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11073,
											"end": 11091,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 11060,
											"end": 11071,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 11060,
											"end": 11071,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11060,
											"end": 11071,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11053,
											"end": 11092,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11025,
											"end": 11027,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 11018,
											"end": 11028,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10989,
											"end": 11102,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "433"
										},
										{
											"begin": 10989,
											"end": 11102,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 10989,
											"end": 11102,
											"name": "tag",
											"source": 19,
											"value": "435"
										},
										{
											"begin": 10989,
											"end": 11102,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11136,
											"end": 11137,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 11118,
											"end": 11134,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 11118,
											"end": 11134,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11111,
											"end": 11138,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10894,
											"end": 11144,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 11149,
											"end": 11436,
											"name": "tag",
											"source": 19,
											"value": "223"
										},
										{
											"begin": 11149,
											"end": 11436,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 11278,
											"end": 11281,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 11316,
											"end": 11322,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11310,
											"end": 11323,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 11332,
											"end": 11398,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "437"
										},
										{
											"begin": 11391,
											"end": 11397,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 11386,
											"end": 11389,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 11379,
											"end": 11383,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 11371,
											"end": 11377,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 11367,
											"end": 11384,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11332,
											"end": 11398,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "356"
										},
										{
											"begin": 11332,
											"end": 11398,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 11332,
											"end": 11398,
											"name": "tag",
											"source": 19,
											"value": "437"
										},
										{
											"begin": 11332,
											"end": 11398,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 11414,
											"end": 11430,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 11414,
											"end": 11430,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 11414,
											"end": 11430,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 11414,
											"end": 11430,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11414,
											"end": 11430,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 11149,
											"end": 11436,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11149,
											"end": 11436,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 13208,
											"end": 13335,
											"name": "tag",
											"source": 19,
											"value": "291"
										},
										{
											"begin": 13208,
											"end": 13335,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13269,
											"end": 13279,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 13264,
											"end": 13267,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 13260,
											"end": 13280,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 13257,
											"end": 13258,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 13250,
											"end": 13281,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13300,
											"end": 13304,
											"name": "PUSH",
											"source": 19,
											"value": "21"
										},
										{
											"begin": 13297,
											"end": 13298,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 13290,
											"end": 13305,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13324,
											"end": 13328,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 13321,
											"end": 13322,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 13314,
											"end": 13329,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 15217,
											"end": 15613,
											"name": "tag",
											"source": 19,
											"value": "352"
										},
										{
											"begin": 15217,
											"end": 15613,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 15366,
											"end": 15368,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 15355,
											"end": 15364,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 15348,
											"end": 15369,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15329,
											"end": 15333,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 15398,
											"end": 15404,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 15392,
											"end": 15405,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 15441,
											"end": 15447,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 15436,
											"end": 15438,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 15425,
											"end": 15434,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 15421,
											"end": 15439,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15414,
											"end": 15448,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15457,
											"end": 15536,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "451"
										},
										{
											"begin": 15529,
											"end": 15535,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 15524,
											"end": 15526,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 15513,
											"end": 15522,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 15509,
											"end": 15527,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15504,
											"end": 15506,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 15496,
											"end": 15502,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 15492,
											"end": 15507,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15457,
											"end": 15536,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "356"
										},
										{
											"begin": 15457,
											"end": 15536,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 15457,
											"end": 15536,
											"name": "tag",
											"source": 19,
											"value": "451"
										},
										{
											"begin": 15457,
											"end": 15536,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 15597,
											"end": 15599,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 15576,
											"end": 15591,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15572,
											"end": 15601,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 15557,
											"end": 15602,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 15557,
											"end": 15602,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 15557,
											"end": 15602,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 15557,
											"end": 15602,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15604,
											"end": 15606,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 15553,
											"end": 15607,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15553,
											"end": 15607,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 15217,
											"end": 15613,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 15217,
											"end": 15613,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										}
									],
									".data": {
										"75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D": "360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc",
										"9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"
									}
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1967.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC1822.sol",
								"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
								"@openzeppelin/contracts/proxy/beacon/IBeacon.sol",
								"@openzeppelin/contracts/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"src/BaseAccount.sol",
								"src/SimpleAccount.sol",
								"src/interfaces/IAccount.sol",
								"src/interfaces/IAggregator.sol",
								"src/interfaces/IEntryPoint.sol",
								"src/interfaces/IStakeManager.sol",
								"src/interfaces/UserOperation.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"addDeposit()": "4a58db19",
							"entryPoint()": "b0d691fe",
							"execute(address,uint256,bytes)": "b61d27f6",
							"executeBatch(address[],bytes[])": "18dfb3c7",
							"getDeposit()": "c399ec88",
							"initialize(address,address)": "485cc955",
							"nonce()": "affed0e0",
							"owner()": "8da5cb5b",
							"proxiableUUID()": "52d1902d",
							"upgradeTo(address)": "3659cfe6",
							"upgradeToAndCall(address,bytes)": "4f1ef286",
							"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)": "0825d1fc",
							"withdrawDepositTo(address,uint256)": "4d44560d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"anEntryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SimpleAccountInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"func\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dest\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"func\",\"type\":\"bytes[]\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"anOwner\",\"type\":\"address\"},{\"internalType\":\"contract IEntryPoint\",\"name\":\"anEntryPoint\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sigTimeRange\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDepositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdrawDepositTo(address,uint256)\":{\"params\":{\"amount\":\"to withdraw\",\"withdrawAddress\":\"target to send to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addDeposit()\":{\"notice\":\"deposit more funds for this account in the entryPoint\"},\"entryPoint()\":{\"notice\":\"return the entryPoint used by this account. subclass should return the current entryPoint used by this account.\"},\"execute(address,uint256,bytes)\":{\"notice\":\"execute a transaction (called directly from owner, not by entryPoint)\"},\"executeBatch(address[],bytes[])\":{\"notice\":\"execute a sequence of transaction\"},\"getDeposit()\":{\"notice\":\"check current account deposit in the entryPoint\"},\"initialize(address,address)\":{\"notice\":\"change entry-point: an account must have a method for replacing the entryPoint, in case the the entryPoint is upgraded to a newer version.\"},\"nonce()\":{\"notice\":\"return the account nonce. subclass should return a nonce value that is used both by _validateAndUpdateNonce, and by the external provider (to read the current nonce)\"},\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)\":{\"notice\":\"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\"},\"withdrawDepositTo(address,uint256)\":{\"notice\":\"withdraw value from the account's deposit\"}},\"notice\":\"minimal account.  this is sample minimal account.  has execute, eth handling methods  has a single signer that can send requests through the entryPoint.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/SimpleAccount.sol\":\"SimpleAccount\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e8fa670c3bdce78e642cc6ae11c4cb38b133499cdce5e1990a9979d424703263\",\"dweb:/ipfs/QmVxeCUk4jL2pXQyhsoNJwyU874wRufS2WvGe8TgPKPqhE\"]},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688\",\"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr\"]},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2db8e18505e86e02526847005d7287a33e397ed7fb9eaba3fd4a4a197add16e2\",\"dweb:/ipfs/QmW9BSuKTzHWHBNSHF4L8XfVuU1uJrP2vLg84YtBd8mL82\"]},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://720d6bb56ea0c4ef781c0bd65c5bd0541f5a46100163b2587170f97658d2deed\",\"dweb:/ipfs/QmTS2biLVPrv8CeeXCaKmkFxonMiRvc1LxiYBRYDAJHQUS\"]},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0xc6619957bcc6641fe8984bfaf9ff11a9e4b97d8149c0495f608f9a2416d7c5cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://543be67f7fa43b1b932637c1c7f12035f0f4b0f7ee2bd3c33841186f79c165c1\",\"dweb:/ipfs/QmSBPM2UVKbmJqWfD9i6hSiqbaE8TV4TSqfuiivziRRLKM\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2\",\"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]},\"src/BaseAccount.sol\":{\"keccak256\":\"0x57e66dcc3232f4102a3e9cf8d9d19a21a96661c63576f3a3cef6a67b9e06bfb0\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://db305b392c5bb85633923890a2001750c467839e3b4f6eb1e8bb58e32814ba46\",\"dweb:/ipfs/QmeLCBdvPqqZqSiyd24tEpoyme3a4stxG1ZnHZr3ztMNyd\"]},\"src/SimpleAccount.sol\":{\"keccak256\":\"0x88e51af18abfa9102188661892ec23f54ef1b6fa57ef6d5b6933b8f27dba0683\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://3c77ed490d5b074c2f54f1fb5039ed25203d7c154bf9edc37870e3376e7c07a2\",\"dweb:/ipfs/QmNakkKrnA62ALSaq7L4tKEyAq3K63iZ94eFE8RRe5JaXe\"]},\"src/interfaces/IAccount.sol\":{\"keccak256\":\"0xc144258a10a8cb8d08342591d1356380264cc44590dd3c1ec41880058fe65e62\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://70dae4215a4fba71e5782f207270327de96478246c53f5dc3d8a0addbd6fca69\",\"dweb:/ipfs/QmeCRqxJZYwPxEGww1ciuwuZrLBFE5XNN4mhirSGXix4sn\"]},\"src/interfaces/IAggregator.sol\":{\"keccak256\":\"0x20e3940805ebd9bb5f6ba37277b542b770f2125947d9ed6408ec516914c9c567\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://87461a7033848f310494e416eebd4eedc692eb0e8506774c10f54a70adb7de6c\",\"dweb:/ipfs/QmQbg65EfAANExrbjL4RgqUnthpPkQzS1qgnMNw38puYdA\"]},\"src/interfaces/IEntryPoint.sol\":{\"keccak256\":\"0xf502df4283eae46510e840f924019d1a2da61455b8b129592eb5ebdd7759eac4\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9dc05f78607b6825811e5b8673d56cd9f9eaf9c3554e8b25694d563b6affcd8e\",\"dweb:/ipfs/QmfS9sNFcFiBz6DtoucdCsvB4CviupXm4pyjFnZbQ1MUjN\"]},\"src/interfaces/IStakeManager.sol\":{\"keccak256\":\"0xa2fa22a2604ca0c029afeb83c43654ca645bb34c22e4a4504d32585a56d32e06\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://fc0ed176006bfde8b6d21c71ba64bd104386220074486e4d1c0c178038d5f78a\",\"dweb:/ipfs/QmXfTr45vgg8iSxLYskWn1Su3ZvMj6LVuT8uSheAeAtUUz\"]},\"src/interfaces/UserOperation.sol\":{\"keccak256\":\"0x30cfb9573e66c4aa891e2059006310b3042494c602ff1a24ea39dc9ba1193789\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://fe8a5609d5dfb79bdccc57518c616bb4343a58878d0a84e2e9be6184edd3fe84\",\"dweb:/ipfs/QmVZ6jdbHsWBoww8nWfCYTm3wjCHuMUkbTufVN2thbKDwc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 351,
								"contract": "src/SimpleAccount.sol:SimpleAccount",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 354,
								"contract": "src/SimpleAccount.sol:SimpleAccount",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2832,
								"contract": "src/SimpleAccount.sol:SimpleAccount",
								"label": "_nonce",
								"offset": 2,
								"slot": "0",
								"type": "t_uint96"
							},
							{
								"astId": 2834,
								"contract": "src/SimpleAccount.sol:SimpleAccount",
								"label": "owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 2856,
								"contract": "src/SimpleAccount.sol:SimpleAccount",
								"label": "_entryPoint",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(IEntryPoint)3424"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IEntryPoint)3424": {
								"encoding": "inplace",
								"label": "contract IEntryPoint",
								"numberOfBytes": "20"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							},
							"t_uint96": {
								"encoding": "inplace",
								"label": "uint96",
								"numberOfBytes": "12"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"addDeposit()": {
								"notice": "deposit more funds for this account in the entryPoint"
							},
							"entryPoint()": {
								"notice": "return the entryPoint used by this account. subclass should return the current entryPoint used by this account."
							},
							"execute(address,uint256,bytes)": {
								"notice": "execute a transaction (called directly from owner, not by entryPoint)"
							},
							"executeBatch(address[],bytes[])": {
								"notice": "execute a sequence of transaction"
							},
							"getDeposit()": {
								"notice": "check current account deposit in the entryPoint"
							},
							"initialize(address,address)": {
								"notice": "change entry-point: an account must have a method for replacing the entryPoint, in case the the entryPoint is upgraded to a newer version."
							},
							"nonce()": {
								"notice": "return the account nonce. subclass should return a nonce value that is used both by _validateAndUpdateNonce, and by the external provider (to read the current nonce)"
							},
							"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)": {
								"notice": "Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."
							},
							"withdrawDepositTo(address,uint256)": {
								"notice": "withdraw value from the account's deposit"
							}
						},
						"notice": "minimal account.  this is sample minimal account.  has execute, eth handling methods  has a single signer that can send requests through the entryPoint.",
						"version": 1
					}
				}
			},
			"src/interfaces/IAccount.sol": {
				"IAccount": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation",
									"name": "userOp",
									"type": "tuple"
								},
								{
									"internalType": "bytes32",
									"name": "userOpHash",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "aggregator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "missingAccountFunds",
									"type": "uint256"
								}
							],
							"name": "validateUserOp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "sigTimeRange",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)": {
								"details": "Must validate caller is the entryPoint.      Must validate the signature and nonce",
								"params": {
									"aggregator": "the aggregator used to validate the signature. NULL for non-aggregated signature accounts.",
									"missingAccountFunds": "missing funds on the account's deposit in the entrypoint.      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \"entryPoint.withdrawTo()\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.",
									"userOp": "the operation that is about to be executed.",
									"userOpHash": "hash of the user's request data. can be used as the basis for signature."
								},
								"returns": {
									"sigTimeRange": "signature and time-range of this operation      <byte> sigFailure - (1) to mark signature failure, 0 for valid signature.      <8-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <8-byte> validAfter - first timestamp this operation is valid      The an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.      Note that the validation code cannot use block.timestamp (or block.number) directly."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)": "0825d1fc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sigTimeRange\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)\":{\"details\":\"Must validate caller is the entryPoint.      Must validate the signature and nonce\",\"params\":{\"aggregator\":\"the aggregator used to validate the signature. NULL for non-aggregated signature accounts.\",\"missingAccountFunds\":\"missing funds on the account's deposit in the entrypoint.      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\",\"userOp\":\"the operation that is about to be executed.\",\"userOpHash\":\"hash of the user's request data. can be used as the basis for signature.\"},\"returns\":{\"sigTimeRange\":\"signature and time-range of this operation      <byte> sigFailure - (1) to mark signature failure, 0 for valid signature.      <8-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"      <8-byte> validAfter - first timestamp this operation is valid      The an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.      Note that the validation code cannot use block.timestamp (or block.number) directly.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)\":{\"notice\":\"Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \\\"simulation call\\\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IAccount.sol\":\"IAccount\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/interfaces/IAccount.sol\":{\"keccak256\":\"0xc144258a10a8cb8d08342591d1356380264cc44590dd3c1ec41880058fe65e62\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://70dae4215a4fba71e5782f207270327de96478246c53f5dc3d8a0addbd6fca69\",\"dweb:/ipfs/QmeCRqxJZYwPxEGww1ciuwuZrLBFE5XNN4mhirSGXix4sn\"]},\"src/interfaces/UserOperation.sol\":{\"keccak256\":\"0x30cfb9573e66c4aa891e2059006310b3042494c602ff1a24ea39dc9ba1193789\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://fe8a5609d5dfb79bdccc57518c616bb4343a58878d0a84e2e9be6184edd3fe84\",\"dweb:/ipfs/QmVZ6jdbHsWBoww8nWfCYTm3wjCHuMUkbTufVN2thbKDwc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)": {
								"notice": "Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \"simulation call\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure."
							}
						},
						"version": 1
					}
				}
			},
			"src/interfaces/IAggregator.sol": {
				"IAggregator": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation[]",
									"name": "userOps",
									"type": "tuple[]"
								}
							],
							"name": "aggregateSignatures",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "aggregatesSignature",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation[]",
									"name": "userOps",
									"type": "tuple[]"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "validateSignatures",
							"outputs": [],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation",
									"name": "userOp",
									"type": "tuple"
								}
							],
							"name": "validateUserOpSignature",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "sigForUserOp",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": {
								"params": {
									"userOps": "array of UserOperations to collect the signatures from."
								},
								"returns": {
									"aggregatesSignature": "the aggregated signature"
								}
							},
							"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
								"params": {
									"userOp": "the userOperation received from the user."
								},
								"returns": {
									"sigForUserOp": "the value to put into the signature field of the userOp when calling handleOps.    (usually empty, unless account and aggregator support some kind of \"multisig\""
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": "275e2d79",
							"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)": "e3563a4f",
							"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": "64c530cd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"}],\"name\":\"aggregateSignatures\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregatesSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"validateUserOpSignature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"sigForUserOp\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\":{\"params\":{\"userOps\":\"array of UserOperations to collect the signatures from.\"},\"returns\":{\"aggregatesSignature\":\"the aggregated signature\"}},\"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"params\":{\"userOp\":\"the userOperation received from the user.\"},\"returns\":{\"sigForUserOp\":\"the value to put into the signature field of the userOp when calling handleOps.    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\":{\"notice\":\"aggregate multiple signatures into a single value. This method is called off-chain to calculate the signature to pass with handleOps() bundler MAY use optimized custom code perform this aggregation\"},\"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)\":{\"notice\":\"validate aggregated signature. revert if the aggregated signature does not match the given list of operations.\"},\"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"validate signature of a single userOp This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation First it validates the signature over the userOp. then it return data to be used when creating the handleOps:\"}},\"notice\":\"Aggregated Signatures validator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IAggregator.sol\":\"IAggregator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/interfaces/IAggregator.sol\":{\"keccak256\":\"0x20e3940805ebd9bb5f6ba37277b542b770f2125947d9ed6408ec516914c9c567\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://87461a7033848f310494e416eebd4eedc692eb0e8506774c10f54a70adb7de6c\",\"dweb:/ipfs/QmQbg65EfAANExrbjL4RgqUnthpPkQzS1qgnMNw38puYdA\"]},\"src/interfaces/UserOperation.sol\":{\"keccak256\":\"0x30cfb9573e66c4aa891e2059006310b3042494c602ff1a24ea39dc9ba1193789\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://fe8a5609d5dfb79bdccc57518c616bb4343a58878d0a84e2e9be6184edd3fe84\",\"dweb:/ipfs/QmVZ6jdbHsWBoww8nWfCYTm3wjCHuMUkbTufVN2thbKDwc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": {
								"notice": "aggregate multiple signatures into a single value. This method is called off-chain to calculate the signature to pass with handleOps() bundler MAY use optimized custom code perform this aggregation"
							},
							"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)": {
								"notice": "validate aggregated signature. revert if the aggregated signature does not match the given list of operations."
							},
							"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
								"notice": "validate signature of a single userOp This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation First it validates the signature over the userOp. then it return data to be used when creating the handleOps:"
							}
						},
						"notice": "Aggregated Signatures validator.",
						"version": 1
					}
				}
			},
			"src/interfaces/IEntryPoint.sol": {
				"IEntryPoint": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "preOpGas",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "paid",
									"type": "uint256"
								},
								{
									"internalType": "uint64",
									"name": "validAfter",
									"type": "uint64"
								},
								{
									"internalType": "uint64",
									"name": "validBefore",
									"type": "uint64"
								}
							],
							"name": "ExecutionResult",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "opIndex",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "paymaster",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "reason",
									"type": "string"
								}
							],
							"name": "FailedOp",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "SenderAddressResult",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "aggregator",
									"type": "address"
								}
							],
							"name": "SignatureValidationFailed",
							"type": "error"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "preOpGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "prefund",
											"type": "uint256"
										},
										{
											"internalType": "bool",
											"name": "sigFailed",
											"type": "bool"
										},
										{
											"internalType": "uint64",
											"name": "validAfter",
											"type": "uint64"
										},
										{
											"internalType": "uint64",
											"name": "validUntil",
											"type": "uint64"
										},
										{
											"internalType": "bytes",
											"name": "paymasterContext",
											"type": "bytes"
										}
									],
									"internalType": "struct IEntryPoint.ReturnInfo",
									"name": "returnInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "stake",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "unstakeDelaySec",
											"type": "uint256"
										}
									],
									"internalType": "struct IStakeManager.StakeInfo",
									"name": "senderInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "stake",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "unstakeDelaySec",
											"type": "uint256"
										}
									],
									"internalType": "struct IStakeManager.StakeInfo",
									"name": "factoryInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "stake",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "unstakeDelaySec",
											"type": "uint256"
										}
									],
									"internalType": "struct IStakeManager.StakeInfo",
									"name": "paymasterInfo",
									"type": "tuple"
								}
							],
							"name": "ValidationResult",
							"type": "error"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "preOpGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "prefund",
											"type": "uint256"
										},
										{
											"internalType": "bool",
											"name": "sigFailed",
											"type": "bool"
										},
										{
											"internalType": "uint64",
											"name": "validAfter",
											"type": "uint64"
										},
										{
											"internalType": "uint64",
											"name": "validUntil",
											"type": "uint64"
										},
										{
											"internalType": "bytes",
											"name": "paymasterContext",
											"type": "bytes"
										}
									],
									"internalType": "struct IEntryPoint.ReturnInfo",
									"name": "returnInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "stake",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "unstakeDelaySec",
											"type": "uint256"
										}
									],
									"internalType": "struct IStakeManager.StakeInfo",
									"name": "senderInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "stake",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "unstakeDelaySec",
											"type": "uint256"
										}
									],
									"internalType": "struct IStakeManager.StakeInfo",
									"name": "factoryInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "stake",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "unstakeDelaySec",
											"type": "uint256"
										}
									],
									"internalType": "struct IStakeManager.StakeInfo",
									"name": "paymasterInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "actualAggregator",
											"type": "address"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "stake",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "unstakeDelaySec",
													"type": "uint256"
												}
											],
											"internalType": "struct IStakeManager.StakeInfo",
											"name": "stakeInfo",
											"type": "tuple"
										}
									],
									"internalType": "struct IEntryPoint.AggregatorStakeInfo",
									"name": "aggregatorInfo",
									"type": "tuple"
								}
							],
							"name": "ValidationResultWithAggregation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "userOpHash",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "factory",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "paymaster",
									"type": "address"
								}
							],
							"name": "AccountDeployed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "totalDeposit",
									"type": "uint256"
								}
							],
							"name": "Deposited",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "aggregator",
									"type": "address"
								}
							],
							"name": "SignatureAggregatorChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "totalStaked",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "withdrawTime",
									"type": "uint256"
								}
							],
							"name": "StakeLocked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "withdrawTime",
									"type": "uint256"
								}
							],
							"name": "StakeUnlocked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "StakeWithdrawn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "userOpHash",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "paymaster",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "actualGasCost",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "actualGasUsed",
									"type": "uint256"
								}
							],
							"name": "UserOperationEvent",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "userOpHash",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "revertReason",
									"type": "bytes"
								}
							],
							"name": "UserOperationRevertReason",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Withdrawn",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "_unstakeDelaySec",
									"type": "uint32"
								}
							],
							"name": "addStake",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "depositTo",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getDepositInfo",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint112",
											"name": "deposit",
											"type": "uint112"
										},
										{
											"internalType": "bool",
											"name": "staked",
											"type": "bool"
										},
										{
											"internalType": "uint112",
											"name": "stake",
											"type": "uint112"
										},
										{
											"internalType": "uint32",
											"name": "unstakeDelaySec",
											"type": "uint32"
										},
										{
											"internalType": "uint64",
											"name": "withdrawTime",
											"type": "uint64"
										}
									],
									"internalType": "struct IStakeManager.DepositInfo",
									"name": "info",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "initCode",
									"type": "bytes"
								}
							],
							"name": "getSenderAddress",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation",
									"name": "userOp",
									"type": "tuple"
								}
							],
							"name": "getUserOpHash",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "sender",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "nonce",
													"type": "uint256"
												},
												{
													"internalType": "bytes",
													"name": "initCode",
													"type": "bytes"
												},
												{
													"internalType": "bytes",
													"name": "callData",
													"type": "bytes"
												},
												{
													"internalType": "uint256",
													"name": "callGasLimit",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "verificationGasLimit",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "preVerificationGas",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "maxFeePerGas",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "maxPriorityFeePerGas",
													"type": "uint256"
												},
												{
													"internalType": "bytes",
													"name": "paymasterAndData",
													"type": "bytes"
												},
												{
													"internalType": "bytes",
													"name": "signature",
													"type": "bytes"
												}
											],
											"internalType": "struct UserOperation[]",
											"name": "userOps",
											"type": "tuple[]"
										},
										{
											"internalType": "contract IAggregator",
											"name": "aggregator",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct IEntryPoint.UserOpsPerAggregator[]",
									"name": "opsPerAggregator",
									"type": "tuple[]"
								},
								{
									"internalType": "address payable",
									"name": "beneficiary",
									"type": "address"
								}
							],
							"name": "handleAggregatedOps",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation[]",
									"name": "ops",
									"type": "tuple[]"
								},
								{
									"internalType": "address payable",
									"name": "beneficiary",
									"type": "address"
								}
							],
							"name": "handleOps",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation",
									"name": "op",
									"type": "tuple"
								}
							],
							"name": "simulateHandleOp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation",
									"name": "userOp",
									"type": "tuple"
								}
							],
							"name": "simulateValidation",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unlockStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "withdrawAddress",
									"type": "address"
								}
							],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "withdrawAmount",
									"type": "uint256"
								}
							],
							"name": "withdrawTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"FailedOp(uint256,address,string)": [
								{
									"params": {
										"opIndex": "- index into the array of ops to the failed one (in simulateValidation, this is always zero)",
										"paymaster": "- if paymaster.validatePaymasterUserOp fails, this will be the paymaster's address. if validateUserOp failed,       this value will be zero (since it failed before accessing the paymaster)",
										"reason": "- revert reason   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of account/paymaster reverts."
									}
								}
							],
							"ValidationResult((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))": [
								{
									"params": {
										"factoryInfo": "stake information about the factor (if any)",
										"paymasterInfo": "stake information about the paymaster (if any)",
										"returnInfo": "gas and time-range returned values",
										"senderInfo": "stake information about the sender"
									}
								}
							],
							"ValidationResultWithAggregation((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))": [
								{
									"params": {
										"aggregatorInfo": "signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation",
										"factoryInfo": "stake information about the factor (if any)",
										"paymasterInfo": "stake information about the paymaster (if any)",
										"returnInfo": "gas and time-range returned values",
										"senderInfo": "stake information about the sender"
									}
								}
							]
						},
						"events": {
							"AccountDeployed(bytes32,address,address,address)": {
								"params": {
									"factory": "the factory used to deploy this account (in the initCode)",
									"paymaster": "the paymaster used by this UserOp",
									"sender": "the account that is deployed",
									"userOpHash": "the userOp that deployed this account. UserOperationEvent will follow."
								}
							},
							"UserOperationRevertReason(bytes32,address,uint256,bytes)": {
								"params": {
									"nonce": "the nonce used in the request",
									"revertReason": "- the return bytes from the (reverted) call to \"callData\".",
									"sender": "the sender of this request",
									"userOpHash": "the request unique identifier."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"addStake(uint32)": {
								"params": {
									"_unstakeDelaySec": "the new lock duration before the deposit can be withdrawn."
								}
							},
							"getSenderAddress(bytes)": {
								"params": {
									"initCode": "the constructor code to be passed into the UserOperation."
								}
							},
							"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": {
								"params": {
									"beneficiary": "the address to receive the fees",
									"opsPerAggregator": "the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)"
								}
							},
							"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": {
								"params": {
									"beneficiary": "the address to receive the fees",
									"ops": "the operations to execute"
								}
							},
							"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
								"details": "this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.",
								"params": {
									"userOp": "the user operation to validate."
								}
							},
							"withdrawStake(address)": {
								"params": {
									"withdrawAddress": "the address to send withdrawn value."
								}
							},
							"withdrawTo(address,uint256)": {
								"params": {
									"withdrawAddress": "the address to send withdrawn value.",
									"withdrawAmount": "the amount to withdraw."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addStake(uint32)": "0396cb60",
							"balanceOf(address)": "70a08231",
							"depositTo(address)": "b760faf9",
							"getDepositInfo(address)": "5287ce12",
							"getSenderAddress(bytes)": "9b249f69",
							"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": "a6193531",
							"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": "4b1d7cf5",
							"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": "1fad948c",
							"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": "c2077116",
							"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": "ee219423",
							"unlockStake()": "bb9fe6bf",
							"withdrawStake(address)": "c23a5cea",
							"withdrawTo(address,uint256)": "205c2878"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"validAfter\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validBefore\",\"type\":\"uint64\"}],\"name\":\"ExecutionResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedOp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderAddressResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureValidationFailed\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"validAfter\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResult\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"validAfter\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"actualAggregator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"stakeInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct IEntryPoint.AggregatorStakeInfo\",\"name\":\"aggregatorInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResultWithAggregation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"}],\"name\":\"AccountDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureAggregatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasUsed\",\"type\":\"uint256\"}],\"name\":\"UserOperationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"UserOperationRevertReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"withdrawTime\",\"type\":\"uint64\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"getSenderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"getUserOpHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAggregator\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.UserOpsPerAggregator[]\",\"name\":\"opsPerAggregator\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleAggregatedOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"op\",\"type\":\"tuple\"}],\"name\":\"simulateHandleOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"simulateValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedOp(uint256,address,string)\":[{\"params\":{\"opIndex\":\"- index into the array of ops to the failed one (in simulateValidation, this is always zero)\",\"paymaster\":\"- if paymaster.validatePaymasterUserOp fails, this will be the paymaster's address. if validateUserOp failed,       this value will be zero (since it failed before accessing the paymaster)\",\"reason\":\"- revert reason   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of account/paymaster reverts.\"}}],\"ValidationResult((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"params\":{\"factoryInfo\":\"stake information about the factor (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"params\":{\"aggregatorInfo\":\"signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation\",\"factoryInfo\":\"stake information about the factor (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"params\":{\"factory\":\"the factory used to deploy this account (in the initCode)\",\"paymaster\":\"the paymaster used by this UserOp\",\"sender\":\"the account that is deployed\",\"userOpHash\":\"the userOp that deployed this account. UserOperationEvent will follow.\"}},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"params\":{\"nonce\":\"the nonce used in the request\",\"revertReason\":\"- the return bytes from the (reverted) call to \\\"callData\\\".\",\"sender\":\"the sender of this request\",\"userOpHash\":\"the request unique identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"_unstakeDelaySec\":\"the new lock duration before the deposit can be withdrawn.\"}},\"getSenderAddress(bytes)\":{\"params\":{\"initCode\":\"the constructor code to be passed into the UserOperation.\"}},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"opsPerAggregator\":\"the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\"}},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"ops\":\"the operations to execute\"}},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"details\":\"this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\",\"params\":{\"userOp\":\"the user operation to validate.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"FailedOp(uint256,address,string)\":[{\"notice\":\"a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\"}],\"SenderAddressResult(address)\":[{\"notice\":\"return value of getSenderAddress\"}],\"SignatureValidationFailed(address)\":[{\"notice\":\"error case when a signature aggregator fails to verify the aggregated signature it had created.\"}],\"ValidationResult((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"notice\":\"Successful result from simulateValidation.\"}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"notice\":\"Successful result from simulateValidation, if the account returns a signature aggregator\"}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"notice\":\"account \\\"sender\\\" was deployed.\"},\"SignatureAggregatorChanged(address)\":{\"notice\":\"signature aggregator used by the following UserOperationEvents within this bundle.\"},\"StakeLocked(address,uint256,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"},\"StakeUnlocked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"notice\":\"An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\"}},\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"balanceOf(address)\":{\"notice\":\"return the deposit (for gas payment) of the account\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"getSenderAddress(bytes)\":{\"notice\":\"Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error\"},\"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\"},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation with Aggregators\"},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation. no signature aggregator is used. if any account requires an aggregator (that is, it returned an \\\"actualAggregator\\\" when performing simulateValidation), then handleAggregatedOps() must be used instead.\"},\"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \\\"ExecutionResult\\\". it performs full validation of the UserOperation, but ignores signature error. Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events.\"},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\"},\"unlockStake()\":{\"notice\":\"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IEntryPoint.sol\":\"IEntryPoint\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/interfaces/IAggregator.sol\":{\"keccak256\":\"0x20e3940805ebd9bb5f6ba37277b542b770f2125947d9ed6408ec516914c9c567\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://87461a7033848f310494e416eebd4eedc692eb0e8506774c10f54a70adb7de6c\",\"dweb:/ipfs/QmQbg65EfAANExrbjL4RgqUnthpPkQzS1qgnMNw38puYdA\"]},\"src/interfaces/IEntryPoint.sol\":{\"keccak256\":\"0xf502df4283eae46510e840f924019d1a2da61455b8b129592eb5ebdd7759eac4\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9dc05f78607b6825811e5b8673d56cd9f9eaf9c3554e8b25694d563b6affcd8e\",\"dweb:/ipfs/QmfS9sNFcFiBz6DtoucdCsvB4CviupXm4pyjFnZbQ1MUjN\"]},\"src/interfaces/IStakeManager.sol\":{\"keccak256\":\"0xa2fa22a2604ca0c029afeb83c43654ca645bb34c22e4a4504d32585a56d32e06\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://fc0ed176006bfde8b6d21c71ba64bd104386220074486e4d1c0c178038d5f78a\",\"dweb:/ipfs/QmXfTr45vgg8iSxLYskWn1Su3ZvMj6LVuT8uSheAeAtUUz\"]},\"src/interfaces/UserOperation.sol\":{\"keccak256\":\"0x30cfb9573e66c4aa891e2059006310b3042494c602ff1a24ea39dc9ba1193789\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://fe8a5609d5dfb79bdccc57518c616bb4343a58878d0a84e2e9be6184edd3fe84\",\"dweb:/ipfs/QmVZ6jdbHsWBoww8nWfCYTm3wjCHuMUkbTufVN2thbKDwc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"FailedOp(uint256,address,string)": [
								{
									"notice": "a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it."
								}
							],
							"SenderAddressResult(address)": [
								{
									"notice": "return value of getSenderAddress"
								}
							],
							"SignatureValidationFailed(address)": [
								{
									"notice": "error case when a signature aggregator fails to verify the aggregated signature it had created."
								}
							],
							"ValidationResult((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))": [
								{
									"notice": "Successful result from simulateValidation."
								}
							],
							"ValidationResultWithAggregation((uint256,uint256,bool,uint64,uint64,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))": [
								{
									"notice": "Successful result from simulateValidation, if the account returns a signature aggregator"
								}
							]
						},
						"events": {
							"AccountDeployed(bytes32,address,address,address)": {
								"notice": "account \"sender\" was deployed."
							},
							"SignatureAggregatorChanged(address)": {
								"notice": "signature aggregator used by the following UserOperationEvents within this bundle."
							},
							"StakeLocked(address,uint256,uint256)": {
								"notice": "Emitted once a stake is scheduled for withdrawal"
							},
							"StakeUnlocked(address,uint256)": {
								"notice": "Emitted once a stake is scheduled for withdrawal"
							},
							"UserOperationRevertReason(bytes32,address,uint256,bytes)": {
								"notice": "An event emitted if the UserOperation \"callData\" reverted with non-zero length"
							}
						},
						"kind": "user",
						"methods": {
							"addStake(uint32)": {
								"notice": "add to the account's stake - amount and delay any pending unstake is first cancelled."
							},
							"balanceOf(address)": {
								"notice": "return the deposit (for gas payment) of the account"
							},
							"depositTo(address)": {
								"notice": "add to the deposit of the given account"
							},
							"getSenderAddress(bytes)": {
								"notice": "Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error"
							},
							"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
								"notice": "generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."
							},
							"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": {
								"notice": "Execute a batch of UserOperation with Aggregators"
							},
							"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": {
								"notice": "Execute a batch of UserOperation. no signature aggregator is used. if any account requires an aggregator (that is, it returned an \"actualAggregator\" when performing simulateValidation), then handleAggregatedOps() must be used instead."
							},
							"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
								"notice": "simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \"ExecutionResult\". it performs full validation of the UserOperation, but ignores signature error. Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events."
							},
							"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
								"notice": "Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp."
							},
							"unlockStake()": {
								"notice": "attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."
							},
							"withdrawStake(address)": {
								"notice": "withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"
							},
							"withdrawTo(address,uint256)": {
								"notice": "withdraw from the deposit."
							}
						},
						"version": 1
					}
				}
			},
			"src/interfaces/IStakeManager.sol": {
				"IStakeManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "totalDeposit",
									"type": "uint256"
								}
							],
							"name": "Deposited",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "totalStaked",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "withdrawTime",
									"type": "uint256"
								}
							],
							"name": "StakeLocked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "withdrawTime",
									"type": "uint256"
								}
							],
							"name": "StakeUnlocked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "StakeWithdrawn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Withdrawn",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "_unstakeDelaySec",
									"type": "uint32"
								}
							],
							"name": "addStake",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "depositTo",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getDepositInfo",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint112",
											"name": "deposit",
											"type": "uint112"
										},
										{
											"internalType": "bool",
											"name": "staked",
											"type": "bool"
										},
										{
											"internalType": "uint112",
											"name": "stake",
											"type": "uint112"
										},
										{
											"internalType": "uint32",
											"name": "unstakeDelaySec",
											"type": "uint32"
										},
										{
											"internalType": "uint64",
											"name": "withdrawTime",
											"type": "uint64"
										}
									],
									"internalType": "struct IStakeManager.DepositInfo",
									"name": "info",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unlockStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "withdrawAddress",
									"type": "address"
								}
							],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "withdrawAmount",
									"type": "uint256"
								}
							],
							"name": "withdrawTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addStake(uint32)": {
								"params": {
									"_unstakeDelaySec": "the new lock duration before the deposit can be withdrawn."
								}
							},
							"withdrawStake(address)": {
								"params": {
									"withdrawAddress": "the address to send withdrawn value."
								}
							},
							"withdrawTo(address,uint256)": {
								"params": {
									"withdrawAddress": "the address to send withdrawn value.",
									"withdrawAmount": "the amount to withdraw."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addStake(uint32)": "0396cb60",
							"balanceOf(address)": "70a08231",
							"depositTo(address)": "b760faf9",
							"getDepositInfo(address)": "5287ce12",
							"unlockStake()": "bb9fe6bf",
							"withdrawStake(address)": "c23a5cea",
							"withdrawTo(address,uint256)": "205c2878"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"withdrawTime\",\"type\":\"uint64\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"_unstakeDelaySec\":\"the new lock duration before the deposit can be withdrawn.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"StakeLocked(address,uint256,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"},\"StakeUnlocked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"}},\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"balanceOf(address)\":{\"notice\":\"return the deposit (for gas payment) of the account\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"unlockStake()\":{\"notice\":\"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit.\"}},\"notice\":\"manage deposits and stakes. deposit is just a balance used to pay for UserOperations (either by a paymaster or an account) stake is value locked for at least \\\"unstakeDelay\\\" by a paymaster.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IStakeManager.sol\":\"IStakeManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/interfaces/IStakeManager.sol\":{\"keccak256\":\"0xa2fa22a2604ca0c029afeb83c43654ca645bb34c22e4a4504d32585a56d32e06\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://fc0ed176006bfde8b6d21c71ba64bd104386220074486e4d1c0c178038d5f78a\",\"dweb:/ipfs/QmXfTr45vgg8iSxLYskWn1Su3ZvMj6LVuT8uSheAeAtUUz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"StakeLocked(address,uint256,uint256)": {
								"notice": "Emitted once a stake is scheduled for withdrawal"
							},
							"StakeUnlocked(address,uint256)": {
								"notice": "Emitted once a stake is scheduled for withdrawal"
							}
						},
						"kind": "user",
						"methods": {
							"addStake(uint32)": {
								"notice": "add to the account's stake - amount and delay any pending unstake is first cancelled."
							},
							"balanceOf(address)": {
								"notice": "return the deposit (for gas payment) of the account"
							},
							"depositTo(address)": {
								"notice": "add to the deposit of the given account"
							},
							"unlockStake()": {
								"notice": "attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."
							},
							"withdrawStake(address)": {
								"notice": "withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"
							},
							"withdrawTo(address,uint256)": {
								"notice": "withdraw from the deposit."
							}
						},
						"notice": "manage deposits and stakes. deposit is just a balance used to pay for UserOperations (either by a paymaster or an account) stake is value locked for at least \"unstakeDelay\" by a paymaster.",
						"version": 1
					}
				}
			},
			"src/interfaces/UserOperation.sol": {
				"UserOperationLib": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/interfaces/UserOperation.sol\":1429:3316  library UserOperationLib {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/interfaces/UserOperation.sol\":1429:3316  library UserOperationLib {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220fe48087f0ba57217cf2c7173e806df9d4c59c51876c603cefa13b54550c26db564736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fe48087f0ba57217cf2c7173e806df9d4c59c51876c603cefa13b54550c26db564736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID BASEFEE ADDMOD PUSH32 0xBA57217CF2C7173E806DF9D4C59C51876C603CEFA13B54550C26DB564736F6C PUSH4 0x43000812 STOP CALLER ",
							"sourceMap": "1429:1887:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1429:1887:18;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fe48087f0ba57217cf2c7173e806df9d4c59c51876c603cefa13b54550c26db564736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID BASEFEE ADDMOD PUSH32 0xBA57217CF2C7173E806DF9D4C59C51876C603CEFA13B54550C26DB564736F6C PUSH4 0x43000812 STOP CALLER ",
							"sourceMap": "1429:1887:18:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"gasPrice(struct UserOperation calldata)": "infinite",
								"getSender(struct UserOperation calldata)": "infinite",
								"hash(struct UserOperation calldata)": "infinite",
								"min(uint256,uint256)": "infinite",
								"pack(struct UserOperation calldata)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "BYTE",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "ADDRESS",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "MSTORE8",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1429,
									"end": 3316,
									"name": "RETURN",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fe48087f0ba57217cf2c7173e806df9d4c59c51876c603cefa13b54550c26db564736f6c63430008120033",
									".code": [
										{
											"begin": 1429,
											"end": 3316,
											"name": "PUSHDEPLOYADDRESS",
											"source": 18
										},
										{
											"begin": 1429,
											"end": 3316,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 1429,
											"end": 3316,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1429,
											"end": 3316,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 1429,
											"end": 3316,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1429,
											"end": 3316,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1429,
											"end": 3316,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1429,
											"end": 3316,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1429,
											"end": 3316,
											"name": "REVERT",
											"source": 18
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1967.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC1822.sol",
								"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
								"@openzeppelin/contracts/proxy/beacon/IBeacon.sol",
								"@openzeppelin/contracts/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"src/BaseAccount.sol",
								"src/SimpleAccount.sol",
								"src/interfaces/IAccount.sol",
								"src/interfaces/IAggregator.sol",
								"src/interfaces/IEntryPoint.sol",
								"src/interfaces/IStakeManager.sol",
								"src/interfaces/UserOperation.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/UserOperation.sol\":\"UserOperationLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/interfaces/UserOperation.sol\":{\"keccak256\":\"0x30cfb9573e66c4aa891e2059006310b3042494c602ff1a24ea39dc9ba1193789\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://fe8a5609d5dfb79bdccc57518c616bb4343a58878d0a84e2e9be6184edd3fe84\",\"dweb:/ipfs/QmVZ6jdbHsWBoww8nWfCYTm3wjCHuMUkbTufVN2thbKDwc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/interfaces/IERC1967.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC1967.sol",
					"exportedSymbols": {
						"IERC1967": [
							20
						]
					},
					"id": 21,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1967",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "132:133:0",
								"text": " @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.8.3._"
							},
							"fullyImplemented": true,
							"id": 20,
							"linearizedBaseContracts": [
								20
							],
							"name": "IERC1967",
							"nameLocation": "276:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "291:68:0",
										"text": " @dev Emitted when the implementation is upgraded."
									},
									"eventSelector": "bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
									"id": 7,
									"name": "Upgraded",
									"nameLocation": "370:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "395:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 7,
												"src": "379:30:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "379:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "378:32:0"
									},
									"src": "364:47:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 8,
										"nodeType": "StructuredDocumentation",
										"src": "417:67:0",
										"text": " @dev Emitted when the admin account has changed."
									},
									"eventSelector": "7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f",
									"id": 14,
									"name": "AdminChanged",
									"nameLocation": "495:12:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"indexed": false,
												"mutability": "mutable",
												"name": "previousAdmin",
												"nameLocation": "516:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "508:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 9,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "508:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"indexed": false,
												"mutability": "mutable",
												"name": "newAdmin",
												"nameLocation": "539:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "531:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "531:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "507:41:0"
									},
									"src": "489:60:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "555:59:0",
										"text": " @dev Emitted when the beacon is changed."
									},
									"eventSelector": "1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e",
									"id": 19,
									"name": "BeaconUpgraded",
									"nameLocation": "625:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"indexed": true,
												"mutability": "mutable",
												"name": "beacon",
												"nameLocation": "656:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "640:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 16,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "640:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "639:24:0"
									},
									"src": "619:45:0"
								}
							],
							"scope": 21,
							"src": "266:400:0",
							"usedErrors": []
						}
					],
					"src": "107:560:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol",
					"exportedSymbols": {
						"IERC1822Proxiable": [
							30
						]
					},
					"id": 31,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 22,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1822Proxiable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 23,
								"nodeType": "StructuredDocumentation",
								"src": "138:203:1",
								"text": " @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."
							},
							"fullyImplemented": false,
							"id": 30,
							"linearizedBaseContracts": [
								30
							],
							"name": "IERC1822Proxiable",
							"nameLocation": "352:17:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "376:438:1",
										"text": " @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."
									},
									"functionSelector": "52d1902d",
									"id": 29,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "proxiableUUID",
									"nameLocation": "828:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "841:2:1"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "867:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 26,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:9:1"
									},
									"scope": 30,
									"src": "819:57:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 31,
							"src": "342:536:1",
							"usedErrors": []
						}
					],
					"src": "113:766:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
					"exportedSymbols": {
						"Address": [
							959
						],
						"ERC1967Upgrade": [
							334
						],
						"IBeacon": [
							344
						],
						"IERC1822Proxiable": [
							30
						],
						"IERC1967": [
							20
						],
						"StorageSlot": [
							1069
						]
					},
					"id": 335,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 32,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol",
							"file": "../beacon/IBeacon.sol",
							"id": 33,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 335,
							"sourceUnit": 345,
							"src": "141:31:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC1967.sol",
							"file": "../../interfaces/IERC1967.sol",
							"id": 34,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 335,
							"sourceUnit": 21,
							"src": "173:39:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol",
							"file": "../../interfaces/draft-IERC1822.sol",
							"id": 35,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 335,
							"sourceUnit": 31,
							"src": "213:45:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../utils/Address.sol",
							"id": 36,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 335,
							"sourceUnit": 960,
							"src": "259:33:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
							"file": "../../utils/StorageSlot.sol",
							"id": 37,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 335,
							"sourceUnit": 1070,
							"src": "293:37:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 39,
										"name": "IERC1967",
										"nameLocations": [
											"553:8:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 20,
										"src": "553:8:2"
									},
									"id": 40,
									"nodeType": "InheritanceSpecifier",
									"src": "553:8:2"
								}
							],
							"canonicalName": "ERC1967Upgrade",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 38,
								"nodeType": "StructuredDocumentation",
								"src": "332:184:2",
								"text": " @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._"
							},
							"fullyImplemented": true,
							"id": 334,
							"linearizedBaseContracts": [
								334,
								20
							],
							"name": "ERC1967Upgrade",
							"nameLocation": "535:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 43,
									"mutability": "constant",
									"name": "_ROLLBACK_SLOT",
									"nameLocation": "672:14:2",
									"nodeType": "VariableDeclaration",
									"scope": 334,
									"src": "647:108:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 41,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "647:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433",
										"id": 42,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "689:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1",
											"typeString": "int_const 3304...(69 digits omitted)...9347"
										},
										"value": "0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 44,
										"nodeType": "StructuredDocumentation",
										"src": "762:214:2",
										"text": " @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."
									},
									"id": 47,
									"mutability": "constant",
									"name": "_IMPLEMENTATION_SLOT",
									"nameLocation": "1007:20:2",
									"nodeType": "VariableDeclaration",
									"scope": 334,
									"src": "981:115:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 45,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "981:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263",
										"id": 46,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1030:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1",
											"typeString": "int_const 2444...(69 digits omitted)...5612"
										},
										"value": "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1237:78:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 55,
																"name": "_IMPLEMENTATION_SLOT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 47,
																"src": "1281:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 53,
																"name": "StorageSlot",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1069,
																"src": "1254:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1069_$",
																	"typeString": "type(library StorageSlot)"
																}
															},
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1266:14:2",
															"memberName": "getAddressSlot",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 991,
															"src": "1254:26:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$965_storage_ptr_$",
																"typeString": "function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"
															}
														},
														"id": 56,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1254:48:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressSlot_$965_storage_ptr",
															"typeString": "struct StorageSlot.AddressSlot storage pointer"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1303:5:2",
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 964,
													"src": "1254:54:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 52,
												"id": 58,
												"nodeType": "Return",
												"src": "1247:61:2"
											}
										]
									},
									"documentation": {
										"id": 48,
										"nodeType": "StructuredDocumentation",
										"src": "1103:67:2",
										"text": " @dev Returns the current implementation address."
									},
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getImplementation",
									"nameLocation": "1184:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1202:2:2"
									},
									"returnParameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1228:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1228:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1227:9:2"
									},
									"scope": 334,
									"src": "1175:140:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1469:196:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 69,
																	"name": "newImplementation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 63,
																	"src": "1506:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 67,
																	"name": "Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 959,
																	"src": "1487:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Address_$959_$",
																		"typeString": "type(library Address)"
																	}
																},
																"id": 68,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1495:10:2",
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 647,
																"src": "1487:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 70,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1487:37:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374",
															"id": 71,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1526:47:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65",
																"typeString": "literal_string \"ERC1967: new implementation is not a contract\""
															},
															"value": "ERC1967: new implementation is not a contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65",
																"typeString": "literal_string \"ERC1967: new implementation is not a contract\""
															}
														],
														"id": 66,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1479:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 72,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1479:95:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 73,
												"nodeType": "ExpressionStatement",
												"src": "1479:95:2"
											},
											{
												"expression": {
													"id": 81,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"arguments": [
																{
																	"id": 77,
																	"name": "_IMPLEMENTATION_SLOT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 47,
																	"src": "1611:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 74,
																	"name": "StorageSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1069,
																	"src": "1584:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1069_$",
																		"typeString": "type(library StorageSlot)"
																	}
																},
																"id": 76,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1596:14:2",
																"memberName": "getAddressSlot",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 991,
																"src": "1584:26:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$965_storage_ptr_$",
																	"typeString": "function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"
																}
															},
															"id": 78,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1584:48:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSlot_$965_storage_ptr",
																"typeString": "struct StorageSlot.AddressSlot storage pointer"
															}
														},
														"id": 79,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "1633:5:2",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 964,
														"src": "1584:54:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 80,
														"name": "newImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 63,
														"src": "1641:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1584:74:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 82,
												"nodeType": "ExpressionStatement",
												"src": "1584:74:2"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1321:80:2",
										"text": " @dev Stores a new address in the EIP1967 implementation slot."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setImplementation",
									"nameLocation": "1415:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "1442:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "1434:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1434:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1433:27:2"
									},
									"returnParameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1469:0:2"
									},
									"scope": 334,
									"src": "1406:259:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 98,
										"nodeType": "Block",
										"src": "1827:96:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 91,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 87,
															"src": "1856:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_setImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1837:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 92,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1837:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 93,
												"nodeType": "ExpressionStatement",
												"src": "1837:37:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 95,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 87,
															"src": "1898:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 94,
														"name": "Upgraded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "1889:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1889:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 97,
												"nodeType": "EmitStatement",
												"src": "1884:32:2"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1671:95:2",
										"text": " @dev Perform implementation upgrade\n Emits an {Upgraded} event."
									},
									"id": 99,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_upgradeTo",
									"nameLocation": "1780:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "1799:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 99,
												"src": "1791:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1791:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1790:27:2"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1827:0:2"
									},
									"scope": 334,
									"src": "1771:152:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 128,
										"nodeType": "Block",
										"src": "2155:167:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 110,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 102,
															"src": "2176:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 109,
														"name": "_upgradeTo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 99,
														"src": "2165:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2165:29:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 112,
												"nodeType": "ExpressionStatement",
												"src": "2165:29:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 116,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 113,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 104,
																"src": "2208:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 114,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2213:6:2",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "2208:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 115,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2222:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2208:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"id": 117,
														"name": "forceCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 106,
														"src": "2227:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2208:28:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 127,
												"nodeType": "IfStatement",
												"src": "2204:112:2",
												"trueBody": {
													"id": 126,
													"nodeType": "Block",
													"src": "2238:78:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 122,
																		"name": "newImplementation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 102,
																		"src": "2281:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 123,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 104,
																		"src": "2300:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"id": 119,
																		"name": "Address",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 959,
																		"src": "2252:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Address_$959_$",
																			"typeString": "type(library Address)"
																		}
																	},
																	"id": 121,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2260:20:2",
																	"memberName": "functionDelegateCall",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 846,
																	"src": "2252:28:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function (address,bytes memory) returns (bytes memory)"
																	}
																},
																"id": 124,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2252:53:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 125,
															"nodeType": "ExpressionStatement",
															"src": "2252:53:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 100,
										"nodeType": "StructuredDocumentation",
										"src": "1929:123:2",
										"text": " @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."
									},
									"id": 129,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_upgradeToAndCall",
									"nameLocation": "2066:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "2092:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 129,
												"src": "2084:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2084:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2124:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 129,
												"src": "2111:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 103,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2111:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"mutability": "mutable",
												"name": "forceCall",
												"nameLocation": "2135:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 129,
												"src": "2130:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 105,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2130:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2083:62:2"
									},
									"returnParameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2155:0:2"
									},
									"scope": 334,
									"src": "2057:265:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 181,
										"nodeType": "Block",
										"src": "2596:820:2",
										"statements": [
											{
												"condition": {
													"expression": {
														"arguments": [
															{
																"id": 141,
																"name": "_ROLLBACK_SLOT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 43,
																"src": "2937:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 139,
																"name": "StorageSlot",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1069,
																"src": "2910:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1069_$",
																	"typeString": "type(library StorageSlot)"
																}
															},
															"id": 140,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2922:14:2",
															"memberName": "getBooleanSlot",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1002,
															"src": "2910:26:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$968_storage_ptr_$",
																"typeString": "function (bytes32) pure returns (struct StorageSlot.BooleanSlot storage pointer)"
															}
														},
														"id": 142,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2910:42:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BooleanSlot_$968_storage_ptr",
															"typeString": "struct StorageSlot.BooleanSlot storage pointer"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2953:5:2",
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 967,
													"src": "2910:48:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 179,
													"nodeType": "Block",
													"src": "3028:382:2",
													"statements": [
														{
															"clauses": [
																{
																	"block": {
																		"id": 164,
																		"nodeType": "Block",
																		"src": "3122:115:2",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							},
																							"id": 160,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 158,
																								"name": "slot",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 155,
																								"src": "3148:4:2",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "==",
																							"rightExpression": {
																								"id": 159,
																								"name": "_IMPLEMENTATION_SLOT",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 47,
																								"src": "3156:20:2",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							},
																							"src": "3148:28:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							}
																						},
																						{
																							"hexValue": "45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944",
																							"id": 161,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "string",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3178:43:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c",
																								"typeString": "literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""
																							},
																							"value": "ERC1967Upgrade: unsupported proxiableUUID"
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							},
																							{
																								"typeIdentifier": "t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c",
																								"typeString": "literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""
																							}
																						],
																						"id": 157,
																						"name": "require",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [
																							4294967278,
																							4294967278
																						],
																						"referencedDeclaration": 4294967278,
																						"src": "3140:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																							"typeString": "function (bool,string memory) pure"
																						}
																					},
																					"id": 162,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "3140:82:2",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 163,
																				"nodeType": "ExpressionStatement",
																				"src": "3140:82:2"
																			}
																		]
																	},
																	"errorName": "",
																	"id": 165,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 156,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 155,
																				"mutability": "mutable",
																				"name": "slot",
																				"nameLocation": "3116:4:2",
																				"nodeType": "VariableDeclaration",
																				"scope": 165,
																				"src": "3108:12:2",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 154,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "3108:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "3107:14:2"
																	},
																	"src": "3099:138:2"
																},
																{
																	"block": {
																		"id": 170,
																		"nodeType": "Block",
																		"src": "3244:89:2",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"hexValue": "45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053",
																							"id": 167,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "string",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3269:48:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24",
																								"typeString": "literal_string \"ERC1967Upgrade: new implementation is not UUPS\""
																							},
																							"value": "ERC1967Upgrade: new implementation is not UUPS"
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24",
																								"typeString": "literal_string \"ERC1967Upgrade: new implementation is not UUPS\""
																							}
																						],
																						"id": 166,
																						"name": "revert",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [
																							4294967277,
																							4294967277
																						],
																						"referencedDeclaration": 4294967277,
																						"src": "3262:6:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																							"typeString": "function (string memory) pure"
																						}
																					},
																					"id": 168,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "3262:56:2",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 169,
																				"nodeType": "ExpressionStatement",
																				"src": "3262:56:2"
																			}
																		]
																	},
																	"errorName": "",
																	"id": 171,
																	"nodeType": "TryCatchClause",
																	"src": "3238:95:2"
																}
															],
															"externalCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 150,
																				"name": "newImplementation",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 132,
																				"src": "3064:17:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 149,
																			"name": "IERC1822Proxiable",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 30,
																			"src": "3046:17:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC1822Proxiable_$30_$",
																				"typeString": "type(contract IERC1822Proxiable)"
																			}
																		},
																		"id": 151,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3046:36:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1822Proxiable_$30",
																			"typeString": "contract IERC1822Proxiable"
																		}
																	},
																	"id": 152,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3083:13:2",
																	"memberName": "proxiableUUID",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 29,
																	"src": "3046:50:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view external returns (bytes32)"
																	}
																},
																"id": 153,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3046:52:2",
																"tryCall": true,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 172,
															"nodeType": "TryStatement",
															"src": "3042:291:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 174,
																		"name": "newImplementation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 132,
																		"src": "3364:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 175,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 134,
																		"src": "3383:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 176,
																		"name": "forceCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 136,
																		"src": "3389:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 173,
																	"name": "_upgradeToAndCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 129,
																	"src": "3346:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
																		"typeString": "function (address,bytes memory,bool)"
																	}
																},
																"id": 177,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3346:53:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 178,
															"nodeType": "ExpressionStatement",
															"src": "3346:53:2"
														}
													]
												},
												"id": 180,
												"nodeType": "IfStatement",
												"src": "2906:504:2",
												"trueBody": {
													"id": 148,
													"nodeType": "Block",
													"src": "2960:62:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 145,
																		"name": "newImplementation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 132,
																		"src": "2993:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 144,
																	"name": "_setImplementation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 84,
																	"src": "2974:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
																		"typeString": "function (address)"
																	}
																},
																"id": 146,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2974:37:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 147,
															"nodeType": "ExpressionStatement",
															"src": "2974:37:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 130,
										"nodeType": "StructuredDocumentation",
										"src": "2328:161:2",
										"text": " @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."
									},
									"id": 182,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_upgradeToAndCallUUPS",
									"nameLocation": "2503:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "2533:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "2525:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2525:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2565:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "2552:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 133,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2552:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "forceCall",
												"nameLocation": "2576:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "2571:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 135,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2571:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2524:62:2"
									},
									"returnParameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2596:0:2"
									},
									"scope": 334,
									"src": "2494:922:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "3422:189:2",
										"text": " @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."
									},
									"id": 186,
									"mutability": "constant",
									"name": "_ADMIN_SLOT",
									"nameLocation": "3642:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 334,
									"src": "3616:106:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 184,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3616:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033",
										"id": 185,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3656:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1",
											"typeString": "int_const 8195...(69 digits omitted)...7091"
										},
										"value": "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 198,
										"nodeType": "Block",
										"src": "3837:69:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 194,
																"name": "_ADMIN_SLOT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 186,
																"src": "3881:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 192,
																"name": "StorageSlot",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1069,
																"src": "3854:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1069_$",
																	"typeString": "type(library StorageSlot)"
																}
															},
															"id": 193,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3866:14:2",
															"memberName": "getAddressSlot",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 991,
															"src": "3854:26:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$965_storage_ptr_$",
																"typeString": "function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"
															}
														},
														"id": 195,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3854:39:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressSlot_$965_storage_ptr",
															"typeString": "struct StorageSlot.AddressSlot storage pointer"
														}
													},
													"id": 196,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3894:5:2",
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 964,
													"src": "3854:45:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 191,
												"id": 197,
												"nodeType": "Return",
												"src": "3847:52:2"
											}
										]
									},
									"documentation": {
										"id": 187,
										"nodeType": "StructuredDocumentation",
										"src": "3729:50:2",
										"text": " @dev Returns the current admin."
									},
									"id": 199,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getAdmin",
									"nameLocation": "3793:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3802:2:2"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "3828:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 189,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3828:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3827:9:2"
									},
									"scope": 334,
									"src": "3784:122:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 224,
										"nodeType": "Block",
										"src": "4033:156:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 206,
																"name": "newAdmin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 202,
																"src": "4051:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 209,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4071:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 208,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4063:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 207,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4063:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 210,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4063:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4051:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373",
															"id": 212,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4075:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5",
																"typeString": "literal_string \"ERC1967: new admin is the zero address\""
															},
															"value": "ERC1967: new admin is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5",
																"typeString": "literal_string \"ERC1967: new admin is the zero address\""
															}
														],
														"id": 205,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4043:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4043:73:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 214,
												"nodeType": "ExpressionStatement",
												"src": "4043:73:2"
											},
											{
												"expression": {
													"id": 222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"arguments": [
																{
																	"id": 218,
																	"name": "_ADMIN_SLOT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 186,
																	"src": "4153:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 215,
																	"name": "StorageSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1069,
																	"src": "4126:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1069_$",
																		"typeString": "type(library StorageSlot)"
																	}
																},
																"id": 217,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4138:14:2",
																"memberName": "getAddressSlot",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 991,
																"src": "4126:26:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$965_storage_ptr_$",
																	"typeString": "function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"
																}
															},
															"id": 219,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4126:39:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSlot_$965_storage_ptr",
																"typeString": "struct StorageSlot.AddressSlot storage pointer"
															}
														},
														"id": 220,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4166:5:2",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 964,
														"src": "4126:45:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 221,
														"name": "newAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 202,
														"src": "4174:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4126:56:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 223,
												"nodeType": "ExpressionStatement",
												"src": "4126:56:2"
											}
										]
									},
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "3912:71:2",
										"text": " @dev Stores a new address in the EIP1967 admin slot."
									},
									"id": 225,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setAdmin",
									"nameLocation": "3997:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "newAdmin",
												"nameLocation": "4015:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "4007:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4007:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4006:18:2"
									},
									"returnParameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4033:0:2"
									},
									"scope": 334,
									"src": "3988:201:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 241,
										"nodeType": "Block",
										"src": "4349:86:2",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 232,
																"name": "_getAdmin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 199,
																"src": "4377:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 233,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4377:11:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 234,
															"name": "newAdmin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 228,
															"src": "4390:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 231,
														"name": "AdminChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "4364:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4364:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 236,
												"nodeType": "EmitStatement",
												"src": "4359:40:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 238,
															"name": "newAdmin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 228,
															"src": "4419:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 237,
														"name": "_setAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 225,
														"src": "4409:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4409:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 240,
												"nodeType": "ExpressionStatement",
												"src": "4409:19:2"
											}
										]
									},
									"documentation": {
										"id": 226,
										"nodeType": "StructuredDocumentation",
										"src": "4195:100:2",
										"text": " @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."
									},
									"id": 242,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_changeAdmin",
									"nameLocation": "4309:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "newAdmin",
												"nameLocation": "4330:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 242,
												"src": "4322:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4322:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4321:18:2"
									},
									"returnParameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4349:0:2"
									},
									"scope": 334,
									"src": "4300:135:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 243,
										"nodeType": "StructuredDocumentation",
										"src": "4441:232:2",
										"text": " @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."
									},
									"id": 246,
									"mutability": "constant",
									"name": "_BEACON_SLOT",
									"nameLocation": "4704:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 334,
									"src": "4678:107:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 244,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "4678:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530",
										"id": 245,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "4719:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1",
											"typeString": "int_const 7415...(69 digits omitted)...4704"
										},
										"value": "0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 258,
										"nodeType": "Block",
										"src": "4902:70:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 254,
																"name": "_BEACON_SLOT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 246,
																"src": "4946:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 252,
																"name": "StorageSlot",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1069,
																"src": "4919:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1069_$",
																	"typeString": "type(library StorageSlot)"
																}
															},
															"id": 253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4931:14:2",
															"memberName": "getAddressSlot",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 991,
															"src": "4919:26:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$965_storage_ptr_$",
																"typeString": "function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"
															}
														},
														"id": 255,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4919:40:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressSlot_$965_storage_ptr",
															"typeString": "struct StorageSlot.AddressSlot storage pointer"
														}
													},
													"id": 256,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4960:5:2",
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 964,
													"src": "4919:46:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 251,
												"id": 257,
												"nodeType": "Return",
												"src": "4912:53:2"
											}
										]
									},
									"documentation": {
										"id": 247,
										"nodeType": "StructuredDocumentation",
										"src": "4792:51:2",
										"text": " @dev Returns the current beacon."
									},
									"id": 259,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getBeacon",
									"nameLocation": "4857:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4867:2:2"
									},
									"returnParameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "4893:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 249,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4893:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4892:9:2"
									},
									"scope": 334,
									"src": "4848:124:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 294,
										"nodeType": "Block",
										"src": "5101:324:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 268,
																	"name": "newBeacon",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 262,
																	"src": "5138:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 266,
																	"name": "Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 959,
																	"src": "5119:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Address_$959_$",
																		"typeString": "type(library Address)"
																	}
																},
																"id": 267,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5127:10:2",
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 647,
																"src": "5119:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 269,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5119:29:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374",
															"id": 270,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5150:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470",
																"typeString": "literal_string \"ERC1967: new beacon is not a contract\""
															},
															"value": "ERC1967: new beacon is not a contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470",
																"typeString": "literal_string \"ERC1967: new beacon is not a contract\""
															}
														],
														"id": 265,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5111:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 271,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5111:79:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 272,
												"nodeType": "ExpressionStatement",
												"src": "5111:79:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"expression": {
																			"arguments": [
																				{
																					"id": 277,
																					"name": "newBeacon",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 262,
																					"src": "5248:9:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 276,
																				"name": "IBeacon",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 344,
																				"src": "5240:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IBeacon_$344_$",
																					"typeString": "type(contract IBeacon)"
																				}
																			},
																			"id": 278,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5240:18:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IBeacon_$344",
																				"typeString": "contract IBeacon"
																			}
																		},
																		"id": 279,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5259:14:2",
																		"memberName": "implementation",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 343,
																		"src": "5240:33:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																			"typeString": "function () view external returns (address)"
																		}
																	},
																	"id": 280,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5240:35:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 274,
																	"name": "Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 959,
																	"src": "5221:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Address_$959_$",
																		"typeString": "type(library Address)"
																	}
																},
																"id": 275,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5229:10:2",
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 647,
																"src": "5221:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 281,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5221:55:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374",
															"id": 282,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5290:50:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8",
																"typeString": "literal_string \"ERC1967: beacon implementation is not a contract\""
															},
															"value": "ERC1967: beacon implementation is not a contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8",
																"typeString": "literal_string \"ERC1967: beacon implementation is not a contract\""
															}
														],
														"id": 273,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5200:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5200:150:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 284,
												"nodeType": "ExpressionStatement",
												"src": "5200:150:2"
											},
											{
												"expression": {
													"id": 292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"arguments": [
																{
																	"id": 288,
																	"name": "_BEACON_SLOT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 246,
																	"src": "5387:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 285,
																	"name": "StorageSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1069,
																	"src": "5360:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1069_$",
																		"typeString": "type(library StorageSlot)"
																	}
																},
																"id": 287,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5372:14:2",
																"memberName": "getAddressSlot",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 991,
																"src": "5360:26:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$965_storage_ptr_$",
																	"typeString": "function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"
																}
															},
															"id": 289,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5360:40:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSlot_$965_storage_ptr",
																"typeString": "struct StorageSlot.AddressSlot storage pointer"
															}
														},
														"id": 290,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5401:5:2",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 964,
														"src": "5360:46:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 291,
														"name": "newBeacon",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 262,
														"src": "5409:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5360:58:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 293,
												"nodeType": "ExpressionStatement",
												"src": "5360:58:2"
											}
										]
									},
									"documentation": {
										"id": 260,
										"nodeType": "StructuredDocumentation",
										"src": "4978:71:2",
										"text": " @dev Stores a new beacon in the EIP1967 beacon slot."
									},
									"id": 295,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setBeacon",
									"nameLocation": "5063:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "newBeacon",
												"nameLocation": "5082:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 295,
												"src": "5074:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 261,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5074:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5073:19:2"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5101:0:2"
									},
									"scope": 334,
									"src": "5054:371:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 332,
										"nodeType": "Block",
										"src": "5824:217:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 306,
															"name": "newBeacon",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 298,
															"src": "5845:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 305,
														"name": "_setBeacon",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 295,
														"src": "5834:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5834:21:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 308,
												"nodeType": "ExpressionStatement",
												"src": "5834:21:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 310,
															"name": "newBeacon",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 298,
															"src": "5885:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 309,
														"name": "BeaconUpgraded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 19,
														"src": "5870:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5870:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 312,
												"nodeType": "EmitStatement",
												"src": "5865:30:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 316,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 313,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 300,
																"src": "5909:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5914:6:2",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "5909:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 315,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5923:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5909:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"id": 317,
														"name": "forceCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 302,
														"src": "5928:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5909:28:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 331,
												"nodeType": "IfStatement",
												"src": "5905:130:2",
												"trueBody": {
													"id": 330,
													"nodeType": "Block",
													"src": "5939:96:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"arguments": [
																					{
																						"id": 323,
																						"name": "newBeacon",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 298,
																						"src": "5990:9:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 322,
																					"name": "IBeacon",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 344,
																					"src": "5982:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_IBeacon_$344_$",
																						"typeString": "type(contract IBeacon)"
																					}
																				},
																				"id": 324,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5982:18:2",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IBeacon_$344",
																					"typeString": "contract IBeacon"
																				}
																			},
																			"id": 325,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "6001:14:2",
																			"memberName": "implementation",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 343,
																			"src": "5982:33:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																				"typeString": "function () view external returns (address)"
																			}
																		},
																		"id": 326,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5982:35:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 327,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 300,
																		"src": "6019:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"id": 319,
																		"name": "Address",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 959,
																		"src": "5953:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Address_$959_$",
																			"typeString": "type(library Address)"
																		}
																	},
																	"id": 321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5961:20:2",
																	"memberName": "functionDelegateCall",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 846,
																	"src": "5953:28:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function (address,bytes memory) returns (bytes memory)"
																	}
																},
																"id": 328,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5953:71:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 329,
															"nodeType": "ExpressionStatement",
															"src": "5953:71:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 296,
										"nodeType": "StructuredDocumentation",
										"src": "5431:292:2",
										"text": " @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."
									},
									"id": 333,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_upgradeBeaconToAndCall",
									"nameLocation": "5737:23:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "newBeacon",
												"nameLocation": "5769:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "5761:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 297,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5761:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5793:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "5780:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 299,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5780:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "forceCall",
												"nameLocation": "5804:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "5799:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 301,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5799:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5760:54:2"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5824:0:2"
									},
									"scope": 334,
									"src": "5728:313:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 335,
							"src": "517:5526:2",
							"usedErrors": []
						}
					],
					"src": "116:5928:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol",
					"exportedSymbols": {
						"IBeacon": [
							344
						]
					},
					"id": 345,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 336,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "93:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IBeacon",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 337,
								"nodeType": "StructuredDocumentation",
								"src": "118:79:3",
								"text": " @dev This is the interface that {BeaconProxy} expects of its beacon."
							},
							"fullyImplemented": false,
							"id": 344,
							"linearizedBaseContracts": [
								344
							],
							"name": "IBeacon",
							"nameLocation": "208:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 338,
										"nodeType": "StructuredDocumentation",
										"src": "222:162:3",
										"text": " @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."
									},
									"functionSelector": "5c60da1b",
									"id": 343,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "implementation",
									"nameLocation": "398:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 339,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "412:2:3"
									},
									"returnParameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 343,
												"src": "438:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 340,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "438:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "437:9:3"
									},
									"scope": 344,
									"src": "389:58:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 345,
							"src": "198:251:3",
							"usedErrors": []
						}
					],
					"src": "93:357:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Address": [
							959
						],
						"Initializable": [
							513
						]
					},
					"id": 514,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 346,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../utils/Address.sol",
							"id": 347,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 514,
							"sourceUnit": 960,
							"src": "138:33:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 348,
								"nodeType": "StructuredDocumentation",
								"src": "173:2209:4",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 513,
							"linearizedBaseContracts": [
								513
							],
							"name": "Initializable",
							"nameLocation": "2401:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 349,
										"nodeType": "StructuredDocumentation",
										"src": "2421:109:4",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 351,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2549:12:4",
									"nodeType": "VariableDeclaration",
									"scope": 513,
									"src": "2535:26:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 350,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2535:5:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 352,
										"nodeType": "StructuredDocumentation",
										"src": "2568:91:4",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 354,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2677:13:4",
									"nodeType": "VariableDeclaration",
									"scope": 513,
									"src": "2664:26:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 353,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2664:4:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "2697:90:4",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
									"id": 359,
									"name": "Initialized",
									"nameLocation": "2798:11:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2816:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2810:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 356,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2810:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2809:15:4"
									},
									"src": "2792:33:4"
								},
								{
									"body": {
										"id": 414,
										"nodeType": "Block",
										"src": "3258:472:4",
										"statements": [
											{
												"assignments": [
													363
												],
												"declarations": [
													{
														"constant": false,
														"id": 363,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3273:14:4",
														"nodeType": "VariableDeclaration",
														"scope": 414,
														"src": "3268:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 362,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3268:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 366,
												"initialValue": {
													"id": 365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3290:14:4",
													"subExpression": {
														"id": 364,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 354,
														"src": "3291:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3268:36:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 387,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 372,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 368,
																			"name": "isTopLevelCall",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 363,
																			"src": "3336:14:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 371,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 369,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 351,
																				"src": "3354:12:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 370,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3369:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3354:16:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3336:34:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 373,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3335:36:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 385,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 381,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "3376:34:4",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 378,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "3404:4:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$513",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$513",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 377,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3396:7:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 376,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "3396:7:4",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 379,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3396:13:4",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 374,
																						"name": "Address",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 959,
																						"src": "3377:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_Address_$959_$",
																							"typeString": "type(library Address)"
																						}
																					},
																					"id": 375,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "3385:10:4",
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 647,
																					"src": "3377:18:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 380,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3377:33:4",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 384,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 382,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 351,
																				"src": "3414:12:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 383,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3430:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3414:17:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3376:55:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 386,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3375:57:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3335:97:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 388,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3446:48:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 367,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3314:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3314:190:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 390,
												"nodeType": "ExpressionStatement",
												"src": "3314:190:4"
											},
											{
												"expression": {
													"id": 393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 391,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "3514:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 392,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3529:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3514:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 394,
												"nodeType": "ExpressionStatement",
												"src": "3514:16:4"
											},
											{
												"condition": {
													"id": 395,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 363,
													"src": "3544:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 401,
												"nodeType": "IfStatement",
												"src": "3540:65:4",
												"trueBody": {
													"id": 400,
													"nodeType": "Block",
													"src": "3560:45:4",
													"statements": [
														{
															"expression": {
																"id": 398,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 396,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 354,
																	"src": "3574:13:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 397,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3590:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3574:20:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 399,
															"nodeType": "ExpressionStatement",
															"src": "3574:20:4"
														}
													]
												}
											},
											{
												"id": 402,
												"nodeType": "PlaceholderStatement",
												"src": "3614:1:4"
											},
											{
												"condition": {
													"id": 403,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 363,
													"src": "3629:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 413,
												"nodeType": "IfStatement",
												"src": "3625:99:4",
												"trueBody": {
													"id": 412,
													"nodeType": "Block",
													"src": "3645:79:4",
													"statements": [
														{
															"expression": {
																"id": 406,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 404,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 354,
																	"src": "3659:13:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 405,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3675:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3659:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 407,
															"nodeType": "ExpressionStatement",
															"src": "3659:21:4"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 409,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3711:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 408,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 359,
																	"src": "3699:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 410,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3699:14:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 411,
															"nodeType": "EmitStatement",
															"src": "3694:19:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 360,
										"nodeType": "StructuredDocumentation",
										"src": "2831:399:4",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."
									},
									"id": 415,
									"name": "initializer",
									"nameLocation": "3244:11:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3255:2:4"
									},
									"src": "3235:495:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 447,
										"nodeType": "Block",
										"src": "4841:255:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 422,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "4859:14:4",
																"subExpression": {
																	"id": 421,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 354,
																	"src": "4860:13:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 425,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 423,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 351,
																	"src": "4877:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 424,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 418,
																	"src": "4892:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4877:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4859:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 427,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4901:48:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 420,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4851:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4851:99:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 429,
												"nodeType": "ExpressionStatement",
												"src": "4851:99:4"
											},
											{
												"expression": {
													"id": 432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 430,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "4960:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 431,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 418,
														"src": "4975:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4960:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 433,
												"nodeType": "ExpressionStatement",
												"src": "4960:22:4"
											},
											{
												"expression": {
													"id": 436,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 434,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 354,
														"src": "4992:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 435,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5008:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "4992:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 437,
												"nodeType": "ExpressionStatement",
												"src": "4992:20:4"
											},
											{
												"id": 438,
												"nodeType": "PlaceholderStatement",
												"src": "5022:1:4"
											},
											{
												"expression": {
													"id": 441,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 439,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 354,
														"src": "5033:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 440,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5049:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "5033:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 442,
												"nodeType": "ExpressionStatement",
												"src": "5033:21:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 444,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 418,
															"src": "5081:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 443,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 359,
														"src": "5069:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
															"typeString": "function (uint8)"
														}
													},
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5069:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 446,
												"nodeType": "EmitStatement",
												"src": "5064:25:4"
											}
										]
									},
									"documentation": {
										"id": 416,
										"nodeType": "StructuredDocumentation",
										"src": "3736:1062:4",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 448,
									"name": "reinitializer",
									"nameLocation": "4812:13:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4832:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 448,
												"src": "4826:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 417,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4826:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4825:15:4"
									},
									"src": "4803:293:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 457,
										"nodeType": "Block",
										"src": "5334:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 452,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 354,
															"src": "5352:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 453,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5367:45:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 451,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5344:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 454,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5344:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 455,
												"nodeType": "ExpressionStatement",
												"src": "5344:69:4"
											},
											{
												"id": 456,
												"nodeType": "PlaceholderStatement",
												"src": "5423:1:4"
											}
										]
									},
									"documentation": {
										"id": 449,
										"nodeType": "StructuredDocumentation",
										"src": "5102:199:4",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 458,
									"name": "onlyInitializing",
									"nameLocation": "5315:16:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5331:2:4"
									},
									"src": "5306:125:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 493,
										"nodeType": "Block",
										"src": "5966:231:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 464,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "5984:14:4",
															"subExpression": {
																"id": 463,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 354,
																"src": "5985:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67",
															"id": 465,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6000:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															},
															"value": "Initializable: contract is initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															}
														],
														"id": 462,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5976:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 466,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5976:66:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 467,
												"nodeType": "ExpressionStatement",
												"src": "5976:66:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 474,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 468,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "6056:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 471,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6077:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	},
																	"typeName": {
																		"id": 470,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "6077:5:4",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	}
																],
																"id": 469,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "6072:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 472,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6072:11:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint8",
																"typeString": "type(uint8)"
															}
														},
														"id": 473,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "6084:3:4",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "6072:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "6056:31:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 492,
												"nodeType": "IfStatement",
												"src": "6052:139:4",
												"trueBody": {
													"id": 491,
													"nodeType": "Block",
													"src": "6089:102:4",
													"statements": [
														{
															"expression": {
																"id": 481,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 475,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 351,
																	"src": "6103:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 478,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6123:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 477,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "6123:5:4",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 476,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "6118:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 479,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6118:11:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 480,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "6130:3:4",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "6118:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6103:30:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 482,
															"nodeType": "ExpressionStatement",
															"src": "6103:30:4"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 486,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "6169:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 485,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "6169:5:4",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					}
																				],
																				"id": 484,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "6164:4:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 487,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6164:11:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint8",
																				"typeString": "type(uint8)"
																			}
																		},
																		"id": 488,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6176:3:4",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "6164:15:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 483,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 359,
																	"src": "6152:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 489,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6152:28:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 490,
															"nodeType": "EmitStatement",
															"src": "6147:33:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 459,
										"nodeType": "StructuredDocumentation",
										"src": "5437:475:4",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 494,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5926:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5946:2:4"
									},
									"returnParameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5966:0:4"
									},
									"scope": 513,
									"src": "5917:280:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 502,
										"nodeType": "Block",
										"src": "6371:36:4",
										"statements": [
											{
												"expression": {
													"id": 500,
													"name": "_initialized",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 351,
													"src": "6388:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 499,
												"id": 501,
												"nodeType": "Return",
												"src": "6381:19:4"
											}
										]
									},
									"documentation": {
										"id": 495,
										"nodeType": "StructuredDocumentation",
										"src": "6203:99:4",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 503,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "6316:22:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6338:2:4"
									},
									"returnParameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "6364:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 497,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6364:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6363:7:4"
									},
									"scope": 513,
									"src": "6307:100:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 511,
										"nodeType": "Block",
										"src": "6579:37:4",
										"statements": [
											{
												"expression": {
													"id": 509,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 354,
													"src": "6596:13:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 508,
												"id": 510,
												"nodeType": "Return",
												"src": "6589:20:4"
											}
										]
									},
									"documentation": {
										"id": 504,
										"nodeType": "StructuredDocumentation",
										"src": "6413:105:4",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 512,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "6532:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 505,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6547:2:4"
									},
									"returnParameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 512,
												"src": "6573:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 506,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6573:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6572:6:4"
									},
									"scope": 513,
									"src": "6523:93:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 514,
							"src": "2383:4235:4",
							"usedErrors": []
						}
					],
					"src": "113:6506:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
					"exportedSymbols": {
						"Address": [
							959
						],
						"ERC1967Upgrade": [
							334
						],
						"IBeacon": [
							344
						],
						"IERC1822Proxiable": [
							30
						],
						"IERC1967": [
							20
						],
						"StorageSlot": [
							1069
						],
						"UUPSUpgradeable": [
							629
						]
					},
					"id": 630,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 515,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol",
							"file": "../../interfaces/draft-IERC1822.sol",
							"id": 516,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 630,
							"sourceUnit": 31,
							"src": "140:45:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
							"file": "../ERC1967/ERC1967Upgrade.sol",
							"id": 517,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 630,
							"sourceUnit": 335,
							"src": "186:39:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 519,
										"name": "IERC1822Proxiable",
										"nameLocations": [
											"913:17:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 30,
										"src": "913:17:5"
									},
									"id": 520,
									"nodeType": "InheritanceSpecifier",
									"src": "913:17:5"
								},
								{
									"baseName": {
										"id": 521,
										"name": "ERC1967Upgrade",
										"nameLocations": [
											"932:14:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 334,
										"src": "932:14:5"
									},
									"id": 522,
									"nodeType": "InheritanceSpecifier",
									"src": "932:14:5"
								}
							],
							"canonicalName": "UUPSUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 518,
								"nodeType": "StructuredDocumentation",
								"src": "227:648:5",
								"text": " @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 629,
							"linearizedBaseContracts": [
								629,
								334,
								20,
								30
							],
							"name": "UUPSUpgradeable",
							"nameLocation": "894:15:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 523,
										"nodeType": "StructuredDocumentation",
										"src": "953:87:5",
										"text": "@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"
									},
									"id": 529,
									"mutability": "immutable",
									"name": "__self",
									"nameLocation": "1071:6:5",
									"nodeType": "VariableDeclaration",
									"scope": 629,
									"src": "1045:48:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 524,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1045:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"arguments": [
											{
												"id": 527,
												"name": "this",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 4294967268,
												"src": "1088:4:5",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_UUPSUpgradeable_$629",
													"typeString": "contract UUPSUpgradeable"
												}
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_contract$_UUPSUpgradeable_$629",
													"typeString": "contract UUPSUpgradeable"
												}
											],
											"id": 526,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "ElementaryTypeNameExpression",
											"src": "1080:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_address_$",
												"typeString": "type(address)"
											},
											"typeName": {
												"id": 525,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1080:7:5",
												"typeDescriptions": {}
											}
										},
										"id": 528,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1080:13:5",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 551,
										"nodeType": "Block",
										"src": "1619:205:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 538,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 535,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1645:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_UUPSUpgradeable_$629",
																			"typeString": "contract UUPSUpgradeable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_UUPSUpgradeable_$629",
																			"typeString": "contract UUPSUpgradeable"
																		}
																	],
																	"id": 534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1637:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 533,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1637:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 536,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1637:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 537,
																"name": "__self",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 529,
																"src": "1654:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1637:23:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c",
															"id": 539,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1662:46:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb",
																"typeString": "literal_string \"Function must be called through delegatecall\""
															},
															"value": "Function must be called through delegatecall"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb",
																"typeString": "literal_string \"Function must be called through delegatecall\""
															}
														],
														"id": 532,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1629:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1629:80:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 541,
												"nodeType": "ExpressionStatement",
												"src": "1629:80:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 546,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 543,
																	"name": "_getImplementation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 60,
																	"src": "1727:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 544,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1727:20:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 545,
																"name": "__self",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 529,
																"src": "1751:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1727:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879",
															"id": 547,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1759:46:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434",
																"typeString": "literal_string \"Function must be called through active proxy\""
															},
															"value": "Function must be called through active proxy"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434",
																"typeString": "literal_string \"Function must be called through active proxy\""
															}
														],
														"id": 542,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1719:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1719:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 549,
												"nodeType": "ExpressionStatement",
												"src": "1719:87:5"
											},
											{
												"id": 550,
												"nodeType": "PlaceholderStatement",
												"src": "1816:1:5"
											}
										]
									},
									"documentation": {
										"id": 530,
										"nodeType": "StructuredDocumentation",
										"src": "1100:493:5",
										"text": " @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."
									},
									"id": 552,
									"name": "onlyProxy",
									"nameLocation": "1607:9:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1616:2:5"
									},
									"src": "1598:226:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 566,
										"nodeType": "Block",
										"src": "2054:120:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 561,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 558,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2080:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_UUPSUpgradeable_$629",
																			"typeString": "contract UUPSUpgradeable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_UUPSUpgradeable_$629",
																			"typeString": "contract UUPSUpgradeable"
																		}
																	],
																	"id": 557,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2072:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 556,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2072:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 559,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2072:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 560,
																"name": "__self",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 529,
																"src": "2089:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2072:23:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c",
															"id": 562,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2097:58:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4",
																"typeString": "literal_string \"UUPSUpgradeable: must not be called through delegatecall\""
															},
															"value": "UUPSUpgradeable: must not be called through delegatecall"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4",
																"typeString": "literal_string \"UUPSUpgradeable: must not be called through delegatecall\""
															}
														],
														"id": 555,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2064:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2064:92:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 564,
												"nodeType": "ExpressionStatement",
												"src": "2064:92:5"
											},
											{
												"id": 565,
												"nodeType": "PlaceholderStatement",
												"src": "2166:1:5"
											}
										]
									},
									"documentation": {
										"id": 553,
										"nodeType": "StructuredDocumentation",
										"src": "1830:195:5",
										"text": " @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."
									},
									"id": 567,
									"name": "notDelegated",
									"nameLocation": "2039:12:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 554,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2051:2:5"
									},
									"src": "2030:144:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										29
									],
									"body": {
										"id": 578,
										"nodeType": "Block",
										"src": "2849:44:5",
										"statements": [
											{
												"expression": {
													"id": 576,
													"name": "_IMPLEMENTATION_SLOT",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 47,
													"src": "2866:20:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 575,
												"id": 577,
												"nodeType": "Return",
												"src": "2859:27:5"
											}
										]
									},
									"documentation": {
										"id": 568,
										"nodeType": "StructuredDocumentation",
										"src": "2180:577:5",
										"text": " @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
									},
									"functionSelector": "52d1902d",
									"id": 579,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 572,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 571,
												"name": "notDelegated",
												"nameLocations": [
													"2818:12:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 567,
												"src": "2818:12:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "2818:12:5"
										}
									],
									"name": "proxiableUUID",
									"nameLocation": "2771:13:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 570,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2809:8:5"
									},
									"parameters": {
										"id": 569,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2784:2:5"
									},
									"returnParameters": {
										"id": 575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 574,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "2840:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 573,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2840:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2839:9:5"
									},
									"scope": 629,
									"src": "2762:131:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 600,
										"nodeType": "Block",
										"src": "3214:124:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 588,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 582,
															"src": "3242:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 587,
														"name": "_authorizeUpgrade",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 628,
														"src": "3224:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3224:36:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 590,
												"nodeType": "ExpressionStatement",
												"src": "3224:36:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 592,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 582,
															"src": "3292:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 595,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3321:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 594,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "3311:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																},
																"typeName": {
																	"id": 593,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3315:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																}
															},
															"id": 596,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3311:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 597,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3325:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 591,
														"name": "_upgradeToAndCallUUPS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 182,
														"src": "3270:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
															"typeString": "function (address,bytes memory,bool)"
														}
													},
													"id": 598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3270:61:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 599,
												"nodeType": "ExpressionStatement",
												"src": "3270:61:5"
											}
										]
									},
									"documentation": {
										"id": 580,
										"nodeType": "StructuredDocumentation",
										"src": "2899:239:5",
										"text": " @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"
									},
									"functionSelector": "3659cfe6",
									"id": 601,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 585,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 584,
												"name": "onlyProxy",
												"nameLocations": [
													"3204:9:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 552,
												"src": "3204:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "3204:9:5"
										}
									],
									"name": "upgradeTo",
									"nameLocation": "3152:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "3170:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "3162:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 581,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3162:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3161:27:5"
									},
									"returnParameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3214:0:5"
									},
									"scope": 629,
									"src": "3143:195:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "3762:115:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 612,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 604,
															"src": "3790:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 611,
														"name": "_authorizeUpgrade",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 628,
														"src": "3772:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3772:36:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 614,
												"nodeType": "ExpressionStatement",
												"src": "3772:36:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 616,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 604,
															"src": "3840:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 617,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 606,
															"src": "3859:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "74727565",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3865:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 615,
														"name": "_upgradeToAndCallUUPS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 182,
														"src": "3818:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
															"typeString": "function (address,bytes memory,bool)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3818:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 620,
												"nodeType": "ExpressionStatement",
												"src": "3818:52:5"
											}
										]
									},
									"documentation": {
										"id": 602,
										"nodeType": "StructuredDocumentation",
										"src": "3344:308:5",
										"text": " @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"
									},
									"functionSelector": "4f1ef286",
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 609,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 608,
												"name": "onlyProxy",
												"nameLocations": [
													"3752:9:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 552,
												"src": "3752:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "3752:9:5"
										}
									],
									"name": "upgradeToAndCall",
									"nameLocation": "3666:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "3691:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "3683:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 603,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3683:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3723:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "3710:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 605,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3710:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3682:46:5"
									},
									"returnParameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3762:0:5"
									},
									"scope": 629,
									"src": "3657:220:5",
									"stateMutability": "payable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "3883:397:5",
										"text": " @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"
									},
									"id": 628,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_authorizeUpgrade",
									"nameLocation": "4294:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "4320:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 628,
												"src": "4312:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4312:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4311:27:5"
									},
									"returnParameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4355:0:5"
									},
									"scope": 629,
									"src": "4285:71:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 630,
							"src": "876:3482:5",
							"usedErrors": []
						}
					],
					"src": "115:4244:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							959
						]
					},
					"id": 960,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 631,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 632,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:6",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 959,
							"linearizedBaseContracts": [
								959
							],
							"name": "Address",
							"nameLocation": "202:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 646,
										"nodeType": "Block",
										"src": "1478:254:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 640,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 635,
																"src": "1702:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 641,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1710:4:6",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1702:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 642,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1715:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1702:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 643,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1724:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1702:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 639,
												"id": 645,
												"nodeType": "Return",
												"src": "1695:30:6"
											}
										]
									},
									"documentation": {
										"id": 633,
										"nodeType": "StructuredDocumentation",
										"src": "216:1191:6",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 647,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1421:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1440:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "1432:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 634,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1432:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1431:17:6"
									},
									"returnParameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "1472:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 637,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1472:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1471:6:6"
									},
									"scope": 959,
									"src": "1412:320:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 680,
										"nodeType": "Block",
										"src": "2718:241:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 662,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 658,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2744:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$959",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$959",
																				"typeString": "library Address"
																			}
																		],
																		"id": 657,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2736:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 656,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2736:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 659,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2736:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 660,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2750:7:6",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2736:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 661,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 652,
																"src": "2761:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2736:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 663,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2769:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 655,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2728:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2728:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 665,
												"nodeType": "ExpressionStatement",
												"src": "2728:73:6"
											},
											{
												"assignments": [
													667,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 667,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2818:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 680,
														"src": "2813:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 666,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2813:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 674,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 672,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2861:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 668,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 650,
																"src": "2831:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 669,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2841:4:6",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2831:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 671,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 670,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 652,
																"src": "2853:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2831:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2831:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2812:52:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 676,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "2882:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 677,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2891:60:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 675,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2874:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2874:78:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 679,
												"nodeType": "ExpressionStatement",
												"src": "2874:78:6"
											}
										]
									},
									"documentation": {
										"id": 648,
										"nodeType": "StructuredDocumentation",
										"src": "1738:904:6",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 681,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2656:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2682:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 681,
												"src": "2666:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 649,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2666:15:6",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2701:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 681,
												"src": "2693:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 651,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:43:6"
									},
									"returnParameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2718:0:6"
									},
									"scope": 959,
									"src": "2647:312:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 698,
										"nodeType": "Block",
										"src": "3790:96:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 692,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 684,
															"src": "3829:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 693,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 686,
															"src": "3837:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 694,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3843:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 695,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3846:32:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 691,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															739,
															783
														],
														"referencedDeclaration": 783,
														"src": "3807:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3807:72:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 690,
												"id": 697,
												"nodeType": "Return",
												"src": "3800:79:6"
											}
										]
									},
									"documentation": {
										"id": 682,
										"nodeType": "StructuredDocumentation",
										"src": "2965:731:6",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 699,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3710:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3731:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "3723:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 683,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3723:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3752:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "3739:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 685,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3739:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3722:35:6"
									},
									"returnParameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "3776:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 688,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3776:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:14:6"
									},
									"scope": 959,
									"src": "3701:185:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 718,
										"nodeType": "Block",
										"src": "4255:76:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 712,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 702,
															"src": "4294:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 713,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 704,
															"src": "4302:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 714,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4308:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 715,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 706,
															"src": "4311:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 711,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															739,
															783
														],
														"referencedDeclaration": 783,
														"src": "4272:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 716,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4272:52:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 710,
												"id": 717,
												"nodeType": "Return",
												"src": "4265:59:6"
											}
										]
									},
									"documentation": {
										"id": 700,
										"nodeType": "StructuredDocumentation",
										"src": "3892:211:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 719,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4117:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4147:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "4139:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 701,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4139:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4176:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "4163:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 703,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4163:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4204:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "4190:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 705,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4190:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4129:93:6"
									},
									"returnParameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "4241:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 708,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4241:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4240:14:6"
									},
									"scope": 959,
									"src": "4108:223:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 738,
										"nodeType": "Block",
										"src": "4806:111:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 732,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 722,
															"src": "4845:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 733,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 724,
															"src": "4853:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 734,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 726,
															"src": "4859:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 735,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4866:43:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 731,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															739,
															783
														],
														"referencedDeclaration": 783,
														"src": "4823:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4823:87:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 730,
												"id": 737,
												"nodeType": "Return",
												"src": "4816:94:6"
											}
										]
									},
									"documentation": {
										"id": 720,
										"nodeType": "StructuredDocumentation",
										"src": "4337:351:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 739,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4702:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4732:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "4724:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 721,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4724:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4753:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "4740:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 723,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4740:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4767:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "4759:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 725,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4759:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4723:50:6"
									},
									"returnParameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "4792:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 728,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4792:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4791:14:6"
									},
									"scope": 959,
									"src": "4693:224:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 782,
										"nodeType": "Block",
										"src": "5344:267:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 760,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 756,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5370:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$959",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$959",
																				"typeString": "library Address"
																			}
																		],
																		"id": 755,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5362:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 754,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5362:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 757,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5362:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 758,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5376:7:6",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5362:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 759,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 746,
																"src": "5387:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5362:30:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 761,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5394:40:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 753,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5354:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 762,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5354:81:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 763,
												"nodeType": "ExpressionStatement",
												"src": "5354:81:6"
											},
											{
												"assignments": [
													765,
													767
												],
												"declarations": [
													{
														"constant": false,
														"id": 765,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5451:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 782,
														"src": "5446:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 764,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5446:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 767,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5473:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 782,
														"src": "5460:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 766,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5460:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 774,
												"initialValue": {
													"arguments": [
														{
															"id": 772,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "5513:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 768,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 742,
																"src": "5487:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 769,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5494:4:6",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5487:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 771,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 770,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 746,
																"src": "5506:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5487:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5487:31:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5445:73:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 776,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "5562:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 777,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 765,
															"src": "5570:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 778,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 767,
															"src": "5579:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 779,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 748,
															"src": "5591:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 775,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 914,
														"src": "5535:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5535:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 752,
												"id": 781,
												"nodeType": "Return",
												"src": "5528:76:6"
											}
										]
									},
									"documentation": {
										"id": 740,
										"nodeType": "StructuredDocumentation",
										"src": "4923:237:6",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 783,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5174:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5213:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 783,
												"src": "5205:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 741,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5205:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5242:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 783,
												"src": "5229:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 743,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5229:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5264:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 783,
												"src": "5256:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 745,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5256:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 748,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5293:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 783,
												"src": "5279:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 747,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5279:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5195:116:6"
									},
									"returnParameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 783,
												"src": "5330:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 750,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5330:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5329:14:6"
									},
									"scope": 959,
									"src": "5165:446:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 799,
										"nodeType": "Block",
										"src": "5888:97:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 794,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 786,
															"src": "5924:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 795,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 788,
															"src": "5932:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 796,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5938:39:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 793,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															800,
															829
														],
														"referencedDeclaration": 829,
														"src": "5905:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 797,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5905:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 792,
												"id": 798,
												"nodeType": "Return",
												"src": "5898:80:6"
											}
										]
									},
									"documentation": {
										"id": 784,
										"nodeType": "StructuredDocumentation",
										"src": "5617:166:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 800,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5797:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 789,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 786,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5824:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "5816:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 785,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5816:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 788,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5845:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "5832:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 787,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5832:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5815:35:6"
									},
									"returnParameters": {
										"id": 792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "5874:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 790,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5874:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5873:14:6"
									},
									"scope": 959,
									"src": "5788:197:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 828,
										"nodeType": "Block",
										"src": "6327:168:6",
										"statements": [
											{
												"assignments": [
													813,
													815
												],
												"declarations": [
													{
														"constant": false,
														"id": 813,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6343:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 828,
														"src": "6338:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 812,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6338:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 815,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6365:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 828,
														"src": "6352:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 814,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6352:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 820,
												"initialValue": {
													"arguments": [
														{
															"id": 818,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 805,
															"src": "6397:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 816,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 803,
															"src": "6379:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 817,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6386:10:6",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6379:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6379:23:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6337:65:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 822,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 803,
															"src": "6446:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 823,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 813,
															"src": "6454:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 824,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "6463:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 825,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 807,
															"src": "6475:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 821,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 914,
														"src": "6419:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 826,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6419:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 811,
												"id": 827,
												"nodeType": "Return",
												"src": "6412:76:6"
											}
										]
									},
									"documentation": {
										"id": 801,
										"nodeType": "StructuredDocumentation",
										"src": "5991:173:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 829,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6178:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 808,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 803,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6214:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "6206:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 802,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6206:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 805,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6243:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "6230:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 804,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6230:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 807,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6271:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "6257:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 806,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6196:93:6"
									},
									"returnParameters": {
										"id": 811,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 810,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "6313:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 809,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6313:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6312:14:6"
									},
									"scope": 959,
									"src": "6169:326:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 845,
										"nodeType": "Block",
										"src": "6771:101:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 840,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 832,
															"src": "6809:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 841,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 834,
															"src": "6817:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 842,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6823:41:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 839,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															846,
															875
														],
														"referencedDeclaration": 875,
														"src": "6788:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 843,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6788:77:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 838,
												"id": 844,
												"nodeType": "Return",
												"src": "6781:84:6"
											}
										]
									},
									"documentation": {
										"id": 830,
										"nodeType": "StructuredDocumentation",
										"src": "6501:168:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 846,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6683:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6712:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "6704:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 831,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6704:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6733:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "6720:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 833,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6720:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6703:35:6"
									},
									"returnParameters": {
										"id": 838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "6757:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 836,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6757:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6756:14:6"
									},
									"scope": 959,
									"src": "6674:198:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 874,
										"nodeType": "Block",
										"src": "7213:170:6",
										"statements": [
											{
												"assignments": [
													859,
													861
												],
												"declarations": [
													{
														"constant": false,
														"id": 859,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7229:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 874,
														"src": "7224:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 858,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7224:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 861,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7251:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 874,
														"src": "7238:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 860,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7238:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 866,
												"initialValue": {
													"arguments": [
														{
															"id": 864,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 851,
															"src": "7285:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 862,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 849,
															"src": "7265:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 863,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7272:12:6",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7265:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7265:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7223:67:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 868,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 849,
															"src": "7334:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 869,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "7342:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 870,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "7351:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 871,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 853,
															"src": "7363:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 867,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 914,
														"src": "7307:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 872,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7307:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 857,
												"id": 873,
												"nodeType": "Return",
												"src": "7300:76:6"
											}
										]
									},
									"documentation": {
										"id": 847,
										"nodeType": "StructuredDocumentation",
										"src": "6878:175:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 875,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "7067:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7105:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "7097:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7097:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7134:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "7121:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 850,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7121:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7162:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "7148:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 852,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7148:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7087:93:6"
									},
									"returnParameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "7199:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 855,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7199:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7198:14:6"
									},
									"scope": 959,
									"src": "7058:325:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 913,
										"nodeType": "Block",
										"src": "7865:434:6",
										"statements": [
											{
												"condition": {
													"id": 889,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 880,
													"src": "7879:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 911,
													"nodeType": "Block",
													"src": "8235:58:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 907,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 882,
																		"src": "8257:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 908,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 884,
																		"src": "8269:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 906,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 958,
																	"src": "8249:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 909,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8249:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 910,
															"nodeType": "ExpressionStatement",
															"src": "8249:33:6"
														}
													]
												},
												"id": 912,
												"nodeType": "IfStatement",
												"src": "7875:418:6",
												"trueBody": {
													"id": 905,
													"nodeType": "Block",
													"src": "7888:341:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 893,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 890,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 882,
																		"src": "7906:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 891,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7917:6:6",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7906:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 892,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7927:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7906:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 902,
															"nodeType": "IfStatement",
															"src": "7902:286:6",
															"trueBody": {
																"id": 901,
																"nodeType": "Block",
																"src": "7930:258:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 896,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 878,
																							"src": "8132:6:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 895,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 647,
																						"src": "8121:10:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 897,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8121:18:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 898,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8141:31:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 894,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "8113:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 899,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8113:60:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 900,
																		"nodeType": "ExpressionStatement",
																		"src": "8113:60:6"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 903,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 882,
																"src": "8208:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 888,
															"id": 904,
															"nodeType": "Return",
															"src": "8201:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 876,
										"nodeType": "StructuredDocumentation",
										"src": "7389:277:6",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 914,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7680:26:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 878,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7724:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "7716:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 877,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7716:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7745:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "7740:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 879,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7740:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7775:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "7762:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 881,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7762:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7809:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "7795:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 883,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7795:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:121:6"
									},
									"returnParameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "7851:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 886,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7851:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7850:14:6"
									},
									"scope": 959,
									"src": "7671:628:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 937,
										"nodeType": "Block",
										"src": "8680:135:6",
										"statements": [
											{
												"condition": {
													"id": 926,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 917,
													"src": "8694:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 935,
													"nodeType": "Block",
													"src": "8751:58:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 931,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 919,
																		"src": "8773:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 932,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 921,
																		"src": "8785:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 930,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 958,
																	"src": "8765:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 933,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8765:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 934,
															"nodeType": "ExpressionStatement",
															"src": "8765:33:6"
														}
													]
												},
												"id": 936,
												"nodeType": "IfStatement",
												"src": "8690:119:6",
												"trueBody": {
													"id": 929,
													"nodeType": "Block",
													"src": "8703:42:6",
													"statements": [
														{
															"expression": {
																"id": 927,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 919,
																"src": "8724:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 925,
															"id": 928,
															"nodeType": "Return",
															"src": "8717:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 915,
										"nodeType": "StructuredDocumentation",
										"src": "8305:210:6",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 938,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8529:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 917,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8560:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "8555:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 916,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8555:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8590:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "8577:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 918,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8577:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8624:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "8610:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 920,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8610:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8545:97:6"
									},
									"returnParameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "8666:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 923,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8666:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8665:14:6"
									},
									"scope": 959,
									"src": "8520:295:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 957,
										"nodeType": "Block",
										"src": "8904:457:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 945,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 940,
															"src": "8980:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 946,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8991:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8980:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 947,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9000:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8980:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 955,
													"nodeType": "Block",
													"src": "9310:45:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 952,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 942,
																		"src": "9331:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 951,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9324:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 953,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9324:20:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 954,
															"nodeType": "ExpressionStatement",
															"src": "9324:20:6"
														}
													]
												},
												"id": 956,
												"nodeType": "IfStatement",
												"src": "8976:379:6",
												"trueBody": {
													"id": 950,
													"nodeType": "Block",
													"src": "9003:301:6",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "9161:133:6",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9179:40:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9208:10:6"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9202:5:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9202:17:6"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "9183:15:6",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9247:2:6",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9251:10:6"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9243:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9243:19:6"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9264:15:6"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9236:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9236:44:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9236:44:6"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 940,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9208:10:6",
																	"valueSize": 1
																},
																{
																	"declaration": 940,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9251:10:6",
																	"valueSize": 1
																}
															],
															"id": 949,
															"nodeType": "InlineAssembly",
															"src": "9152:142:6"
														}
													]
												}
											}
										]
									},
									"id": 958,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8830:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8851:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "8838:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 939,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8838:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8877:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "8863:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 941,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8863:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8837:53:6"
									},
									"returnParameters": {
										"id": 944,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8904:0:6"
									},
									"scope": 959,
									"src": "8821:540:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 960,
							"src": "194:9169:6",
							"usedErrors": []
						}
					],
					"src": "101:9263:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
					"exportedSymbols": {
						"StorageSlot": [
							1069
						]
					},
					"id": 1070,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 961,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "193:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlot",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 962,
								"nodeType": "StructuredDocumentation",
								"src": "218:1201:7",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"
							},
							"fullyImplemented": true,
							"id": 1069,
							"linearizedBaseContracts": [
								1069
							],
							"name": "StorageSlot",
							"nameLocation": "1428:11:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlot.AddressSlot",
									"id": 965,
									"members": [
										{
											"constant": false,
											"id": 964,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1483:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 965,
											"src": "1475:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 963,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1475:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "1453:11:7",
									"nodeType": "StructDefinition",
									"scope": 1069,
									"src": "1446:49:7",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BooleanSlot",
									"id": 968,
									"members": [
										{
											"constant": false,
											"id": 967,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1535:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 968,
											"src": "1530:10:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 966,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1530:4:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "1508:11:7",
									"nodeType": "StructDefinition",
									"scope": 1069,
									"src": "1501:46:7",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Bytes32Slot",
									"id": 971,
									"members": [
										{
											"constant": false,
											"id": 970,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1590:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1582:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 969,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1582:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "1560:11:7",
									"nodeType": "StructDefinition",
									"scope": 1069,
									"src": "1553:49:7",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Uint256Slot",
									"id": 974,
									"members": [
										{
											"constant": false,
											"id": 973,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1645:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 974,
											"src": "1637:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 972,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1637:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "1615:11:7",
									"nodeType": "StructDefinition",
									"scope": 1069,
									"src": "1608:49:7",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.StringSlot",
									"id": 977,
									"members": [
										{
											"constant": false,
											"id": 976,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1698:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 977,
											"src": "1691:12:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 975,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1691:6:7",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StringSlot",
									"nameLocation": "1670:10:7",
									"nodeType": "StructDefinition",
									"scope": 1069,
									"src": "1663:47:7",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BytesSlot",
									"id": 980,
									"members": [
										{
											"constant": false,
											"id": 979,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1749:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 980,
											"src": "1743:11:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 978,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1743:5:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BytesSlot",
									"nameLocation": "1723:9:7",
									"nodeType": "StructDefinition",
									"scope": 1069,
									"src": "1716:45:7",
									"visibility": "public"
								},
								{
									"body": {
										"id": 990,
										"nodeType": "Block",
										"src": "1943:106:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2005:38:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2019:14:7",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2029:4:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2019:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": true,
														"src": "2019:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 983,
														"isOffset": false,
														"isSlot": false,
														"src": "2029:4:7",
														"valueSize": 1
													}
												],
												"id": 989,
												"nodeType": "InlineAssembly",
												"src": "1996:47:7"
											}
										]
									},
									"documentation": {
										"id": 981,
										"nodeType": "StructuredDocumentation",
										"src": "1767:87:7",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 991,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "1868:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1891:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 991,
												"src": "1883:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 982,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1883:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1882:14:7"
									},
									"returnParameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1940:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 991,
												"src": "1920:21:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$965_storage_ptr",
													"typeString": "struct StorageSlot.AddressSlot"
												},
												"typeName": {
													"id": 986,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 985,
														"name": "AddressSlot",
														"nameLocations": [
															"1920:11:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 965,
														"src": "1920:11:7"
													},
													"referencedDeclaration": 965,
													"src": "1920:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$965_storage_ptr",
														"typeString": "struct StorageSlot.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1919:23:7"
									},
									"scope": 1069,
									"src": "1859:190:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1001,
										"nodeType": "Block",
										"src": "2231:106:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2293:38:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2307:14:7",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2317:4:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2307:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 998,
														"isOffset": false,
														"isSlot": true,
														"src": "2307:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 994,
														"isOffset": false,
														"isSlot": false,
														"src": "2317:4:7",
														"valueSize": 1
													}
												],
												"id": 1000,
												"nodeType": "InlineAssembly",
												"src": "2284:47:7"
											}
										]
									},
									"documentation": {
										"id": 992,
										"nodeType": "StructuredDocumentation",
										"src": "2055:87:7",
										"text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 1002,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "2156:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2179:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "2171:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 993,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2170:14:7"
									},
									"returnParameters": {
										"id": 999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 998,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2228:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "2208:21:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$968_storage_ptr",
													"typeString": "struct StorageSlot.BooleanSlot"
												},
												"typeName": {
													"id": 997,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 996,
														"name": "BooleanSlot",
														"nameLocations": [
															"2208:11:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 968,
														"src": "2208:11:7"
													},
													"referencedDeclaration": 968,
													"src": "2208:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$968_storage_ptr",
														"typeString": "struct StorageSlot.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2207:23:7"
									},
									"scope": 1069,
									"src": "2147:190:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1012,
										"nodeType": "Block",
										"src": "2519:106:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2581:38:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2595:14:7",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2605:4:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2595:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1009,
														"isOffset": false,
														"isSlot": true,
														"src": "2595:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1005,
														"isOffset": false,
														"isSlot": false,
														"src": "2605:4:7",
														"valueSize": 1
													}
												],
												"id": 1011,
												"nodeType": "InlineAssembly",
												"src": "2572:47:7"
											}
										]
									},
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "2343:87:7",
										"text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 1013,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "2444:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2467:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2459:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1004,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2459:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2458:14:7"
									},
									"returnParameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2516:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2496:21:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$971_storage_ptr",
													"typeString": "struct StorageSlot.Bytes32Slot"
												},
												"typeName": {
													"id": 1008,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1007,
														"name": "Bytes32Slot",
														"nameLocations": [
															"2496:11:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 971,
														"src": "2496:11:7"
													},
													"referencedDeclaration": 971,
													"src": "2496:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$971_storage_ptr",
														"typeString": "struct StorageSlot.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2495:23:7"
									},
									"scope": 1069,
									"src": "2435:190:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1023,
										"nodeType": "Block",
										"src": "2807:106:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2869:38:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2883:14:7",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2893:4:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2883:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1020,
														"isOffset": false,
														"isSlot": true,
														"src": "2883:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1016,
														"isOffset": false,
														"isSlot": false,
														"src": "2893:4:7",
														"valueSize": 1
													}
												],
												"id": 1022,
												"nodeType": "InlineAssembly",
												"src": "2860:47:7"
											}
										]
									},
									"documentation": {
										"id": 1014,
										"nodeType": "StructuredDocumentation",
										"src": "2631:87:7",
										"text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 1024,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "2732:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1017,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1016,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2755:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "2747:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1015,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2747:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2746:14:7"
									},
									"returnParameters": {
										"id": 1021,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1020,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2804:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "2784:21:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$974_storage_ptr",
													"typeString": "struct StorageSlot.Uint256Slot"
												},
												"typeName": {
													"id": 1019,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1018,
														"name": "Uint256Slot",
														"nameLocations": [
															"2784:11:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 974,
														"src": "2784:11:7"
													},
													"referencedDeclaration": 974,
													"src": "2784:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$974_storage_ptr",
														"typeString": "struct StorageSlot.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2783:23:7"
									},
									"scope": 1069,
									"src": "2723:190:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1034,
										"nodeType": "Block",
										"src": "3092:106:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3154:38:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3168:14:7",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "3178:4:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3168:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1031,
														"isOffset": false,
														"isSlot": true,
														"src": "3168:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1027,
														"isOffset": false,
														"isSlot": false,
														"src": "3178:4:7",
														"valueSize": 1
													}
												],
												"id": 1033,
												"nodeType": "InlineAssembly",
												"src": "3145:47:7"
											}
										]
									},
									"documentation": {
										"id": 1025,
										"nodeType": "StructuredDocumentation",
										"src": "2919:86:7",
										"text": " @dev Returns an `StringSlot` with member `value` located at `slot`."
									},
									"id": 1035,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3019:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1028,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3041:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "3033:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1026,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3033:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3032:14:7"
									},
									"returnParameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3089:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "3070:20:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$977_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1030,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1029,
														"name": "StringSlot",
														"nameLocations": [
															"3070:10:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 977,
														"src": "3070:10:7"
													},
													"referencedDeclaration": 977,
													"src": "3070:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$977_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3069:22:7"
									},
									"scope": 1069,
									"src": "3010:188:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1045,
										"nodeType": "Block",
										"src": "3400:112:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3462:44:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3476:20:7",
															"value": {
																"name": "store.slot",
																"nodeType": "YulIdentifier",
																"src": "3486:10:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3476:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1042,
														"isOffset": false,
														"isSlot": true,
														"src": "3476:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1038,
														"isOffset": false,
														"isSlot": true,
														"src": "3486:10:7",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1044,
												"nodeType": "InlineAssembly",
												"src": "3453:53:7"
											}
										]
									},
									"documentation": {
										"id": 1036,
										"nodeType": "StructuredDocumentation",
										"src": "3204:101:7",
										"text": " @dev Returns an `StringSlot` representation of the string storage pointer `store`."
									},
									"id": 1046,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3319:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3348:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "3333:20:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1037,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3333:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3332:22:7"
									},
									"returnParameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3397:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "3378:20:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$977_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1041,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1040,
														"name": "StringSlot",
														"nameLocations": [
															"3378:10:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 977,
														"src": "3378:10:7"
													},
													"referencedDeclaration": 977,
													"src": "3378:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$977_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3377:22:7"
									},
									"scope": 1069,
									"src": "3310:202:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1056,
										"nodeType": "Block",
										"src": "3688:106:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3750:38:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3764:14:7",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "3774:4:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3764:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1053,
														"isOffset": false,
														"isSlot": true,
														"src": "3764:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1049,
														"isOffset": false,
														"isSlot": false,
														"src": "3774:4:7",
														"valueSize": 1
													}
												],
												"id": 1055,
												"nodeType": "InlineAssembly",
												"src": "3741:47:7"
											}
										]
									},
									"documentation": {
										"id": 1047,
										"nodeType": "StructuredDocumentation",
										"src": "3518:85:7",
										"text": " @dev Returns an `BytesSlot` with member `value` located at `slot`."
									},
									"id": 1057,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3617:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1049,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3638:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1057,
												"src": "3630:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1048,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3630:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3629:14:7"
									},
									"returnParameters": {
										"id": 1054,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1053,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3685:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1057,
												"src": "3667:19:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$980_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1052,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1051,
														"name": "BytesSlot",
														"nameLocations": [
															"3667:9:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 980,
														"src": "3667:9:7"
													},
													"referencedDeclaration": 980,
													"src": "3667:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$980_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3666:21:7"
									},
									"scope": 1069,
									"src": "3608:186:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1067,
										"nodeType": "Block",
										"src": "3991:112:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4053:44:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4067:20:7",
															"value": {
																"name": "store.slot",
																"nodeType": "YulIdentifier",
																"src": "4077:10:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "4067:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1064,
														"isOffset": false,
														"isSlot": true,
														"src": "4067:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1060,
														"isOffset": false,
														"isSlot": true,
														"src": "4077:10:7",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1066,
												"nodeType": "InlineAssembly",
												"src": "4044:53:7"
											}
										]
									},
									"documentation": {
										"id": 1058,
										"nodeType": "StructuredDocumentation",
										"src": "3800:99:7",
										"text": " @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."
									},
									"id": 1068,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3913:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1061,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1060,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3940:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "3926:19:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1059,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3926:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:21:7"
									},
									"returnParameters": {
										"id": 1065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1064,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3988:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "3970:19:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$980_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1063,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1062,
														"name": "BytesSlot",
														"nameLocations": [
															"3970:9:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 980,
														"src": "3970:9:7"
													},
													"referencedDeclaration": 980,
													"src": "3970:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$980_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3969:21:7"
									},
									"scope": 1069,
									"src": "3904:199:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1070,
							"src": "1420:2685:7",
							"usedErrors": []
						}
					],
					"src": "193:3913:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							2530
						],
						"SignedMath": [
							2635
						],
						"Strings": [
							1298
						]
					},
					"id": 1299,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1071,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1072,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1299,
							"sourceUnit": 2531,
							"src": "126:25:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 1073,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1299,
							"sourceUnit": 2636,
							"src": "152:31:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1074,
								"nodeType": "StructuredDocumentation",
								"src": "185:34:8",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1298,
							"linearizedBaseContracts": [
								1298
							],
							"name": "Strings",
							"nameLocation": "228:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1077,
									"mutability": "constant",
									"name": "_SYMBOLS",
									"nameLocation": "267:8:8",
									"nodeType": "VariableDeclaration",
									"scope": 1298,
									"src": "242:54:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1075,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "242:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1076,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "278:18:8",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1080,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "325:15:8",
									"nodeType": "VariableDeclaration",
									"scope": 1298,
									"src": "302:43:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1078,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "302:5:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1079,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "343:2:8",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1127,
										"nodeType": "Block",
										"src": "518:625:8",
										"statements": [
											{
												"id": 1126,
												"nodeType": "UncheckedBlock",
												"src": "528:609:8",
												"statements": [
													{
														"assignments": [
															1089
														],
														"declarations": [
															{
																"constant": false,
																"id": 1089,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "560:6:8",
																"nodeType": "VariableDeclaration",
																"scope": 1126,
																"src": "552:14:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1088,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "552:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1096,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1095,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1092,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1083,
																		"src": "580:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1090,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2530,
																		"src": "569:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$2530_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1091,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "574:5:8",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2367,
																	"src": "569:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1093,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "569:17:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1094,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "589:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "569:21:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "552:38:8"
													},
													{
														"assignments": [
															1098
														],
														"declarations": [
															{
																"constant": false,
																"id": 1098,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "618:6:8",
																"nodeType": "VariableDeclaration",
																"scope": 1126,
																"src": "604:20:8",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1097,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "604:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1103,
														"initialValue": {
															"arguments": [
																{
																	"id": 1101,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1089,
																	"src": "638:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1100,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "627:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1099,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "631:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1102,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "627:18:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "604:41:8"
													},
													{
														"assignments": [
															1105
														],
														"declarations": [
															{
																"constant": false,
																"id": 1105,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "667:3:8",
																"nodeType": "VariableDeclaration",
																"scope": 1126,
																"src": "659:11:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1104,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "659:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1106,
														"nodeType": "VariableDeclarationStatement",
														"src": "659:11:8"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "740:67:8",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "758:35:8",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "781:2:8",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "785:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "777:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "777:15:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "765:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "765:28:8"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "758:3:8"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 1098,
																"isOffset": false,
																"isSlot": false,
																"src": "769:6:8",
																"valueSize": 1
															},
															{
																"declaration": 1089,
																"isOffset": false,
																"isSlot": false,
																"src": "785:6:8",
																"valueSize": 1
															},
															{
																"declaration": 1105,
																"isOffset": false,
																"isSlot": false,
																"src": "758:3:8",
																"valueSize": 1
															}
														],
														"id": 1107,
														"nodeType": "InlineAssembly",
														"src": "731:76:8"
													},
													{
														"body": {
															"id": 1122,
															"nodeType": "Block",
															"src": "833:267:8",
															"statements": [
																{
																	"expression": {
																		"id": 1110,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "851:5:8",
																		"subExpression": {
																			"id": 1109,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1105,
																			"src": "851:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1111,
																	"nodeType": "ExpressionStatement",
																	"src": "851:5:8"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "934:84:8",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "964:3:8"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "978:5:8"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "985:2:8",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "974:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "974:14:8"
																								},
																								{
																									"name": "_SYMBOLS",
																									"nodeType": "YulIdentifier",
																									"src": "990:8:8"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "969:4:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "969:30:8"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "956:7:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "956:44:8"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "956:44:8"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "paris",
																	"externalReferences": [
																		{
																			"declaration": 1077,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "990:8:8",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1105,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "964:3:8",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1083,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "978:5:8",
																			"valueSize": 1
																		}
																	],
																	"id": 1112,
																	"nodeType": "InlineAssembly",
																	"src": "925:93:8"
																},
																{
																	"expression": {
																		"id": 1115,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1113,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1083,
																			"src": "1035:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1044:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1035:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1116,
																	"nodeType": "ExpressionStatement",
																	"src": "1035:11:8"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1117,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1083,
																			"src": "1068:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1118,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1077:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1068:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1121,
																	"nodeType": "IfStatement",
																	"src": "1064:21:8",
																	"trueBody": {
																		"id": 1120,
																		"nodeType": "Break",
																		"src": "1080:5:8"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "827:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1123,
														"nodeType": "WhileStatement",
														"src": "820:280:8"
													},
													{
														"expression": {
															"id": 1124,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1098,
															"src": "1120:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1087,
														"id": 1125,
														"nodeType": "Return",
														"src": "1113:13:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1081,
										"nodeType": "StructuredDocumentation",
										"src": "352:90:8",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "456:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "473:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "465:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1082,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "465:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "464:15:8"
									},
									"returnParameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "503:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1085,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "503:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "502:15:8"
									},
									"scope": 1298,
									"src": "447:696:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1155,
										"nodeType": "Block",
										"src": "1313:103:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1142,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1140,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1131,
																			"src": "1354:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1141,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1362:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1354:9:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"hexValue": "",
																		"id": 1144,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1372:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	},
																	"id": 1145,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1354:20:8",
																	"trueExpression": {
																		"hexValue": "2d",
																		"id": 1143,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1366:3:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																			"typeString": "literal_string \"-\""
																		},
																		"value": "-"
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1149,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1131,
																					"src": "1400:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				],
																				"expression": {
																					"id": 1147,
																					"name": "SignedMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2635,
																					"src": "1385:10:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SignedMath_$2635_$",
																						"typeString": "type(library SignedMath)"
																					}
																				},
																				"id": 1148,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "1396:3:8",
																				"memberName": "abs",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2634,
																				"src": "1385:14:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																					"typeString": "function (int256) pure returns (uint256)"
																				}
																			},
																			"id": 1150,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1385:21:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1146,
																		"name": "toString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			1128,
																			1156
																		],
																		"referencedDeclaration": 1128,
																		"src": "1376:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 1151,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1376:31:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"expression": {
																	"id": 1138,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1337:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1139,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1341:12:8",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "1337:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1152,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1337:71:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1137,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1330:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1136,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1330:6:8",
															"typeDescriptions": {}
														}
													},
													"id": 1153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1330:79:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1135,
												"id": 1154,
												"nodeType": "Return",
												"src": "1323:86:8"
											}
										]
									},
									"documentation": {
										"id": 1129,
										"nodeType": "StructuredDocumentation",
										"src": "1149:89:8",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 1156,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "1252:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1268:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1156,
												"src": "1261:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1130,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1261:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1260:14:8"
									},
									"returnParameters": {
										"id": 1135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1156,
												"src": "1298:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1133,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1298:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1297:15:8"
									},
									"scope": 1298,
									"src": "1243:173:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1175,
										"nodeType": "Block",
										"src": "1595:100:8",
										"statements": [
											{
												"id": 1174,
												"nodeType": "UncheckedBlock",
												"src": "1605:84:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1165,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1159,
																	"src": "1648:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1171,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1168,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1159,
																				"src": "1667:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1166,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2530,
																				"src": "1655:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$2530_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1167,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1660:6:8",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2490,
																			"src": "1655:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1169,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1655:18:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1170,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1676:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1655:22:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1164,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1176,
																	1252,
																	1272
																],
																"referencedDeclaration": 1252,
																"src": "1636:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1636:42:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1163,
														"id": 1173,
														"nodeType": "Return",
														"src": "1629:49:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1157,
										"nodeType": "StructuredDocumentation",
										"src": "1422:94:8",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1176,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1530:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1159,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1550:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "1542:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1541:15:8"
									},
									"returnParameters": {
										"id": 1163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1162,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "1580:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1161,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1580:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1579:15:8"
									},
									"scope": 1298,
									"src": "1521:174:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1251,
										"nodeType": "Block",
										"src": "1908:347:8",
										"statements": [
											{
												"assignments": [
													1187
												],
												"declarations": [
													{
														"constant": false,
														"id": 1187,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1931:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1251,
														"src": "1918:19:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1186,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1918:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1196,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1194,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1192,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1190,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1950:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1191,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1181,
																	"src": "1954:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1950:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1193,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1963:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1950:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1189,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1940:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1188,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1944:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1940:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1918:47:8"
											},
											{
												"expression": {
													"id": 1201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1197,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1187,
															"src": "1975:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1199,
														"indexExpression": {
															"hexValue": "30",
															"id": 1198,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1982:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1975:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1200,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1987:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1975:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1202,
												"nodeType": "ExpressionStatement",
												"src": "1975:15:8"
											},
											{
												"expression": {
													"id": 1207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1203,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1187,
															"src": "2000:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1205,
														"indexExpression": {
															"hexValue": "31",
															"id": 1204,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2000:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1206,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2012:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2000:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1208,
												"nodeType": "ExpressionStatement",
												"src": "2000:15:8"
											},
											{
												"body": {
													"id": 1237,
													"nodeType": "Block",
													"src": "2070:83:8",
													"statements": [
														{
															"expression": {
																"id": 1231,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1223,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1187,
																		"src": "2084:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1225,
																	"indexExpression": {
																		"id": 1224,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1210,
																		"src": "2091:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2084:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1226,
																		"name": "_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1077,
																		"src": "2096:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1230,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1229,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1227,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1179,
																			"src": "2105:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1228,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2113:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2105:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2096:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2084:33:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1232,
															"nodeType": "ExpressionStatement",
															"src": "2084:33:8"
														},
														{
															"expression": {
																"id": 1235,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1233,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1179,
																	"src": "2131:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1234,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2141:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2131:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1236,
															"nodeType": "ExpressionStatement",
															"src": "2131:11:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1217,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1210,
														"src": "2058:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1218,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2062:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2058:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1238,
												"initializationExpression": {
													"assignments": [
														1210
													],
													"declarations": [
														{
															"constant": false,
															"id": 1210,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2038:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1238,
															"src": "2030:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1209,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2030:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1216,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1215,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1211,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2042:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1212,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1181,
																"src": "2046:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2042:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1214,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2055:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2042:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2030:26:8"
												},
												"loopExpression": {
													"expression": {
														"id": 1221,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2065:3:8",
														"subExpression": {
															"id": 1220,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1210,
															"src": "2067:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1222,
													"nodeType": "ExpressionStatement",
													"src": "2065:3:8"
												},
												"nodeType": "ForStatement",
												"src": "2025:128:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1242,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1240,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1179,
																"src": "2170:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1241,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2179:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2170:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 1243,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2182:34:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 1239,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2162:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2162:55:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1245,
												"nodeType": "ExpressionStatement",
												"src": "2162:55:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1248,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1187,
															"src": "2241:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1247,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2234:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1246,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2234:6:8",
															"typeDescriptions": {}
														}
													},
													"id": 1249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2234:14:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1185,
												"id": 1250,
												"nodeType": "Return",
												"src": "2227:21:8"
											}
										]
									},
									"documentation": {
										"id": 1177,
										"nodeType": "StructuredDocumentation",
										"src": "1701:112:8",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1252,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1827:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1179,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1847:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1252,
												"src": "1839:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1839:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1181,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1862:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1252,
												"src": "1854:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1854:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1838:31:8"
									},
									"returnParameters": {
										"id": 1185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1184,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1252,
												"src": "1893:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1183,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1893:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1892:15:8"
									},
									"scope": 1298,
									"src": "1818:437:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1271,
										"nodeType": "Block",
										"src": "2480:76:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1265,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1255,
																			"src": "2525:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1264,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2517:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1263,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2517:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1266,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2517:13:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1262,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2509:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1261,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2509:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1267,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2509:22:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1268,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1080,
															"src": "2533:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1260,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1176,
															1252,
															1272
														],
														"referencedDeclaration": 1252,
														"src": "2497:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2497:52:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1259,
												"id": 1270,
												"nodeType": "Return",
												"src": "2490:59:8"
											}
										]
									},
									"documentation": {
										"id": 1253,
										"nodeType": "StructuredDocumentation",
										"src": "2261:141:8",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 1272,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2416:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1255,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2436:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1272,
												"src": "2428:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1254,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2428:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2427:14:8"
									},
									"returnParameters": {
										"id": 1259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1258,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1272,
												"src": "2465:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1257,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2465:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:8"
									},
									"scope": 1298,
									"src": "2407:149:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1296,
										"nodeType": "Block",
										"src": "2711:66:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1294,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1285,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1275,
																		"src": "2744:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1284,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2738:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1283,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2738:5:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1286,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2738:8:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1282,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2728:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 1287,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2728:19:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1291,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1277,
																		"src": "2767:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1290,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2761:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1289,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2761:5:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1292,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2761:8:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1288,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2751:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 1293,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2751:19:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2728:42:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1281,
												"id": 1295,
												"nodeType": "Return",
												"src": "2721:49:8"
											}
										]
									},
									"documentation": {
										"id": 1273,
										"nodeType": "StructuredDocumentation",
										"src": "2562:66:8",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 1297,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2642:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1275,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2662:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1297,
												"src": "2648:15:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1274,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2648:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1277,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2679:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1297,
												"src": "2665:15:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1276,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2665:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2647:34:8"
									},
									"returnParameters": {
										"id": 1281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1280,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1297,
												"src": "2705:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1279,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2705:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2704:6:8"
									},
									"scope": 1298,
									"src": "2633:144:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1299,
							"src": "220:2559:8",
							"usedErrors": []
						}
					],
					"src": "101:2679:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							1664
						],
						"Math": [
							2530
						],
						"SignedMath": [
							2635
						],
						"Strings": [
							1298
						]
					},
					"id": 1665,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1300,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 1301,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1665,
							"sourceUnit": 1299,
							"src": "137:24:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1302,
								"nodeType": "StructuredDocumentation",
								"src": "163:205:9",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 1664,
							"linearizedBaseContracts": [
								1664
							],
							"name": "ECDSA",
							"nameLocation": "377:5:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 1308,
									"members": [
										{
											"id": 1303,
											"name": "NoError",
											"nameLocation": "417:7:9",
											"nodeType": "EnumValue",
											"src": "417:7:9"
										},
										{
											"id": 1304,
											"name": "InvalidSignature",
											"nameLocation": "434:16:9",
											"nodeType": "EnumValue",
											"src": "434:16:9"
										},
										{
											"id": 1305,
											"name": "InvalidSignatureLength",
											"nameLocation": "460:22:9",
											"nodeType": "EnumValue",
											"src": "460:22:9"
										},
										{
											"id": 1306,
											"name": "InvalidSignatureS",
											"nameLocation": "492:17:9",
											"nodeType": "EnumValue",
											"src": "492:17:9"
										},
										{
											"id": 1307,
											"name": "InvalidSignatureV",
											"nameLocation": "519:17:9",
											"nodeType": "EnumValue",
											"src": "519:17:9"
										}
									],
									"name": "RecoverError",
									"nameLocation": "394:12:9",
									"nodeType": "EnumDefinition",
									"src": "389:175:9"
								},
								{
									"body": {
										"id": 1351,
										"nodeType": "Block",
										"src": "624:457:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$1308",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 1317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1314,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1311,
														"src": "638:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1308",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 1315,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1308,
															"src": "647:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$1308_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 1316,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "660:7:9",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1303,
														"src": "647:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1308",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "638:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$1308",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 1323,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1320,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1311,
															"src": "734:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1321,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "743:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1308_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1322,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "756:16:9",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1304,
															"src": "743:29:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "734:38:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 1332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1329,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1311,
																"src": "843:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1308",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1330,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1308,
																	"src": "852:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$1308_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 1331,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "865:22:9",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1305,
																"src": "852:35:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1308",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "843:44:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$1308",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 1341,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1338,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1311,
																	"src": "965:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1308",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1339,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1308,
																		"src": "974:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$1308_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 1340,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "987:17:9",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1306,
																	"src": "974:30:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1308",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "965:39:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1347,
															"nodeType": "IfStatement",
															"src": "961:114:9",
															"trueBody": {
																"id": 1346,
																"nodeType": "Block",
																"src": "1006:69:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c7565",
																					"id": 1343,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1027:36:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					},
																					"value": "ECDSA: invalid signature 's' value"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					}
																				],
																				"id": 1342,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "1020:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 1344,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1020:44:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1345,
																		"nodeType": "ExpressionStatement",
																		"src": "1020:44:9"
																	}
																]
															}
														},
														"id": 1348,
														"nodeType": "IfStatement",
														"src": "839:236:9",
														"trueBody": {
															"id": 1337,
															"nodeType": "Block",
															"src": "889:66:9",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																				"id": 1334,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "string",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "910:33:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				},
																				"value": "ECDSA: invalid signature length"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				}
																			],
																			"id": 1333,
																			"name": "revert",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				4294967277,
																				4294967277
																			],
																			"referencedDeclaration": 4294967277,
																			"src": "903:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																				"typeString": "function (string memory) pure"
																			}
																		},
																		"id": 1335,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "903:41:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1336,
																	"nodeType": "ExpressionStatement",
																	"src": "903:41:9"
																}
															]
														}
													},
													"id": 1349,
													"nodeType": "IfStatement",
													"src": "730:345:9",
													"trueBody": {
														"id": 1328,
														"nodeType": "Block",
														"src": "774:59:9",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
																			"id": 1325,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "795:26:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			},
																			"value": "ECDSA: invalid signature"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			}
																		],
																		"id": 1324,
																		"name": "revert",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967277,
																			4294967277
																		],
																		"referencedDeclaration": 4294967277,
																		"src": "788:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (string memory) pure"
																		}
																	},
																	"id": 1326,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "788:34:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1327,
																"nodeType": "ExpressionStatement",
																"src": "788:34:9"
															}
														]
													}
												},
												"id": 1350,
												"nodeType": "IfStatement",
												"src": "634:441:9",
												"trueBody": {
													"id": 1319,
													"nodeType": "Block",
													"src": "669:55:9",
													"statements": [
														{
															"functionReturnParameters": 1313,
															"id": 1318,
															"nodeType": "Return",
															"src": "683:7:9"
														}
													]
												}
											}
										]
									},
									"id": 1352,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "579:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1311,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "604:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1352,
												"src": "591:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1308",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1310,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1309,
														"name": "RecoverError",
														"nameLocations": [
															"591:12:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "591:12:9"
													},
													"referencedDeclaration": 1308,
													"src": "591:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1308",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "590:20:9"
									},
									"returnParameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "624:0:9"
									},
									"scope": 1664,
									"src": "570:511:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1397,
										"nodeType": "Block",
										"src": "2249:626:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1365,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1357,
															"src": "2263:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1366,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2273:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2263:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 1367,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2283:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2263:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1395,
													"nodeType": "Block",
													"src": "2788:81:9",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1389,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2818:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1388,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2810:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1387,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2810:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1390,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2810:10:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1391,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1308,
																			"src": "2822:12:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1308_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1392,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2835:22:9",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1305,
																		"src": "2822:35:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1308",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 1393,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2809:49:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1308_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1364,
															"id": 1394,
															"nodeType": "Return",
															"src": "2802:56:9"
														}
													]
												},
												"id": 1396,
												"nodeType": "IfStatement",
												"src": "2259:610:9",
												"trueBody": {
													"id": 1386,
													"nodeType": "Block",
													"src": "2287:495:9",
													"statements": [
														{
															"assignments": [
																1370
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1370,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2309:1:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1386,
																	"src": "2301:9:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1369,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2301:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1371,
															"nodeType": "VariableDeclarationStatement",
															"src": "2301:9:9"
														},
														{
															"assignments": [
																1373
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1373,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2332:1:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1386,
																	"src": "2324:9:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1372,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2324:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1374,
															"nodeType": "VariableDeclarationStatement",
															"src": "2324:9:9"
														},
														{
															"assignments": [
																1376
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1376,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2353:1:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1386,
																	"src": "2347:7:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1375,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2347:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1377,
															"nodeType": "VariableDeclarationStatement",
															"src": "2347:7:9"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2555:171:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2573:32:9",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2588:9:9"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2599:4:9",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2584:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2584:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2578:5:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2578:27:9"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "2573:1:9"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2622:32:9",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2637:9:9"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2648:4:9",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2633:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2633:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2627:5:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2627:27:9"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nodeType": "YulIdentifier",
																				"src": "2622:1:9"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2671:41:9",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2681:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nodeType": "YulIdentifier",
																									"src": "2694:9:9"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2705:4:9",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2690:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2690:20:9"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2684:5:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2684:27:9"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nodeType": "YulIdentifier",
																				"src": "2676:4:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2676:36:9"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nodeType": "YulIdentifier",
																				"src": "2671:1:9"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 1370,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2573:1:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1373,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2622:1:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1357,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2588:9:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1357,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2637:9:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1357,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2694:9:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1376,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2671:1:9",
																	"valueSize": 1
																}
															],
															"id": 1378,
															"nodeType": "InlineAssembly",
															"src": "2546:180:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1380,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1355,
																		"src": "2757:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1381,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1376,
																		"src": "2763:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 1382,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1370,
																		"src": "2766:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1383,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1373,
																		"src": "2769:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1379,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1398,
																		1472,
																		1566
																	],
																	"referencedDeclaration": 1566,
																	"src": "2746:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1308_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
																	}
																},
																"id": 1384,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2746:25:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1308_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1364,
															"id": 1385,
															"nodeType": "Return",
															"src": "2739:32:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1353,
										"nodeType": "StructuredDocumentation",
										"src": "1087:1053:9",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"
									},
									"id": 1398,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2154:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2173:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "2165:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1354,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1357,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2192:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "2179:22:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1356,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2179:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2164:38:9"
									},
									"returnParameters": {
										"id": 1364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1360,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "2226:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1359,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2226:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1363,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "2235:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1308",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1362,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1361,
														"name": "RecoverError",
														"nameLocations": [
															"2235:12:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "2235:12:9"
													},
													"referencedDeclaration": 1308,
													"src": "2235:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1308",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2225:23:9"
									},
									"scope": 1664,
									"src": "2145:730:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1424,
										"nodeType": "Block",
										"src": "3748:140:9",
										"statements": [
											{
												"assignments": [
													1409,
													1412
												],
												"declarations": [
													{
														"constant": false,
														"id": 1409,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3767:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1424,
														"src": "3759:17:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1408,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3759:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1412,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3791:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1424,
														"src": "3778:18:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1308",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1411,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1410,
																"name": "RecoverError",
																"nameLocations": [
																	"3778:12:9"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1308,
																"src": "3778:12:9"
															},
															"referencedDeclaration": 1308,
															"src": "3778:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1417,
												"initialValue": {
													"arguments": [
														{
															"id": 1414,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1401,
															"src": "3811:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1415,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1403,
															"src": "3817:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1413,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1398,
															1472,
															1566
														],
														"referencedDeclaration": 1398,
														"src": "3800:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1308_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3800:27:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1308_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3758:69:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1419,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1412,
															"src": "3849:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 1418,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1352,
														"src": "3837:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1308_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 1420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3837:18:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1421,
												"nodeType": "ExpressionStatement",
												"src": "3837:18:9"
											},
											{
												"expression": {
													"id": 1422,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1409,
													"src": "3872:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1407,
												"id": 1423,
												"nodeType": "Return",
												"src": "3865:16:9"
											}
										]
									},
									"documentation": {
										"id": 1399,
										"nodeType": "StructuredDocumentation",
										"src": "2881:775:9",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."
									},
									"id": 1425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3670:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3686:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "3678:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1400,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3678:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3705:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "3692:22:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1402,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3692:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3677:38:9"
									},
									"returnParameters": {
										"id": 1407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1406,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "3739:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1405,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3739:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3738:9:9"
									},
									"scope": 1664,
									"src": "3661:227:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1471,
										"nodeType": "Block",
										"src": "4245:203:9",
										"statements": [
											{
												"assignments": [
													1441
												],
												"declarations": [
													{
														"constant": false,
														"id": 1441,
														"mutability": "mutable",
														"name": "s",
														"nameLocation": "4263:1:9",
														"nodeType": "VariableDeclaration",
														"scope": 1471,
														"src": "4255:9:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1440,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4255:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1448,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1442,
														"name": "vs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1432,
														"src": "4267:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																"id": 1445,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4280:66:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9967"
																},
																"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9967"
																}
															],
															"id": 1444,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4272:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_bytes32_$",
																"typeString": "type(bytes32)"
															},
															"typeName": {
																"id": 1443,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "4272:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1446,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4272:75:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4267:80:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4255:92:9"
											},
											{
												"assignments": [
													1450
												],
												"declarations": [
													{
														"constant": false,
														"id": 1450,
														"mutability": "mutable",
														"name": "v",
														"nameLocation": "4363:1:9",
														"nodeType": "VariableDeclaration",
														"scope": 1471,
														"src": "4357:7:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 1449,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4357:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1463,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1461,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1458,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"id": 1455,
																					"name": "vs",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1432,
																					"src": "4382:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 1454,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4374:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint256_$",
																					"typeString": "type(uint256)"
																				},
																				"typeName": {
																					"id": 1453,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "4374:7:9",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1456,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4374:11:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">>",
																		"rightExpression": {
																			"hexValue": "323535",
																			"id": 1457,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4389:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_255_by_1",
																				"typeString": "int_const 255"
																			},
																			"value": "255"
																		},
																		"src": "4374:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1459,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4373:20:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "3237",
																"id": 1460,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4396:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_27_by_1",
																	"typeString": "int_const 27"
																},
																"value": "27"
															},
															"src": "4373:25:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1452,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4367:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint8_$",
															"typeString": "type(uint8)"
														},
														"typeName": {
															"id": 1451,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4367:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4367:32:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4357:42:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1465,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1428,
															"src": "4427:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1466,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1450,
															"src": "4433:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1467,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1430,
															"src": "4436:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1468,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1441,
															"src": "4439:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1464,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1398,
															1472,
															1566
														],
														"referencedDeclaration": 1566,
														"src": "4416:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1308_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4416:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1308_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 1439,
												"id": 1470,
												"nodeType": "Return",
												"src": "4409:32:9"
											}
										]
									},
									"documentation": {
										"id": 1426,
										"nodeType": "StructuredDocumentation",
										"src": "3894:243:9",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"
									},
									"id": 1472,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4151:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4170:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1472,
												"src": "4162:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1427,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4162:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1430,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4184:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1472,
												"src": "4176:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1429,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4176:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1432,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4195:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1472,
												"src": "4187:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1431,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4187:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4161:37:9"
									},
									"returnParameters": {
										"id": 1439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1435,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1472,
												"src": "4222:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1434,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4222:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1438,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1472,
												"src": "4231:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1308",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1437,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1436,
														"name": "RecoverError",
														"nameLocations": [
															"4231:12:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "4231:12:9"
													},
													"referencedDeclaration": 1308,
													"src": "4231:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1308",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4221:23:9"
									},
									"scope": 1664,
									"src": "4142:306:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1501,
										"nodeType": "Block",
										"src": "4699:136:9",
										"statements": [
											{
												"assignments": [
													1485,
													1488
												],
												"declarations": [
													{
														"constant": false,
														"id": 1485,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4718:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1501,
														"src": "4710:17:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1484,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4710:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1488,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4742:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1501,
														"src": "4729:18:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1308",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1487,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1486,
																"name": "RecoverError",
																"nameLocations": [
																	"4729:12:9"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1308,
																"src": "4729:12:9"
															},
															"referencedDeclaration": 1308,
															"src": "4729:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1494,
												"initialValue": {
													"arguments": [
														{
															"id": 1490,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1475,
															"src": "4762:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1491,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1477,
															"src": "4768:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1492,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1479,
															"src": "4771:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1489,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1398,
															1472,
															1566
														],
														"referencedDeclaration": 1472,
														"src": "4751:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1308_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4751:23:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1308_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4709:65:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1496,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1488,
															"src": "4796:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 1495,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1352,
														"src": "4784:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1308_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 1497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4784:18:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1498,
												"nodeType": "ExpressionStatement",
												"src": "4784:18:9"
											},
											{
												"expression": {
													"id": 1499,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1485,
													"src": "4819:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1483,
												"id": 1500,
												"nodeType": "Return",
												"src": "4812:16:9"
											}
										]
									},
									"documentation": {
										"id": 1473,
										"nodeType": "StructuredDocumentation",
										"src": "4454:154:9",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"
									},
									"id": 1502,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4622:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1475,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4638:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "4630:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1474,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4630:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4652:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "4644:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1476,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4644:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1479,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4663:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "4655:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1478,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4655:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4629:37:9"
									},
									"returnParameters": {
										"id": 1483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1482,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "4690:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1481,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4690:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4689:9:9"
									},
									"scope": 1664,
									"src": "4613:222:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1565,
										"nodeType": "Block",
										"src": "5120:1345:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1521,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1511,
																"src": "6016:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1520,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6008:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1519,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6008:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1522,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6008:10:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 1523,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6021:66:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6008:79:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1534,
												"nodeType": "IfStatement",
												"src": "6004:161:9",
												"trueBody": {
													"id": 1533,
													"nodeType": "Block",
													"src": "6089:76:9",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1527,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6119:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1526,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6111:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1525,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6111:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1528,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6111:10:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1529,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1308,
																			"src": "6123:12:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1308_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1530,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6136:17:9",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1306,
																		"src": "6123:30:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1308",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 1531,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6110:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1308_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1518,
															"id": 1532,
															"nodeType": "Return",
															"src": "6103:51:9"
														}
													]
												}
											},
											{
												"assignments": [
													1536
												],
												"declarations": [
													{
														"constant": false,
														"id": 1536,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6267:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1565,
														"src": "6259:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1535,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6259:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1543,
												"initialValue": {
													"arguments": [
														{
															"id": 1538,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1505,
															"src": "6286:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1539,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1507,
															"src": "6292:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1540,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1509,
															"src": "6295:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1541,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1511,
															"src": "6298:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1537,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6276:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6276:24:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6259:41:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1544,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1536,
														"src": "6314:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1547,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6332:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1546,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6324:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1545,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6324:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1548,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6324:10:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6314:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1559,
												"nodeType": "IfStatement",
												"src": "6310:101:9",
												"trueBody": {
													"id": 1558,
													"nodeType": "Block",
													"src": "6336:75:9",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1552,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6366:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1551,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6358:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1550,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6358:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1553,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6358:10:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1554,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1308,
																			"src": "6370:12:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1308_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1555,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6383:16:9",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1304,
																		"src": "6370:29:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1308",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 1556,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6357:43:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1308_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1518,
															"id": 1557,
															"nodeType": "Return",
															"src": "6350:50:9"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 1560,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1536,
															"src": "6429:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1561,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "6437:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1308_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1562,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6450:7:9",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1303,
															"src": "6437:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"id": 1563,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6428:30:9",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1308_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 1518,
												"id": 1564,
												"nodeType": "Return",
												"src": "6421:37:9"
											}
										]
									},
									"documentation": {
										"id": 1503,
										"nodeType": "StructuredDocumentation",
										"src": "4841:163:9",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"
									},
									"id": 1566,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5018:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1505,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5037:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "5029:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1504,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5029:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1507,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5049:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "5043:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1506,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5043:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1509,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5060:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "5052:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1508,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5052:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1511,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5071:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "5063:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1510,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5063:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5028:45:9"
									},
									"returnParameters": {
										"id": 1518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "5097:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1513,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5097:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1517,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "5106:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1308",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1516,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1515,
														"name": "RecoverError",
														"nameLocations": [
															"5106:12:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "5106:12:9"
													},
													"referencedDeclaration": 1308,
													"src": "5106:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1308",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5096:23:9"
									},
									"scope": 1664,
									"src": "5009:1456:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1598,
										"nodeType": "Block",
										"src": "6692:138:9",
										"statements": [
											{
												"assignments": [
													1581,
													1584
												],
												"declarations": [
													{
														"constant": false,
														"id": 1581,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "6711:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1598,
														"src": "6703:17:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1580,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6703:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1584,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "6735:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1598,
														"src": "6722:18:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1308",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1583,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1582,
																"name": "RecoverError",
																"nameLocations": [
																	"6722:12:9"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1308,
																"src": "6722:12:9"
															},
															"referencedDeclaration": 1308,
															"src": "6722:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1591,
												"initialValue": {
													"arguments": [
														{
															"id": 1586,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1569,
															"src": "6755:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1587,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1571,
															"src": "6761:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1588,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1573,
															"src": "6764:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1589,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1575,
															"src": "6767:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1585,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1398,
															1472,
															1566
														],
														"referencedDeclaration": 1566,
														"src": "6744:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1308_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6744:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1308_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6702:67:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1593,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1584,
															"src": "6791:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1308",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 1592,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1352,
														"src": "6779:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1308_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 1594,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6779:18:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1595,
												"nodeType": "ExpressionStatement",
												"src": "6779:18:9"
											},
											{
												"expression": {
													"id": 1596,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1581,
													"src": "6814:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1579,
												"id": 1597,
												"nodeType": "Return",
												"src": "6807:16:9"
											}
										]
									},
									"documentation": {
										"id": 1567,
										"nodeType": "StructuredDocumentation",
										"src": "6471:122:9",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 1599,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6607:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1569,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6623:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1599,
												"src": "6615:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1568,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6615:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1571,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6635:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1599,
												"src": "6629:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1570,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6629:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1573,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6646:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1599,
												"src": "6638:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1572,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6638:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1575,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6657:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1599,
												"src": "6649:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1574,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6649:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6614:45:9"
									},
									"returnParameters": {
										"id": 1579,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1578,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1599,
												"src": "6683:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1577,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6683:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6682:9:9"
									},
									"scope": 1664,
									"src": "6598:232:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1608,
										"nodeType": "Block",
										"src": "7206:310:9",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7362:148:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7383:4:9",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7389:34:9",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7376:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7376:48:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7376:48:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7444:4:9",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "hash",
																		"nodeType": "YulIdentifier",
																		"src": "7450:4:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7437:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7437:18:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7437:18:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7468:32:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7489:4:9",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7495:4:9",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "7479:9:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7479:21:9"
															},
															"variableNames": [
																{
																	"name": "message",
																	"nodeType": "YulIdentifier",
																	"src": "7468:7:9"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1602,
														"isOffset": false,
														"isSlot": false,
														"src": "7450:4:9",
														"valueSize": 1
													},
													{
														"declaration": 1605,
														"isOffset": false,
														"isSlot": false,
														"src": "7468:7:9",
														"valueSize": 1
													}
												],
												"id": 1607,
												"nodeType": "InlineAssembly",
												"src": "7353:157:9"
											}
										]
									},
									"documentation": {
										"id": 1600,
										"nodeType": "StructuredDocumentation",
										"src": "6836:279:9",
										"text": " @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 1609,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "7129:22:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1603,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1602,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "7160:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1609,
												"src": "7152:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1601,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7152:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7151:14:9"
									},
									"returnParameters": {
										"id": 1606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1605,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "7197:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1609,
												"src": "7189:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1604,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7189:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7188:17:9"
									},
									"scope": 1664,
									"src": "7120:396:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1630,
										"nodeType": "Block",
										"src": "7881:116:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 1620,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7925:32:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"id": 1623,
																				"name": "s",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1612,
																				"src": "7976:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 1624,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "7978:6:9",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "7976:8:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1621,
																			"name": "Strings",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1298,
																			"src": "7959:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Strings_$1298_$",
																				"typeString": "type(library Strings)"
																			}
																		},
																		"id": 1622,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7967:8:9",
																		"memberName": "toString",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1128,
																		"src": "7959:16:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 1625,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7959:26:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 1626,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1612,
																	"src": "7987:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 1618,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "7908:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1619,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7912:12:9",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "7908:16:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7908:81:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1617,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "7898:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7898:92:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1616,
												"id": 1629,
												"nodeType": "Return",
												"src": "7891:99:9"
											}
										]
									},
									"documentation": {
										"id": 1610,
										"nodeType": "StructuredDocumentation",
										"src": "7522:274:9",
										"text": " @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 1631,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "7810:22:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1612,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "7846:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1631,
												"src": "7833:14:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1611,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7833:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7832:16:9"
									},
									"returnParameters": {
										"id": 1616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1615,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1631,
												"src": "7872:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1614,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7872:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7871:9:9"
									},
									"scope": 1664,
									"src": "7801:196:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1642,
										"nodeType": "Block",
										"src": "8443:290:9",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8505:222:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8519:22:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8536:4:9",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8530:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8530:11:9"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nodeType": "YulTypedName",
																	"src": "8523:3:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "8561:3:9"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8566:10:9",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8554:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8554:23:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8554:23:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "8601:3:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8606:4:9",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8597:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8597:14:9"
																	},
																	{
																		"name": "domainSeparator",
																		"nodeType": "YulIdentifier",
																		"src": "8613:15:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8590:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8590:39:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8590:39:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "8653:3:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8658:4:9",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8649:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8649:14:9"
																	},
																	{
																		"name": "structHash",
																		"nodeType": "YulIdentifier",
																		"src": "8665:10:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8642:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8642:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8642:34:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8689:28:9",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "8707:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8712:4:9",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "8697:9:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8697:20:9"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "8689:4:9"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1639,
														"isOffset": false,
														"isSlot": false,
														"src": "8689:4:9",
														"valueSize": 1
													},
													{
														"declaration": 1634,
														"isOffset": false,
														"isSlot": false,
														"src": "8613:15:9",
														"valueSize": 1
													},
													{
														"declaration": 1636,
														"isOffset": false,
														"isSlot": false,
														"src": "8665:10:9",
														"valueSize": 1
													}
												],
												"id": 1641,
												"nodeType": "InlineAssembly",
												"src": "8496:231:9"
											}
										]
									},
									"documentation": {
										"id": 1632,
										"nodeType": "StructuredDocumentation",
										"src": "8003:328:9",
										"text": " @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."
									},
									"id": 1643,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "8345:15:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1634,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "8369:15:9",
												"nodeType": "VariableDeclaration",
												"scope": 1643,
												"src": "8361:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1633,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8361:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1636,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "8394:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1643,
												"src": "8386:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1635,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8386:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8360:45:9"
									},
									"returnParameters": {
										"id": 1640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1639,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8437:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1643,
												"src": "8429:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1638,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8429:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8428:14:9"
									},
									"scope": 1664,
									"src": "8336:397:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1662,
										"nodeType": "Block",
										"src": "9048:80:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 1656,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9092:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 1657,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1646,
																	"src": "9104:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1658,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1648,
																	"src": "9115:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 1654,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9075:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1655,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "9079:12:9",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "9075:16:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1659,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9075:45:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1653,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9065:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9065:56:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1652,
												"id": 1661,
												"nodeType": "Return",
												"src": "9058:63:9"
											}
										]
									},
									"documentation": {
										"id": 1644,
										"nodeType": "StructuredDocumentation",
										"src": "8739:193:9",
										"text": " @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."
									},
									"id": 1663,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "8946:31:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1646,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "8986:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 1663,
												"src": "8978:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1645,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8978:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1648,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9010:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1663,
												"src": "8997:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1647,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8997:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8977:38:9"
									},
									"returnParameters": {
										"id": 1652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1651,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1663,
												"src": "9039:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1650,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9038:9:9"
									},
									"scope": 1664,
									"src": "8937:191:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1665,
							"src": "369:8761:9",
							"usedErrors": []
						}
					],
					"src": "112:9019:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							2530
						]
					},
					"id": 2531,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1666,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1667,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:10",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 2530,
							"linearizedBaseContracts": [
								2530
							],
							"name": "Math",
							"nameLocation": "210:4:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Math.Rounding",
									"id": 1671,
									"members": [
										{
											"id": 1668,
											"name": "Down",
											"nameLocation": "245:4:10",
											"nodeType": "EnumValue",
											"src": "245:4:10"
										},
										{
											"id": 1669,
											"name": "Up",
											"nameLocation": "287:2:10",
											"nodeType": "EnumValue",
											"src": "287:2:10"
										},
										{
											"id": 1670,
											"name": "Zero",
											"nameLocation": "318:4:10",
											"nodeType": "EnumValue",
											"src": "318:4:10"
										}
									],
									"name": "Rounding",
									"nameLocation": "226:8:10",
									"nodeType": "EnumDefinition",
									"src": "221:122:10"
								},
								{
									"body": {
										"id": 1688,
										"nodeType": "Block",
										"src": "480:37:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1683,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1681,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1674,
															"src": "497:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 1682,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1676,
															"src": "501:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "497:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1685,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1676,
														"src": "509:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1686,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "497:13:10",
													"trueExpression": {
														"id": 1684,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1674,
														"src": "505:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1680,
												"id": 1687,
												"nodeType": "Return",
												"src": "490:20:10"
											}
										]
									},
									"documentation": {
										"id": 1672,
										"nodeType": "StructuredDocumentation",
										"src": "349:59:10",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 1689,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "422:3:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1674,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "434:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1689,
												"src": "426:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1676,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "445:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1689,
												"src": "437:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1675,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:22:10"
									},
									"returnParameters": {
										"id": 1680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1679,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1689,
												"src": "471:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1678,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:9:10"
									},
									"scope": 2530,
									"src": "413:104:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1706,
										"nodeType": "Block",
										"src": "655:37:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1701,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1699,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1692,
															"src": "672:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 1700,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1694,
															"src": "676:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "672:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1703,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1694,
														"src": "684:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "672:13:10",
													"trueExpression": {
														"id": 1702,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1692,
														"src": "680:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1698,
												"id": 1705,
												"nodeType": "Return",
												"src": "665:20:10"
											}
										]
									},
									"documentation": {
										"id": 1690,
										"nodeType": "StructuredDocumentation",
										"src": "523:60:10",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 1707,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "597:3:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1692,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "601:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1691,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1694,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "612:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1693,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:10"
									},
									"returnParameters": {
										"id": 1698,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1697,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "646:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1696,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "646:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:9:10"
									},
									"scope": 2530,
									"src": "588:104:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1729,
										"nodeType": "Block",
										"src": "876:82:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1727,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1719,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1717,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1710,
																	"src": "931:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 1718,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1712,
																	"src": "935:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "931:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1720,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "930:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1726,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1723,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1721,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1710,
																		"src": "941:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 1722,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1712,
																		"src": "945:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "941:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1724,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "940:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 1725,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "950:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "940:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "930:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1716,
												"id": 1728,
												"nodeType": "Return",
												"src": "923:28:10"
											}
										]
									},
									"documentation": {
										"id": 1708,
										"nodeType": "StructuredDocumentation",
										"src": "698:102:10",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 1730,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "814:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1713,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1710,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "830:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1730,
												"src": "822:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1709,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1712,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "841:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1730,
												"src": "833:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1711,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:22:10"
									},
									"returnParameters": {
										"id": 1716,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1715,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1730,
												"src": "867:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1714,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:9:10"
									},
									"scope": 2530,
									"src": "805:153:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1754,
										"nodeType": "Block",
										"src": "1228:123:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1742,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1740,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1733,
															"src": "1316:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1741,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1321:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1316:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1751,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1749,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1746,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1744,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1733,
																			"src": "1330:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1745,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1334:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1330:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1747,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1329:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1748,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1735,
																"src": "1339:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1329:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1750,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1343:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1329:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1752,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1316:28:10",
													"trueExpression": {
														"hexValue": "30",
														"id": 1743,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1325:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1739,
												"id": 1753,
												"nodeType": "Return",
												"src": "1309:35:10"
											}
										]
									},
									"documentation": {
										"id": 1731,
										"nodeType": "StructuredDocumentation",
										"src": "964:188:10",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 1755,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "1166:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1736,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1733,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1182:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "1174:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1732,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1174:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1735,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1193:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "1185:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1734,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1173:22:10"
									},
									"returnParameters": {
										"id": 1739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1738,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "1219:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1218:9:10"
									},
									"scope": 2530,
									"src": "1157:194:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1877,
										"nodeType": "Block",
										"src": "1765:4115:10",
										"statements": [
											{
												"id": 1876,
												"nodeType": "UncheckedBlock",
												"src": "1775:4099:10",
												"statements": [
													{
														"assignments": [
															1768
														],
														"declarations": [
															{
																"constant": false,
																"id": 1768,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "2104:5:10",
																"nodeType": "VariableDeclaration",
																"scope": 1876,
																"src": "2096:13:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1767,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2096:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1769,
														"nodeType": "VariableDeclarationStatement",
														"src": "2096:13:10"
													},
													{
														"assignments": [
															1771
														],
														"declarations": [
															{
																"constant": false,
																"id": 1771,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "2176:5:10",
																"nodeType": "VariableDeclaration",
																"scope": 1876,
																"src": "2168:13:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1770,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2168:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1772,
														"nodeType": "VariableDeclarationStatement",
														"src": "2168:13:10"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2248:157:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2266:30:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2283:1:10"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2286:1:10"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2293:1:10",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2289:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2289:6:10"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2276:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2276:20:10"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2270:2:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2313:18:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2326:1:10"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2329:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2322:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2322:9:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2313:5:10"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2348:43:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2365:2:10"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2369:5:10"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2361:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2361:14:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2380:2:10"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2384:5:10"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2377:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2377:13:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2357:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2357:34:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2348:5:10"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 1768,
																"isOffset": false,
																"isSlot": false,
																"src": "2313:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1768,
																"isOffset": false,
																"isSlot": false,
																"src": "2369:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1768,
																"isOffset": false,
																"isSlot": false,
																"src": "2384:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1771,
																"isOffset": false,
																"isSlot": false,
																"src": "2348:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1758,
																"isOffset": false,
																"isSlot": false,
																"src": "2283:1:10",
																"valueSize": 1
															},
															{
																"declaration": 1758,
																"isOffset": false,
																"isSlot": false,
																"src": "2326:1:10",
																"valueSize": 1
															},
															{
																"declaration": 1760,
																"isOffset": false,
																"isSlot": false,
																"src": "2286:1:10",
																"valueSize": 1
															},
															{
																"declaration": 1760,
																"isOffset": false,
																"isSlot": false,
																"src": "2329:1:10",
																"valueSize": 1
															}
														],
														"id": 1773,
														"nodeType": "InlineAssembly",
														"src": "2239:166:10"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1776,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1774,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1771,
																"src": "2486:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1775,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2495:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2486:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1782,
														"nodeType": "IfStatement",
														"src": "2482:368:10",
														"trueBody": {
															"id": 1781,
															"nodeType": "Block",
															"src": "2498:352:10",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1779,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1777,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1768,
																			"src": "2816:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 1778,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1762,
																			"src": "2824:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2816:19:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 1766,
																	"id": 1780,
																	"nodeType": "Return",
																	"src": "2809:26:10"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1786,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1784,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "2960:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 1785,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1771,
																		"src": "2974:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2960:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "4d6174683a206d756c446976206f766572666c6f77",
																	"id": 1787,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2981:23:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	},
																	"value": "Math: mulDiv overflow"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	}
																],
																"id": 1783,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2952:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1788,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2952:53:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1789,
														"nodeType": "ExpressionStatement",
														"src": "2952:53:10"
													},
													{
														"assignments": [
															1791
														],
														"declarations": [
															{
																"constant": false,
																"id": 1791,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "3269:9:10",
																"nodeType": "VariableDeclaration",
																"scope": 1876,
																"src": "3261:17:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1790,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3261:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1792,
														"nodeType": "VariableDeclarationStatement",
														"src": "3261:17:10"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3301:291:10",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3370:38:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3390:1:10"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3393:1:10"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3396:11:10"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3383:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3383:25:10"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3370:9:10"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3490:41:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3503:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3513:9:10"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3524:5:10"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3510:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3510:20:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3499:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3499:32:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3490:5:10"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3548:30:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3561:5:10"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3568:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3557:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3557:21:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3548:5:10"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 1762,
																"isOffset": false,
																"isSlot": false,
																"src": "3396:11:10",
																"valueSize": 1
															},
															{
																"declaration": 1768,
																"isOffset": false,
																"isSlot": false,
																"src": "3524:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1768,
																"isOffset": false,
																"isSlot": false,
																"src": "3548:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1768,
																"isOffset": false,
																"isSlot": false,
																"src": "3561:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1771,
																"isOffset": false,
																"isSlot": false,
																"src": "3490:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1771,
																"isOffset": false,
																"isSlot": false,
																"src": "3503:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1791,
																"isOffset": false,
																"isSlot": false,
																"src": "3370:9:10",
																"valueSize": 1
															},
															{
																"declaration": 1791,
																"isOffset": false,
																"isSlot": false,
																"src": "3513:9:10",
																"valueSize": 1
															},
															{
																"declaration": 1791,
																"isOffset": false,
																"isSlot": false,
																"src": "3568:9:10",
																"valueSize": 1
															},
															{
																"declaration": 1758,
																"isOffset": false,
																"isSlot": false,
																"src": "3390:1:10",
																"valueSize": 1
															},
															{
																"declaration": 1760,
																"isOffset": false,
																"isSlot": false,
																"src": "3393:1:10",
																"valueSize": 1
															}
														],
														"id": 1793,
														"nodeType": "InlineAssembly",
														"src": "3292:300:10"
													},
													{
														"assignments": [
															1795
														],
														"declarations": [
															{
																"constant": false,
																"id": 1795,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "3907:4:10",
																"nodeType": "VariableDeclaration",
																"scope": 1876,
																"src": "3899:12:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1794,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3899:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1803,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1802,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1796,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "3914:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1800,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1798,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3929:12:10",
																			"subExpression": {
																				"id": 1797,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1762,
																				"src": "3930:11:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1799,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3944:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3929:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1801,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3928:18:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3914:32:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3899:47:10"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3969:362:10",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "4034:37:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "4053:11:10"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "4066:4:10"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4049:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4049:22:10"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "4034:11:10"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4138:25:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "4151:5:10"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "4158:4:10"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4147:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4147:16:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "4138:5:10"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4278:39:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4298:1:10",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4301:4:10"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4294:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4294:12:10"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4308:4:10"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4290:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4290:23:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4315:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4286:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4286:31:10"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "4278:4:10"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 1762,
																"isOffset": false,
																"isSlot": false,
																"src": "4034:11:10",
																"valueSize": 1
															},
															{
																"declaration": 1762,
																"isOffset": false,
																"isSlot": false,
																"src": "4053:11:10",
																"valueSize": 1
															},
															{
																"declaration": 1768,
																"isOffset": false,
																"isSlot": false,
																"src": "4138:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1768,
																"isOffset": false,
																"isSlot": false,
																"src": "4151:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1795,
																"isOffset": false,
																"isSlot": false,
																"src": "4066:4:10",
																"valueSize": 1
															},
															{
																"declaration": 1795,
																"isOffset": false,
																"isSlot": false,
																"src": "4158:4:10",
																"valueSize": 1
															},
															{
																"declaration": 1795,
																"isOffset": false,
																"isSlot": false,
																"src": "4278:4:10",
																"valueSize": 1
															},
															{
																"declaration": 1795,
																"isOffset": false,
																"isSlot": false,
																"src": "4301:4:10",
																"valueSize": 1
															},
															{
																"declaration": 1795,
																"isOffset": false,
																"isSlot": false,
																"src": "4308:4:10",
																"valueSize": 1
															}
														],
														"id": 1804,
														"nodeType": "InlineAssembly",
														"src": "3960:371:10"
													},
													{
														"expression": {
															"id": 1809,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1805,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1768,
																"src": "4397:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1808,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1806,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1771,
																	"src": "4406:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1807,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1795,
																	"src": "4414:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4406:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4397:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1810,
														"nodeType": "ExpressionStatement",
														"src": "4397:21:10"
													},
													{
														"assignments": [
															1812
														],
														"declarations": [
															{
																"constant": false,
																"id": 1812,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "4744:7:10",
																"nodeType": "VariableDeclaration",
																"scope": 1876,
																"src": "4736:15:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1811,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4736:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1819,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1818,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1815,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 1813,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4755:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 1814,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1762,
																			"src": "4759:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4755:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1816,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4754:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 1817,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4774:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4754:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4736:39:10"
													},
													{
														"expression": {
															"id": 1826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1820,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1812,
																"src": "4992:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1825,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1821,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5003:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1824,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1822,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "5007:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1823,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1812,
																		"src": "5021:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5007:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5003:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4992:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1827,
														"nodeType": "ExpressionStatement",
														"src": "4992:36:10"
													},
													{
														"expression": {
															"id": 1834,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1828,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1812,
																"src": "5061:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1833,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1829,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5072:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1832,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1830,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "5076:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1831,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1812,
																		"src": "5090:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5076:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5072:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5061:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1835,
														"nodeType": "ExpressionStatement",
														"src": "5061:36:10"
													},
													{
														"expression": {
															"id": 1842,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1836,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1812,
																"src": "5131:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1841,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1837,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5142:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1840,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1838,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "5146:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1839,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1812,
																		"src": "5160:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5146:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5142:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5131:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1843,
														"nodeType": "ExpressionStatement",
														"src": "5131:36:10"
													},
													{
														"expression": {
															"id": 1850,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1844,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1812,
																"src": "5201:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1849,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1845,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5212:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1848,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1846,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "5216:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1847,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1812,
																		"src": "5230:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5216:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5212:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5201:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1851,
														"nodeType": "ExpressionStatement",
														"src": "5201:36:10"
													},
													{
														"expression": {
															"id": 1858,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1852,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1812,
																"src": "5271:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1857,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1853,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5282:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1856,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1854,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "5286:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1855,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1812,
																		"src": "5300:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5286:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5282:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5271:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1859,
														"nodeType": "ExpressionStatement",
														"src": "5271:36:10"
													},
													{
														"expression": {
															"id": 1866,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1860,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1812,
																"src": "5342:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1865,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1861,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5353:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1864,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1862,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "5357:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1863,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1812,
																		"src": "5371:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5357:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5353:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5342:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1867,
														"nodeType": "ExpressionStatement",
														"src": "5342:36:10"
													},
													{
														"expression": {
															"id": 1872,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1868,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1765,
																"src": "5812:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1871,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1869,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1768,
																	"src": "5821:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1870,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1812,
																	"src": "5829:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5821:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5812:24:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1873,
														"nodeType": "ExpressionStatement",
														"src": "5812:24:10"
													},
													{
														"expression": {
															"id": 1874,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1765,
															"src": "5857:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1766,
														"id": 1875,
														"nodeType": "Return",
														"src": "5850:13:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1756,
										"nodeType": "StructuredDocumentation",
										"src": "1357:305:10",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 1878,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "1676:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1758,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "1691:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1878,
												"src": "1683:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1683:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1760,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "1702:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1878,
												"src": "1694:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1694:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1762,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "1713:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1878,
												"src": "1705:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1705:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1682:43:10"
									},
									"returnParameters": {
										"id": 1766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1757:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1878,
												"src": "1749:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1764,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1749:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1748:16:10"
									},
									"scope": 2530,
									"src": "1667:4213:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1921,
										"nodeType": "Block",
										"src": "6122:189:10",
										"statements": [
											{
												"assignments": [
													1894
												],
												"declarations": [
													{
														"constant": false,
														"id": 1894,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "6140:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 1921,
														"src": "6132:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1893,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6132:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1900,
												"initialValue": {
													"arguments": [
														{
															"id": 1896,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1881,
															"src": "6156:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1897,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1883,
															"src": "6159:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1898,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1885,
															"src": "6162:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1895,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1878,
															1922
														],
														"referencedDeclaration": 1878,
														"src": "6149:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1899,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6149:25:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:42:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$1671",
															"typeString": "enum Math.Rounding"
														},
														"id": 1904,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1901,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1888,
															"src": "6188:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$1671",
																"typeString": "enum Math.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1902,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1671,
																"src": "6200:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$1671_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1903,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6209:2:10",
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1669,
															"src": "6200:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$1671",
																"typeString": "enum Math.Rounding"
															}
														},
														"src": "6188:23:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1911,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 1906,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1881,
																	"src": "6222:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1907,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1883,
																	"src": "6225:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1908,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1885,
																	"src": "6228:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1905,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "6215:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1909,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6215:25:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1910,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6243:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "6215:29:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6188:56:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1918,
												"nodeType": "IfStatement",
												"src": "6184:98:10",
												"trueBody": {
													"id": 1917,
													"nodeType": "Block",
													"src": "6246:36:10",
													"statements": [
														{
															"expression": {
																"id": 1915,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1913,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1894,
																	"src": "6260:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1914,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6270:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6260:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1916,
															"nodeType": "ExpressionStatement",
															"src": "6260:11:10"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1919,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1894,
													"src": "6298:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1892,
												"id": 1920,
												"nodeType": "Return",
												"src": "6291:13:10"
											}
										]
									},
									"documentation": {
										"id": 1879,
										"nodeType": "StructuredDocumentation",
										"src": "5886:121:10",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 1922,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "6021:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1889,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1881,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "6036:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "6028:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1880,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6028:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1883,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "6047:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "6039:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1882,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1885,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "6058:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "6050:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1884,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6050:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1888,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "6080:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "6071:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1671",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1887,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1886,
														"name": "Rounding",
														"nameLocations": [
															"6071:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1671,
														"src": "6071:8:10"
													},
													"referencedDeclaration": 1671,
													"src": "6071:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1671",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6027:62:10"
									},
									"returnParameters": {
										"id": 1892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1891,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "6113:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6113:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6112:9:10"
									},
									"scope": 2530,
									"src": "6012:299:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2033,
										"nodeType": "Block",
										"src": "6587:1585:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1932,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1930,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1925,
														"src": "6601:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1931,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6606:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6601:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1936,
												"nodeType": "IfStatement",
												"src": "6597:45:10",
												"trueBody": {
													"id": 1935,
													"nodeType": "Block",
													"src": "6609:33:10",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1933,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6630:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1929,
															"id": 1934,
															"nodeType": "Return",
															"src": "6623:8:10"
														}
													]
												}
											},
											{
												"assignments": [
													1938
												],
												"declarations": [
													{
														"constant": false,
														"id": 1938,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7329:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2033,
														"src": "7321:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1937,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7321:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1947,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1946,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 1939,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7338:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1944,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1941,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1925,
																			"src": "7349:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1940,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2202,
																			2238
																		],
																		"referencedDeclaration": 2202,
																		"src": "7344:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1942,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7344:7:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1943,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7355:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7344:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1945,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7343:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7338:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7321:36:10"
											},
											{
												"id": 2032,
												"nodeType": "UncheckedBlock",
												"src": "7758:408:10",
												"statements": [
													{
														"expression": {
															"id": 1957,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1948,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1938,
																"src": "7782:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1956,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1953,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1949,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1938,
																				"src": "7792:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1952,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1950,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1925,
																					"src": "7801:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1951,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1938,
																					"src": "7805:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7801:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7792:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1954,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7791:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1955,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7816:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7791:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7782:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1958,
														"nodeType": "ExpressionStatement",
														"src": "7782:35:10"
													},
													{
														"expression": {
															"id": 1968,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1959,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1938,
																"src": "7831:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1967,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1964,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1960,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1938,
																				"src": "7841:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1963,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1961,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1925,
																					"src": "7850:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1962,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1938,
																					"src": "7854:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7850:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7841:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1965,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7840:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1966,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7865:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7840:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7831:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1969,
														"nodeType": "ExpressionStatement",
														"src": "7831:35:10"
													},
													{
														"expression": {
															"id": 1979,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1970,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1938,
																"src": "7880:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1978,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1975,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1971,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1938,
																				"src": "7890:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1974,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1972,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1925,
																					"src": "7899:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1973,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1938,
																					"src": "7903:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7899:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7890:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1976,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7889:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1977,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7914:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7889:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7880:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1980,
														"nodeType": "ExpressionStatement",
														"src": "7880:35:10"
													},
													{
														"expression": {
															"id": 1990,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1981,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1938,
																"src": "7929:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1989,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1986,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1982,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1938,
																				"src": "7939:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1985,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1983,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1925,
																					"src": "7948:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1984,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1938,
																					"src": "7952:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7948:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7939:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1987,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7938:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1988,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7963:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7938:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7929:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1991,
														"nodeType": "ExpressionStatement",
														"src": "7929:35:10"
													},
													{
														"expression": {
															"id": 2001,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1992,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1938,
																"src": "7978:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2000,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1997,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1993,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1938,
																				"src": "7988:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1996,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1994,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1925,
																					"src": "7997:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1995,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1938,
																					"src": "8001:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7997:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7988:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1998,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7987:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1999,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8012:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7987:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7978:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2002,
														"nodeType": "ExpressionStatement",
														"src": "7978:35:10"
													},
													{
														"expression": {
															"id": 2012,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2003,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1938,
																"src": "8027:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2011,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2008,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2004,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1938,
																				"src": "8037:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2007,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2005,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1925,
																					"src": "8046:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2006,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1938,
																					"src": "8050:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8046:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8037:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2009,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8036:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2010,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8061:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8036:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8027:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2013,
														"nodeType": "ExpressionStatement",
														"src": "8027:35:10"
													},
													{
														"expression": {
															"id": 2023,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2014,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1938,
																"src": "8076:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2022,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2019,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2015,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1938,
																				"src": "8086:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2018,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2016,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1925,
																					"src": "8095:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2017,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1938,
																					"src": "8099:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8095:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8086:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2020,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8085:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2021,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8110:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8085:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8076:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2024,
														"nodeType": "ExpressionStatement",
														"src": "8076:35:10"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2026,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1938,
																	"src": "8136:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2029,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2027,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1925,
																		"src": "8144:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2028,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1938,
																		"src": "8148:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "8144:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2025,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1707,
																"src": "8132:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2030,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8132:23:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1929,
														"id": 2031,
														"nodeType": "Return",
														"src": "8125:30:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1923,
										"nodeType": "StructuredDocumentation",
										"src": "6317:208:10",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2034,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "6539:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1925,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6552:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2034,
												"src": "6544:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6544:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6543:11:10"
									},
									"returnParameters": {
										"id": 1929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1928,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2034,
												"src": "6578:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1927,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6578:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6577:9:10"
									},
									"scope": 2530,
									"src": "6530:1642:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2069,
										"nodeType": "Block",
										"src": "8348:161:10",
										"statements": [
											{
												"id": 2068,
												"nodeType": "UncheckedBlock",
												"src": "8358:145:10",
												"statements": [
													{
														"assignments": [
															2046
														],
														"declarations": [
															{
																"constant": false,
																"id": 2046,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "8390:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2068,
																"src": "8382:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2045,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8382:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2050,
														"initialValue": {
															"arguments": [
																{
																	"id": 2048,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2037,
																	"src": "8404:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2047,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2034,
																	2070
																],
																"referencedDeclaration": 2034,
																"src": "8399:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2049,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8399:7:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8382:24:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2066,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2051,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2046,
																"src": "8427:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2061,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1671",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2055,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2052,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2040,
																					"src": "8437:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1671",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2053,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1671,
																						"src": "8449:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1671_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2054,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "8458:2:10",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1669,
																					"src": "8449:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1671",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "8437:23:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2060,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2058,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2056,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2046,
																						"src": "8464:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2057,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2046,
																						"src": "8473:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8464:15:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2059,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2037,
																					"src": "8482:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8464:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8437:46:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2063,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8490:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2064,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8437:54:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2062,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8486:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2065,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8436:56:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8427:65:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2044,
														"id": 2067,
														"nodeType": "Return",
														"src": "8420:72:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2035,
										"nodeType": "StructuredDocumentation",
										"src": "8178:89:10",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2070,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8281:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2041,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2037,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8294:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2070,
												"src": "8286:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8286:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2040,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8306:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2070,
												"src": "8297:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1671",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2039,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2038,
														"name": "Rounding",
														"nameLocations": [
															"8297:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1671,
														"src": "8297:8:10"
													},
													"referencedDeclaration": 1671,
													"src": "8297:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1671",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8285:30:10"
									},
									"returnParameters": {
										"id": 2044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2043,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2070,
												"src": "8339:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2042,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8339:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8338:9:10"
									},
									"scope": 2530,
									"src": "8272:237:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2201,
										"nodeType": "Block",
										"src": "8694:922:10",
										"statements": [
											{
												"assignments": [
													2079
												],
												"declarations": [
													{
														"constant": false,
														"id": 2079,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8712:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2201,
														"src": "8704:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2078,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8704:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2081,
												"initialValue": {
													"hexValue": "30",
													"id": 2080,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8721:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8704:18:10"
											},
											{
												"id": 2198,
												"nodeType": "UncheckedBlock",
												"src": "8732:855:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2086,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2084,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2082,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2073,
																	"src": "8760:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2083,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8769:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8760:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2085,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8775:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8760:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2096,
														"nodeType": "IfStatement",
														"src": "8756:99:10",
														"trueBody": {
															"id": 2095,
															"nodeType": "Block",
															"src": "8778:77:10",
															"statements": [
																{
																	"expression": {
																		"id": 2089,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2087,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2073,
																			"src": "8796:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2088,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8806:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8796:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2090,
																	"nodeType": "ExpressionStatement",
																	"src": "8796:13:10"
																},
																{
																	"expression": {
																		"id": 2093,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2091,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2079,
																			"src": "8827:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2092,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8837:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8827:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2094,
																	"nodeType": "ExpressionStatement",
																	"src": "8827:13:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2099,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2097,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2073,
																	"src": "8872:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2098,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8881:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8872:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2100,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8886:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8872:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2111,
														"nodeType": "IfStatement",
														"src": "8868:96:10",
														"trueBody": {
															"id": 2110,
															"nodeType": "Block",
															"src": "8889:75:10",
															"statements": [
																{
																	"expression": {
																		"id": 2104,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2102,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2073,
																			"src": "8907:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2103,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8917:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8907:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2105,
																	"nodeType": "ExpressionStatement",
																	"src": "8907:12:10"
																},
																{
																	"expression": {
																		"id": 2108,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2106,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2079,
																			"src": "8937:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2107,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8947:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8937:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2109,
																	"nodeType": "ExpressionStatement",
																	"src": "8937:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2116,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2114,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2112,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2073,
																	"src": "8981:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2113,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8990:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8981:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2115,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8995:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8981:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2126,
														"nodeType": "IfStatement",
														"src": "8977:96:10",
														"trueBody": {
															"id": 2125,
															"nodeType": "Block",
															"src": "8998:75:10",
															"statements": [
																{
																	"expression": {
																		"id": 2119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2117,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2073,
																			"src": "9016:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2118,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9026:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "9016:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2120,
																	"nodeType": "ExpressionStatement",
																	"src": "9016:12:10"
																},
																{
																	"expression": {
																		"id": 2123,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2121,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2079,
																			"src": "9046:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2122,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9056:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "9046:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2124,
																	"nodeType": "ExpressionStatement",
																	"src": "9046:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2131,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2129,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2127,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2073,
																	"src": "9090:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2128,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9099:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "9090:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2130,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9104:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9090:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2141,
														"nodeType": "IfStatement",
														"src": "9086:96:10",
														"trueBody": {
															"id": 2140,
															"nodeType": "Block",
															"src": "9107:75:10",
															"statements": [
																{
																	"expression": {
																		"id": 2134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2132,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2073,
																			"src": "9125:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2133,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9135:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "9125:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2135,
																	"nodeType": "ExpressionStatement",
																	"src": "9125:12:10"
																},
																{
																	"expression": {
																		"id": 2138,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2136,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2079,
																			"src": "9155:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2137,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9165:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "9155:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2139,
																	"nodeType": "ExpressionStatement",
																	"src": "9155:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2144,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2142,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2073,
																	"src": "9199:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2143,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9208:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "9199:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2145,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9212:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9199:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2156,
														"nodeType": "IfStatement",
														"src": "9195:93:10",
														"trueBody": {
															"id": 2155,
															"nodeType": "Block",
															"src": "9215:73:10",
															"statements": [
																{
																	"expression": {
																		"id": 2149,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2147,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2073,
																			"src": "9233:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2148,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9243:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9233:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2150,
																	"nodeType": "ExpressionStatement",
																	"src": "9233:11:10"
																},
																{
																	"expression": {
																		"id": 2153,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2151,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2079,
																			"src": "9262:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2152,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9272:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9262:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2154,
																	"nodeType": "ExpressionStatement",
																	"src": "9262:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2161,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2159,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2157,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2073,
																	"src": "9305:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2158,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9314:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9305:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2160,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9318:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9305:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2171,
														"nodeType": "IfStatement",
														"src": "9301:93:10",
														"trueBody": {
															"id": 2170,
															"nodeType": "Block",
															"src": "9321:73:10",
															"statements": [
																{
																	"expression": {
																		"id": 2164,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2162,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2073,
																			"src": "9339:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2163,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9349:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9339:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2165,
																	"nodeType": "ExpressionStatement",
																	"src": "9339:11:10"
																},
																{
																	"expression": {
																		"id": 2168,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2166,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2079,
																			"src": "9368:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2167,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9378:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9368:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2169,
																	"nodeType": "ExpressionStatement",
																	"src": "9368:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2176,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2174,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2172,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2073,
																	"src": "9411:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2173,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9420:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9411:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2175,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9424:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9411:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2186,
														"nodeType": "IfStatement",
														"src": "9407:93:10",
														"trueBody": {
															"id": 2185,
															"nodeType": "Block",
															"src": "9427:73:10",
															"statements": [
																{
																	"expression": {
																		"id": 2179,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2177,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2073,
																			"src": "9445:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2178,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9455:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9445:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2180,
																	"nodeType": "ExpressionStatement",
																	"src": "9445:11:10"
																},
																{
																	"expression": {
																		"id": 2183,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2181,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2079,
																			"src": "9474:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2182,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9484:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9474:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2184,
																	"nodeType": "ExpressionStatement",
																	"src": "9474:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2191,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2189,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2187,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2073,
																	"src": "9517:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2188,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9526:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9517:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2190,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9530:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9517:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2197,
														"nodeType": "IfStatement",
														"src": "9513:64:10",
														"trueBody": {
															"id": 2196,
															"nodeType": "Block",
															"src": "9533:44:10",
															"statements": [
																{
																	"expression": {
																		"id": 2194,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2192,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2079,
																			"src": "9551:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2193,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9561:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9551:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2195,
																	"nodeType": "ExpressionStatement",
																	"src": "9551:11:10"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2199,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2079,
													"src": "9603:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2077,
												"id": 2200,
												"nodeType": "Return",
												"src": "9596:13:10"
											}
										]
									},
									"documentation": {
										"id": 2071,
										"nodeType": "StructuredDocumentation",
										"src": "8515:113:10",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2202,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "8642:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2073,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8655:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2202,
												"src": "8647:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2072,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8647:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8646:15:10"
									},
									"returnParameters": {
										"id": 2077,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2076,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2202,
												"src": "8685:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2075,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8685:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8684:9:10"
									},
									"scope": 2530,
									"src": "8633:983:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2237,
										"nodeType": "Block",
										"src": "9849:165:10",
										"statements": [
											{
												"id": 2236,
												"nodeType": "UncheckedBlock",
												"src": "9859:149:10",
												"statements": [
													{
														"assignments": [
															2214
														],
														"declarations": [
															{
																"constant": false,
																"id": 2214,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9891:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2236,
																"src": "9883:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2213,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9883:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2218,
														"initialValue": {
															"arguments": [
																{
																	"id": 2216,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2205,
																	"src": "9905:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2215,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2202,
																	2238
																],
																"referencedDeclaration": 2202,
																"src": "9900:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2217,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9900:11:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9883:28:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2234,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2219,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2214,
																"src": "9932:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2229,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1671",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2223,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2220,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2208,
																					"src": "9942:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1671",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2221,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1671,
																						"src": "9954:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1671_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2222,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "9963:2:10",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1669,
																					"src": "9954:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1671",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "9942:23:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2228,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2226,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2224,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9969:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 2225,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2214,
																						"src": "9974:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9969:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2227,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2205,
																					"src": "9983:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9969:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9942:46:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2231,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9995:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2232,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9942:54:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2230,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9991:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2233,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9941:56:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9932:65:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2212,
														"id": 2235,
														"nodeType": "Return",
														"src": "9925:72:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2203,
										"nodeType": "StructuredDocumentation",
										"src": "9622:142:10",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9778:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2205,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9791:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2238,
												"src": "9783:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9783:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2208,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9807:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2238,
												"src": "9798:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1671",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2207,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2206,
														"name": "Rounding",
														"nameLocations": [
															"9798:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1671,
														"src": "9798:8:10"
													},
													"referencedDeclaration": 1671,
													"src": "9798:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1671",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9782:34:10"
									},
									"returnParameters": {
										"id": 2212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2211,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2238,
												"src": "9840:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9840:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9839:9:10"
									},
									"scope": 2530,
									"src": "9769:245:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2366,
										"nodeType": "Block",
										"src": "10201:854:10",
										"statements": [
											{
												"assignments": [
													2247
												],
												"declarations": [
													{
														"constant": false,
														"id": 2247,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10219:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2366,
														"src": "10211:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2246,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10211:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2249,
												"initialValue": {
													"hexValue": "30",
													"id": 2248,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10228:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10211:18:10"
											},
											{
												"id": 2363,
												"nodeType": "UncheckedBlock",
												"src": "10239:787:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2250,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2241,
																"src": "10267:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 2253,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2251,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10276:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2252,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10282:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10276:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10267:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2266,
														"nodeType": "IfStatement",
														"src": "10263:103:10",
														"trueBody": {
															"id": 2265,
															"nodeType": "Block",
															"src": "10286:80:10",
															"statements": [
																{
																	"expression": {
																		"id": 2259,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2255,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2241,
																			"src": "10304:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 2258,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2256,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10313:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 2257,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10319:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10313:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10304:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2260,
																	"nodeType": "ExpressionStatement",
																	"src": "10304:17:10"
																},
																{
																	"expression": {
																		"id": 2263,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2261,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2247,
																			"src": "10339:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2262,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10349:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10339:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2264,
																	"nodeType": "ExpressionStatement",
																	"src": "10339:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2271,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2267,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2241,
																"src": "10383:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 2270,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2268,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10392:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10398:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10392:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10383:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2283,
														"nodeType": "IfStatement",
														"src": "10379:103:10",
														"trueBody": {
															"id": 2282,
															"nodeType": "Block",
															"src": "10402:80:10",
															"statements": [
																{
																	"expression": {
																		"id": 2276,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2272,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2241,
																			"src": "10420:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 2275,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2273,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10429:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 2274,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10435:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10429:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10420:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2277,
																	"nodeType": "ExpressionStatement",
																	"src": "10420:17:10"
																},
																{
																	"expression": {
																		"id": 2280,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2278,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2247,
																			"src": "10455:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2279,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10465:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10455:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2281,
																	"nodeType": "ExpressionStatement",
																	"src": "10455:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2288,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2284,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2241,
																"src": "10499:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 2287,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2285,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10508:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2286,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10514:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10508:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10499:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2300,
														"nodeType": "IfStatement",
														"src": "10495:103:10",
														"trueBody": {
															"id": 2299,
															"nodeType": "Block",
															"src": "10518:80:10",
															"statements": [
																{
																	"expression": {
																		"id": 2293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2289,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2241,
																			"src": "10536:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 2292,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2290,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10545:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 2291,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10551:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10545:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10536:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2294,
																	"nodeType": "ExpressionStatement",
																	"src": "10536:17:10"
																},
																{
																	"expression": {
																		"id": 2297,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2295,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2247,
																			"src": "10571:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2296,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10581:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10571:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2298,
																	"nodeType": "ExpressionStatement",
																	"src": "10571:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2305,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2301,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2241,
																"src": "10615:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 2304,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2302,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10624:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2303,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10630:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10624:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10615:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2317,
														"nodeType": "IfStatement",
														"src": "10611:100:10",
														"trueBody": {
															"id": 2316,
															"nodeType": "Block",
															"src": "10633:78:10",
															"statements": [
																{
																	"expression": {
																		"id": 2310,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2306,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2241,
																			"src": "10651:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 2309,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2307,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10660:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 2308,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10666:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10660:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10651:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2311,
																	"nodeType": "ExpressionStatement",
																	"src": "10651:16:10"
																},
																{
																	"expression": {
																		"id": 2314,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2312,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2247,
																			"src": "10685:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2313,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10695:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10685:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2315,
																	"nodeType": "ExpressionStatement",
																	"src": "10685:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2322,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2318,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2241,
																"src": "10728:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 2321,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2319,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10737:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2320,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10743:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10737:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10728:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2334,
														"nodeType": "IfStatement",
														"src": "10724:100:10",
														"trueBody": {
															"id": 2333,
															"nodeType": "Block",
															"src": "10746:78:10",
															"statements": [
																{
																	"expression": {
																		"id": 2327,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2323,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2241,
																			"src": "10764:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 2326,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2324,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10773:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 2325,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10779:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10773:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10764:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2328,
																	"nodeType": "ExpressionStatement",
																	"src": "10764:16:10"
																},
																{
																	"expression": {
																		"id": 2331,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2329,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2247,
																			"src": "10798:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2330,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10808:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10798:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2332,
																	"nodeType": "ExpressionStatement",
																	"src": "10798:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2339,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2335,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2241,
																"src": "10841:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 2338,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2336,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10850:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2337,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10856:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10850:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10841:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2351,
														"nodeType": "IfStatement",
														"src": "10837:100:10",
														"trueBody": {
															"id": 2350,
															"nodeType": "Block",
															"src": "10859:78:10",
															"statements": [
																{
																	"expression": {
																		"id": 2344,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2340,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2241,
																			"src": "10877:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 2343,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2341,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10886:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 2342,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10892:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10886:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10877:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2345,
																	"nodeType": "ExpressionStatement",
																	"src": "10877:16:10"
																},
																{
																	"expression": {
																		"id": 2348,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2346,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2247,
																			"src": "10911:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2347,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10921:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10911:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2349,
																	"nodeType": "ExpressionStatement",
																	"src": "10911:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2356,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2352,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2241,
																"src": "10954:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 2355,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2353,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10963:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10969:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10963:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10954:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2362,
														"nodeType": "IfStatement",
														"src": "10950:66:10",
														"trueBody": {
															"id": 2361,
															"nodeType": "Block",
															"src": "10972:44:10",
															"statements": [
																{
																	"expression": {
																		"id": 2359,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2357,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2247,
																			"src": "10990:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2358,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11000:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10990:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2360,
																	"nodeType": "ExpressionStatement",
																	"src": "10990:11:10"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2364,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2247,
													"src": "11042:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2245,
												"id": 2365,
												"nodeType": "Return",
												"src": "11035:13:10"
											}
										]
									},
									"documentation": {
										"id": 2239,
										"nodeType": "StructuredDocumentation",
										"src": "10020:114:10",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "10148:5:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2241,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10162:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "10154:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10154:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10153:15:10"
									},
									"returnParameters": {
										"id": 2245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2244,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "10192:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2243,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10192:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10191:9:10"
									},
									"scope": 2530,
									"src": "10139:916:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2402,
										"nodeType": "Block",
										"src": "11290:167:10",
										"statements": [
											{
												"id": 2401,
												"nodeType": "UncheckedBlock",
												"src": "11300:151:10",
												"statements": [
													{
														"assignments": [
															2379
														],
														"declarations": [
															{
																"constant": false,
																"id": 2379,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11332:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2401,
																"src": "11324:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2378,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11324:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2383,
														"initialValue": {
															"arguments": [
																{
																	"id": 2381,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2370,
																	"src": "11347:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2380,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2367,
																	2403
																],
																"referencedDeclaration": 2367,
																"src": "11341:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2382,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11341:12:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11324:29:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2399,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2384,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2379,
																"src": "11374:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2394,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1671",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2388,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2385,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2373,
																					"src": "11384:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1671",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2386,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1671,
																						"src": "11396:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1671_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2387,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "11405:2:10",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1669,
																					"src": "11396:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1671",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "11384:23:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2393,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2391,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 2389,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11411:2:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 2390,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2379,
																						"src": "11417:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11411:12:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2392,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2370,
																					"src": "11426:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11411:20:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11384:47:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2396,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11438:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2397,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11384:55:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2395,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11434:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2398,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11383:57:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11374:66:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2377,
														"id": 2400,
														"nodeType": "Return",
														"src": "11367:73:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2368,
										"nodeType": "StructuredDocumentation",
										"src": "11061:143:10",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2403,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "11218:5:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2370,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11232:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2403,
												"src": "11224:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11224:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2373,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11248:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2403,
												"src": "11239:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1671",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2372,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2371,
														"name": "Rounding",
														"nameLocations": [
															"11239:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1671,
														"src": "11239:8:10"
													},
													"referencedDeclaration": 1671,
													"src": "11239:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1671",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11223:34:10"
									},
									"returnParameters": {
										"id": 2377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2376,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2403,
												"src": "11281:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11281:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11280:9:10"
									},
									"scope": 2530,
									"src": "11209:248:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2489,
										"nodeType": "Block",
										"src": "11771:600:10",
										"statements": [
											{
												"assignments": [
													2412
												],
												"declarations": [
													{
														"constant": false,
														"id": 2412,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11789:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2489,
														"src": "11781:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2411,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11781:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2414,
												"initialValue": {
													"hexValue": "30",
													"id": 2413,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11798:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11781:18:10"
											},
											{
												"id": 2486,
												"nodeType": "UncheckedBlock",
												"src": "11809:533:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2419,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2417,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2415,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2406,
																	"src": "11837:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2416,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11846:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11837:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2418,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11852:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11837:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2429,
														"nodeType": "IfStatement",
														"src": "11833:98:10",
														"trueBody": {
															"id": 2428,
															"nodeType": "Block",
															"src": "11855:76:10",
															"statements": [
																{
																	"expression": {
																		"id": 2422,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2420,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2406,
																			"src": "11873:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2421,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11883:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11873:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2423,
																	"nodeType": "ExpressionStatement",
																	"src": "11873:13:10"
																},
																{
																	"expression": {
																		"id": 2426,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2424,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2412,
																			"src": "11904:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2425,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11914:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11904:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2427,
																	"nodeType": "ExpressionStatement",
																	"src": "11904:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2434,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2432,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2430,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2406,
																	"src": "11948:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2431,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11957:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11948:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2433,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11962:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11948:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2444,
														"nodeType": "IfStatement",
														"src": "11944:95:10",
														"trueBody": {
															"id": 2443,
															"nodeType": "Block",
															"src": "11965:74:10",
															"statements": [
																{
																	"expression": {
																		"id": 2437,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2435,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2406,
																			"src": "11983:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2436,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11993:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11983:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2438,
																	"nodeType": "ExpressionStatement",
																	"src": "11983:12:10"
																},
																{
																	"expression": {
																		"id": 2441,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2439,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2412,
																			"src": "12013:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2440,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12023:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12013:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2442,
																	"nodeType": "ExpressionStatement",
																	"src": "12013:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2449,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2447,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2445,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2406,
																	"src": "12056:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2446,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12065:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12056:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2448,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12070:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12056:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2459,
														"nodeType": "IfStatement",
														"src": "12052:95:10",
														"trueBody": {
															"id": 2458,
															"nodeType": "Block",
															"src": "12073:74:10",
															"statements": [
																{
																	"expression": {
																		"id": 2452,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2450,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2406,
																			"src": "12091:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2451,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12101:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12091:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2453,
																	"nodeType": "ExpressionStatement",
																	"src": "12091:12:10"
																},
																{
																	"expression": {
																		"id": 2456,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2454,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2412,
																			"src": "12121:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2455,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12131:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12121:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2457,
																	"nodeType": "ExpressionStatement",
																	"src": "12121:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2464,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2462,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2460,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2406,
																	"src": "12164:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12173:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12164:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2463,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12178:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12164:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2474,
														"nodeType": "IfStatement",
														"src": "12160:95:10",
														"trueBody": {
															"id": 2473,
															"nodeType": "Block",
															"src": "12181:74:10",
															"statements": [
																{
																	"expression": {
																		"id": 2467,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2465,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2406,
																			"src": "12199:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2466,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12209:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12199:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2468,
																	"nodeType": "ExpressionStatement",
																	"src": "12199:12:10"
																},
																{
																	"expression": {
																		"id": 2471,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2469,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2412,
																			"src": "12229:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2470,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12239:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12229:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2472,
																	"nodeType": "ExpressionStatement",
																	"src": "12229:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2475,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2406,
																	"src": "12272:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2476,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12281:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12272:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2478,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12285:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12272:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2485,
														"nodeType": "IfStatement",
														"src": "12268:64:10",
														"trueBody": {
															"id": 2484,
															"nodeType": "Block",
															"src": "12288:44:10",
															"statements": [
																{
																	"expression": {
																		"id": 2482,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2480,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2412,
																			"src": "12306:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2481,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12316:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12306:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2483,
																	"nodeType": "ExpressionStatement",
																	"src": "12306:11:10"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2487,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2412,
													"src": "12358:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2410,
												"id": 2488,
												"nodeType": "Return",
												"src": "12351:13:10"
											}
										]
									},
									"documentation": {
										"id": 2404,
										"nodeType": "StructuredDocumentation",
										"src": "11463:240:10",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 2490,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "11717:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2406,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11732:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "11724:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11724:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11723:15:10"
									},
									"returnParameters": {
										"id": 2410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2409,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "11762:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2408,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11762:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11761:9:10"
									},
									"scope": 2530,
									"src": "11708:663:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2528,
										"nodeType": "Block",
										"src": "12608:174:10",
										"statements": [
											{
												"id": 2527,
												"nodeType": "UncheckedBlock",
												"src": "12618:158:10",
												"statements": [
													{
														"assignments": [
															2502
														],
														"declarations": [
															{
																"constant": false,
																"id": 2502,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12650:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2527,
																"src": "12642:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2501,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12642:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2506,
														"initialValue": {
															"arguments": [
																{
																	"id": 2504,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2493,
																	"src": "12666:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2503,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2490,
																	2529
																],
																"referencedDeclaration": 2490,
																"src": "12659:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2505,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12659:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12642:30:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2525,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2507,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2502,
																"src": "12693:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2520,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1671",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2511,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2508,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2496,
																					"src": "12703:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1671",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2509,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1671,
																						"src": "12715:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1671_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2510,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "12724:2:10",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1669,
																					"src": "12715:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1671",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "12703:23:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2519,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2517,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2512,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12730:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 2515,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 2513,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2502,
																									"src": "12736:6:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 2514,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12746:1:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "12736:11:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 2516,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12735:13:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12730:18:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2518,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2493,
																					"src": "12751:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12730:26:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12703:53:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2522,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12763:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2523,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12703:61:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2521,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12759:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2524,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12702:63:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12693:72:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2500,
														"id": 2526,
														"nodeType": "Return",
														"src": "12686:79:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2491,
										"nodeType": "StructuredDocumentation",
										"src": "12377:144:10",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2529,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12535:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2493,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12550:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2529,
												"src": "12542:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12542:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2496,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12566:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2529,
												"src": "12557:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1671",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2495,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2494,
														"name": "Rounding",
														"nameLocations": [
															"12557:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1671,
														"src": "12557:8:10"
													},
													"referencedDeclaration": 1671,
													"src": "12557:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1671",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12541:34:10"
									},
									"returnParameters": {
										"id": 2500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2499,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2529,
												"src": "12599:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12599:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12598:9:10"
									},
									"scope": 2530,
									"src": "12526:256:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2531,
							"src": "202:12582:10",
							"usedErrors": []
						}
					],
					"src": "103:12682:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							2635
						]
					},
					"id": 2636,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2532,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2533,
								"nodeType": "StructuredDocumentation",
								"src": "134:80:11",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 2635,
							"linearizedBaseContracts": [
								2635
							],
							"name": "SignedMath",
							"nameLocation": "223:10:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2550,
										"nodeType": "Block",
										"src": "375:37:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 2545,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2543,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2536,
															"src": "392:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2544,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2538,
															"src": "396:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "392:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2547,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2538,
														"src": "404:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 2548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "392:13:11",
													"trueExpression": {
														"id": 2546,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2536,
														"src": "400:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 2542,
												"id": 2549,
												"nodeType": "Return",
												"src": "385:20:11"
											}
										]
									},
									"documentation": {
										"id": 2534,
										"nodeType": "StructuredDocumentation",
										"src": "240:66:11",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 2551,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "320:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2536,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "331:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2551,
												"src": "324:8:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2535,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "324:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2538,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "341:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2551,
												"src": "334:8:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2537,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "334:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "323:20:11"
									},
									"returnParameters": {
										"id": 2542,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2541,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2551,
												"src": "367:6:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2540,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "367:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "366:8:11"
									},
									"scope": 2635,
									"src": "311:101:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2568,
										"nodeType": "Block",
										"src": "554:37:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 2563,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2561,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2554,
															"src": "571:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2562,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2556,
															"src": "575:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "571:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2565,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2556,
														"src": "583:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 2566,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "571:13:11",
													"trueExpression": {
														"id": 2564,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2554,
														"src": "579:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 2560,
												"id": 2567,
												"nodeType": "Return",
												"src": "564:20:11"
											}
										]
									},
									"documentation": {
										"id": 2552,
										"nodeType": "StructuredDocumentation",
										"src": "418:67:11",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 2569,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "499:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2554,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "510:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2569,
												"src": "503:8:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2553,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "503:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2556,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "520:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2569,
												"src": "513:8:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2555,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "513:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "502:20:11"
									},
									"returnParameters": {
										"id": 2560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2559,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2569,
												"src": "546:6:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2558,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "546:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "545:8:11"
									},
									"scope": 2635,
									"src": "490:101:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2612,
										"nodeType": "Block",
										"src": "796:162:11",
										"statements": [
											{
												"assignments": [
													2580
												],
												"declarations": [
													{
														"constant": false,
														"id": 2580,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "865:1:11",
														"nodeType": "VariableDeclaration",
														"scope": 2612,
														"src": "858:8:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 2579,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "858:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2593,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 2592,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2583,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2581,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2572,
																	"src": "870:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2582,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2574,
																	"src": "874:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "870:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 2584,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "869:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2590,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 2587,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2585,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2572,
																				"src": "881:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 2586,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2574,
																				"src": "885:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "881:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 2588,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "880:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2589,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "891:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "880:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 2591,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "879:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "869:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "858:35:11"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 2610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2594,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2580,
														"src": "910:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2608,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2602,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2599,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2580,
																						"src": "930:1:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 2598,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "922:7:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 2597,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "922:7:11",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 2600,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "922:10:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 2601,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "936:3:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "922:17:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "915:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 2595,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "915:6:11",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2603,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "915:25:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 2606,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2604,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2572,
																				"src": "944:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 2605,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2574,
																				"src": "948:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "944:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 2607,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "943:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "915:35:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 2609,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "914:37:11",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "910:41:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 2578,
												"id": 2611,
												"nodeType": "Return",
												"src": "903:48:11"
											}
										]
									},
									"documentation": {
										"id": 2570,
										"nodeType": "StructuredDocumentation",
										"src": "597:126:11",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 2613,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "737:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2572,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "752:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2613,
												"src": "745:8:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2571,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "745:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2574,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "762:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2613,
												"src": "755:8:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2573,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "755:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "744:20:11"
									},
									"returnParameters": {
										"id": 2578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2577,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2613,
												"src": "788:6:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2576,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "788:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "787:8:11"
									},
									"scope": 2635,
									"src": "728:230:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2633,
										"nodeType": "Block",
										"src": "1102:158:11",
										"statements": [
											{
												"id": 2632,
												"nodeType": "UncheckedBlock",
												"src": "1112:142:11",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 2625,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2623,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2616,
																			"src": "1227:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2624,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1232:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1227:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 2628,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1240:2:11",
																		"subExpression": {
																			"id": 2627,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2616,
																			"src": "1241:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 2629,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1227:15:11",
																	"trueExpression": {
																		"id": 2626,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2616,
																		"src": "1236:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 2622,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1219:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 2621,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1219:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 2630,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1219:24:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2620,
														"id": 2631,
														"nodeType": "Return",
														"src": "1212:31:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2614,
										"nodeType": "StructuredDocumentation",
										"src": "964:78:11",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 2634,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1056:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2616,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1067:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2634,
												"src": "1060:8:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2615,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1060:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1059:10:11"
									},
									"returnParameters": {
										"id": 2620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2619,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2634,
												"src": "1093:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2618,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1093:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1092:9:11"
									},
									"scope": 2635,
									"src": "1047:213:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2636,
							"src": "215:1047:11",
							"usedErrors": []
						}
					],
					"src": "109:1154:11"
				},
				"id": 11
			},
			"src/BaseAccount.sol": {
				"ast": {
					"absolutePath": "src/BaseAccount.sol",
					"exportedSymbols": {
						"BaseAccount": [
							2814
						],
						"IAccount": [
							3199
						],
						"IAggregator": [
							3233
						],
						"IEntryPoint": [
							3424
						],
						"IStakeManager": [
							3528
						],
						"UserOperation": [
							3553
						],
						"UserOperationLib": [
							3657
						]
					},
					"id": 2815,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2637,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "36:24:12"
						},
						{
							"absolutePath": "src/interfaces/IAccount.sol",
							"file": "./interfaces/IAccount.sol",
							"id": 2638,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2815,
							"sourceUnit": 3200,
							"src": "184:35:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/interfaces/IEntryPoint.sol",
							"file": "./interfaces/IEntryPoint.sol",
							"id": 2639,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2815,
							"sourceUnit": 3425,
							"src": "220:38:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2641,
										"name": "IAccount",
										"nameLocations": [
											"526:8:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3199,
										"src": "526:8:12"
									},
									"id": 2642,
									"nodeType": "InheritanceSpecifier",
									"src": "526:8:12"
								}
							],
							"canonicalName": "BaseAccount",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2640,
								"nodeType": "StructuredDocumentation",
								"src": "260:232:12",
								"text": " Basic account implementation.\n this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\n specific account implementation should inherit it and provide the account-specific logic"
							},
							"fullyImplemented": false,
							"id": 2814,
							"linearizedBaseContracts": [
								2814,
								3199
							],
							"name": "BaseAccount",
							"nameLocation": "511:11:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2646,
									"libraryName": {
										"id": 2643,
										"name": "UserOperationLib",
										"nameLocations": [
											"547:16:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3657,
										"src": "547:16:12"
									},
									"nodeType": "UsingForDirective",
									"src": "541:41:12",
									"typeName": {
										"id": 2645,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2644,
											"name": "UserOperation",
											"nameLocations": [
												"568:13:12"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 3553,
											"src": "568:13:12"
										},
										"referencedDeclaration": 3553,
										"src": "568:13:12",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
											"typeString": "struct UserOperation"
										}
									}
								},
								{
									"constant": true,
									"id": 2649,
									"mutability": "constant",
									"name": "SIG_VALIDATION_FAILED",
									"nameLocation": "732:21:12",
									"nodeType": "VariableDeclaration",
									"scope": 2814,
									"src": "706:51:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2647,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 2648,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "756:1:12",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2686,
										"nodeType": "Block",
										"src": "1196:109:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2684,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2674,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"condition": {
																		"id": 2663,
																		"name": "sigFailed",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2652,
																		"src": "1221:9:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"hexValue": "30",
																		"id": 2665,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1237:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"id": 2666,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1221:17:12",
																	"trueExpression": {
																		"hexValue": "31",
																		"id": 2664,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1233:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																],
																"id": 2662,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1213:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 2661,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1213:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2667,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1213:26:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "|",
														"rightExpression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2672,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2670,
																		"name": "validUntil",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2654,
																		"src": "1250:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<<",
																	"rightExpression": {
																		"hexValue": "38",
																		"id": 2671,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1264:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_8_by_1",
																			"typeString": "int_const 8"
																		},
																		"value": "8"
																	},
																	"src": "1250:15:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2669,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1242:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 2668,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1242:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2673,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1242:24:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1213:53:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "|",
													"rightExpression": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2682,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2677,
																	"name": "validAfter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2656,
																	"src": "1277:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<<",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_rational_72_by_1",
																				"typeString": "int_const 72"
																			},
																			"id": 2680,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3634",
																				"id": 2678,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1292:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 2679,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1295:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "1292:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_72_by_1",
																				"typeString": "int_const 72"
																			}
																		}
																	],
																	"id": 2681,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1291:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_72_by_1",
																		"typeString": "int_const 72"
																	}
																},
																"src": "1277:20:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2676,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1269:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2675,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1269:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 2683,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1269:29:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1213:85:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2660,
												"id": 2685,
												"nodeType": "Return",
												"src": "1206:92:12"
											}
										]
									},
									"documentation": {
										"id": 2650,
										"nodeType": "StructuredDocumentation",
										"src": "764:313:12",
										"text": " helper to pack the return value for validateUserOp\n @param sigFailed true if the signature check failed, false, if it succeeded.\n @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n @param validAfter first timestamp this UserOperation is valid"
									},
									"id": 2687,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "packSigTimeRange",
									"nameLocation": "1091:16:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2652,
												"mutability": "mutable",
												"name": "sigFailed",
												"nameLocation": "1113:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "1108:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2651,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1108:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2654,
												"mutability": "mutable",
												"name": "validUntil",
												"nameLocation": "1132:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "1124:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2653,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1124:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2656,
												"mutability": "mutable",
												"name": "validAfter",
												"nameLocation": "1152:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "1144:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2655,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1144:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1107:56:12"
									},
									"returnParameters": {
										"id": 2660,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2659,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "1187:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2658,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:9:12"
									},
									"scope": 2814,
									"src": "1082:223:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 2688,
										"nodeType": "StructuredDocumentation",
										"src": "1311:191:12",
										"text": " return the account nonce.\n subclass should return a nonce value that is used both by _validateAndUpdateNonce, and by the external provider (to read the current nonce)"
									},
									"functionSelector": "affed0e0",
									"id": 2693,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonce",
									"nameLocation": "1516:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2689,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1521:2:12"
									},
									"returnParameters": {
										"id": 2692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2691,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2693,
												"src": "1553:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2690,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1553:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1552:9:12"
									},
									"scope": 2814,
									"src": "1507:55:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2694,
										"nodeType": "StructuredDocumentation",
										"src": "1568:137:12",
										"text": " return the entryPoint used by this account.\n subclass should return the current entryPoint used by this account."
									},
									"functionSelector": "b0d691fe",
									"id": 2700,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "entryPoint",
									"nameLocation": "1719:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2695,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1729:2:12"
									},
									"returnParameters": {
										"id": 2699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2698,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2700,
												"src": "1761:11:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IEntryPoint_$3424",
													"typeString": "contract IEntryPoint"
												},
												"typeName": {
													"id": 2697,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2696,
														"name": "IEntryPoint",
														"nameLocations": [
															"1761:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3424,
														"src": "1761:11:12"
													},
													"referencedDeclaration": 3424,
													"src": "1761:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IEntryPoint_$3424",
														"typeString": "contract IEntryPoint"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1760:13:12"
									},
									"scope": 2814,
									"src": "1710:64:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										3198
									],
									"body": {
										"id": 2742,
										"nodeType": "Block",
										"src": "2149:256:12",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2716,
														"name": "_requireFromEntryPoint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2760,
														"src": "2159:22:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 2717,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2159:24:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2718,
												"nodeType": "ExpressionStatement",
												"src": "2159:24:12"
											},
											{
												"expression": {
													"id": 2725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2719,
														"name": "sigTimeRange",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2714,
														"src": "2193:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2721,
																"name": "userOp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2704,
																"src": "2227:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
																	"typeString": "struct UserOperation calldata"
																}
															},
															{
																"id": 2722,
																"name": "userOpHash",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2706,
																"src": "2235:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 2723,
																"name": "aggregator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2708,
																"src": "2247:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
																	"typeString": "struct UserOperation calldata"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 2720,
															"name": "_validateSignature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2773,
															"src": "2208:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_UserOperation_$3553_calldata_ptr_$_t_bytes32_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (struct UserOperation calldata,bytes32,address) returns (uint256)"
															}
														},
														"id": 2724,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2208:50:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2193:65:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2726,
												"nodeType": "ExpressionStatement",
												"src": "2193:65:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2731,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 2727,
																"name": "userOp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2704,
																"src": "2272:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
																	"typeString": "struct UserOperation calldata"
																}
															},
															"id": 2728,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2279:8:12",
															"memberName": "initCode",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3536,
															"src": "2272:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														},
														"id": 2729,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2288:6:12",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2272:22:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2730,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2298:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2272:27:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2737,
												"nodeType": "IfStatement",
												"src": "2268:89:12",
												"trueBody": {
													"id": 2736,
													"nodeType": "Block",
													"src": "2301:56:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2733,
																		"name": "userOp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2704,
																		"src": "2339:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
																			"typeString": "struct UserOperation calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
																			"typeString": "struct UserOperation calldata"
																		}
																	],
																	"id": 2732,
																	"name": "_validateAndUpdateNonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2780,
																	"src": "2315:23:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_UserOperation_$3553_calldata_ptr_$returns$__$",
																		"typeString": "function (struct UserOperation calldata)"
																	}
																},
																"id": 2734,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2315:31:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2735,
															"nodeType": "ExpressionStatement",
															"src": "2315:31:12"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2739,
															"name": "missingAccountFunds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2710,
															"src": "2378:19:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2738,
														"name": "_payPrefund",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2813,
														"src": "2366:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2740,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2366:32:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2741,
												"nodeType": "ExpressionStatement",
												"src": "2366:32:12"
											}
										]
									},
									"documentation": {
										"id": 2701,
										"nodeType": "StructuredDocumentation",
										"src": "1780:179:12",
										"text": " Validate user's signature and nonce.\n subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."
									},
									"functionSelector": "0825d1fc",
									"id": 2743,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "validateUserOp",
									"nameLocation": "1973:14:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2712,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2101:8:12"
									},
									"parameters": {
										"id": 2711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2704,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "2011:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "1988:29:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 2703,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2702,
														"name": "UserOperation",
														"nameLocations": [
															"1988:13:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "1988:13:12"
													},
													"referencedDeclaration": 3553,
													"src": "1988:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2706,
												"mutability": "mutable",
												"name": "userOpHash",
												"nameLocation": "2027:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "2019:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2705,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2019:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2708,
												"mutability": "mutable",
												"name": "aggregator",
												"nameLocation": "2047:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "2039:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2707,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2039:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2710,
												"mutability": "mutable",
												"name": "missingAccountFunds",
												"nameLocation": "2067:19:12",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "2059:27:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2709,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2059:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:100:12"
									},
									"returnParameters": {
										"id": 2715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2714,
												"mutability": "mutable",
												"name": "sigTimeRange",
												"nameLocation": "2135:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "2127:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2713,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2127:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2126:22:12"
									},
									"scope": 2814,
									"src": "1964:441:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2759,
										"nodeType": "Block",
										"src": "2542:93:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2755,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2748,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2560:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2749,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2564:6:12",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2560:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2752,
																			"name": "entryPoint",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2700,
																			"src": "2582:10:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$3424_$",
																				"typeString": "function () view returns (contract IEntryPoint)"
																			}
																		},
																		"id": 2753,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2582:12:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IEntryPoint_$3424",
																			"typeString": "contract IEntryPoint"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IEntryPoint_$3424",
																			"typeString": "contract IEntryPoint"
																		}
																	],
																	"id": 2751,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2574:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2750,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2574:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2754,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2574:21:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2560:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6163636f756e743a206e6f742066726f6d20456e747279506f696e74",
															"id": 2756,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2597:30:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50",
																"typeString": "literal_string \"account: not from EntryPoint\""
															},
															"value": "account: not from EntryPoint"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50",
																"typeString": "literal_string \"account: not from EntryPoint\""
															}
														],
														"id": 2747,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2552:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2757,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2552:76:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2758,
												"nodeType": "ExpressionStatement",
												"src": "2552:76:12"
											}
										]
									},
									"documentation": {
										"id": 2744,
										"nodeType": "StructuredDocumentation",
										"src": "2411:70:12",
										"text": " ensure the request comes from the known entrypoint."
									},
									"id": 2760,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireFromEntryPoint",
									"nameLocation": "2495:22:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2745,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2517:2:12"
									},
									"returnParameters": {
										"id": 2746,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2542:0:12"
									},
									"scope": 2814,
									"src": "2486:149:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 2761,
										"nodeType": "StructuredDocumentation",
										"src": "2641:935:12",
										"text": " validate the signature is valid for this message.\n @param userOp validate the userOp.signature field\n @param userOpHash convenient field: the hash of the request, to check the signature against\n          (also hashes the entrypoint and chain-id)\n @param aggregator the current aggregator. can be ignored by accounts that don't use aggregators\n @return sigTimeRange signature and time-range of this operation\n      <byte> sigFailure - (1) to mark signature failure, 0 for valid signature.\n      <8-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n      <8-byte> validAfter - first timestamp this operation is valid\n      The an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n      Note that the validation code cannot use block.timestamp (or block.number) directly."
									},
									"id": 2773,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_validateSignature",
									"nameLocation": "3590:18:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2764,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "3632:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2773,
												"src": "3609:29:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 2763,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2762,
														"name": "UserOperation",
														"nameLocations": [
															"3609:13:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "3609:13:12"
													},
													"referencedDeclaration": 3553,
													"src": "3609:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2766,
												"mutability": "mutable",
												"name": "userOpHash",
												"nameLocation": "3648:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2773,
												"src": "3640:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2765,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2768,
												"mutability": "mutable",
												"name": "aggregator",
												"nameLocation": "3668:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2773,
												"src": "3660:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2767,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3660:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3608:71:12"
									},
									"returnParameters": {
										"id": 2772,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2771,
												"mutability": "mutable",
												"name": "sigTimeRange",
												"nameLocation": "3718:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 2773,
												"src": "3710:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3710:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3709:22:12"
									},
									"scope": 2814,
									"src": "3581:151:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 2774,
										"nodeType": "StructuredDocumentation",
										"src": "3738:309:12",
										"text": " validate the current nonce matches the UserOperation nonce.\n then it should update the account's state to prevent replay of this UserOperation.\n called only if initCode is empty (since \"nonce\" field is used as \"salt\" on account creation)\n @param userOp the op to validate."
									},
									"id": 2780,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_validateAndUpdateNonce",
									"nameLocation": "4061:23:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2777,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "4108:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2780,
												"src": "4085:29:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 2776,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2775,
														"name": "UserOperation",
														"nameLocations": [
															"4085:13:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "4085:13:12"
													},
													"referencedDeclaration": 3553,
													"src": "4085:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4084:31:12"
									},
									"returnParameters": {
										"id": 2779,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4132:0:12"
									},
									"scope": 2814,
									"src": "4052:81:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2812,
										"nodeType": "Block",
										"src": "4708:270:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2786,
														"name": "missingAccountFunds",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2783,
														"src": "4722:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2787,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4745:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4722:24:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2811,
												"nodeType": "IfStatement",
												"src": "4718:254:12",
												"trueBody": {
													"id": 2810,
													"nodeType": "Block",
													"src": "4748:224:12",
													"statements": [
														{
															"assignments": [
																2790,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2790,
																	"mutability": "mutable",
																	"name": "success",
																	"nameLocation": "4768:7:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 2810,
																	"src": "4763:12:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 2789,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "4763:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																null
															],
															"id": 2806,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "",
																		"id": 2804,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4859:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 2793,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "4788:3:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 2794,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "4792:6:12",
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "4788:10:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 2792,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4780:8:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_payable_$",
																					"typeString": "type(address payable)"
																				},
																				"typeName": {
																					"id": 2791,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "4780:8:12",
																					"stateMutability": "payable",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 2795,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4780:19:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"id": 2796,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4800:4:12",
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"src": "4780:24:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 2803,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value",
																		"gas"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"id": 2797,
																			"name": "missingAccountFunds",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2783,
																			"src": "4813:19:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"id": 2800,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4845:7:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 2799,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "4845:7:12",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						}
																					],
																					"id": 2798,
																					"name": "type",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967269,
																					"src": "4840:4:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 2801,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4840:13:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_meta_type_t_uint256",
																					"typeString": "type(uint256)"
																				}
																			},
																			"id": 2802,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "4854:3:12",
																			"memberName": "max",
																			"nodeType": "MemberAccess",
																			"src": "4840:17:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "4780:78:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$gasvalue",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 2805,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4780:82:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4762:100:12"
														},
														{
															"expression": {
																"components": [
																	{
																		"id": 2807,
																		"name": "success",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2790,
																		"src": "4877:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2808,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4876:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2809,
															"nodeType": "ExpressionStatement",
															"src": "4876:9:12"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2781,
										"nodeType": "StructuredDocumentation",
										"src": "4139:497:12",
										"text": " sends to the entrypoint (msg.sender) the missing funds for this transaction.\n subclass MAY override this method for better funds management\n (e.g. send to the entryPoint more than the minimum required, so that in future transactions\n it will not be required to send again)\n @param missingAccountFunds the minimum value this method should send the entrypoint.\n  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster."
									},
									"id": 2813,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_payPrefund",
									"nameLocation": "4650:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2783,
												"mutability": "mutable",
												"name": "missingAccountFunds",
												"nameLocation": "4670:19:12",
												"nodeType": "VariableDeclaration",
												"scope": 2813,
												"src": "4662:27:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2782,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4662:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4661:29:12"
									},
									"returnParameters": {
										"id": 2785,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4708:0:12"
									},
									"scope": 2814,
									"src": "4641:337:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2815,
							"src": "493:4487:12",
							"usedErrors": []
						}
					],
					"src": "36:4944:12"
				},
				"id": 12
			},
			"src/SimpleAccount.sol": {
				"ast": {
					"absolutePath": "src/SimpleAccount.sol",
					"exportedSymbols": {
						"Address": [
							959
						],
						"BaseAccount": [
							2814
						],
						"ECDSA": [
							1664
						],
						"ERC1967Upgrade": [
							334
						],
						"IAccount": [
							3199
						],
						"IAggregator": [
							3233
						],
						"IBeacon": [
							344
						],
						"IERC1822Proxiable": [
							30
						],
						"IERC1967": [
							20
						],
						"IEntryPoint": [
							3424
						],
						"IStakeManager": [
							3528
						],
						"Initializable": [
							513
						],
						"Math": [
							2530
						],
						"SignedMath": [
							2635
						],
						"SimpleAccount": [
							3180
						],
						"StorageSlot": [
							1069
						],
						"Strings": [
							1298
						],
						"UUPSUpgradeable": [
							629
						],
						"UserOperation": [
							3553
						],
						"UserOperationLib": [
							3657
						]
					},
					"id": 3181,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2816,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "36:24:13"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"id": 2817,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3181,
							"sourceUnit": 1665,
							"src": "184:62:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
							"file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
							"id": 2818,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3181,
							"sourceUnit": 514,
							"src": "247:63:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
							"file": "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
							"id": 2819,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3181,
							"sourceUnit": 630,
							"src": "311:65:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/BaseAccount.sol",
							"file": "./BaseAccount.sol",
							"id": 2820,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3181,
							"sourceUnit": 2815,
							"src": "378:27:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2822,
										"name": "BaseAccount",
										"nameLocations": [
											"611:11:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2814,
										"src": "611:11:13"
									},
									"id": 2823,
									"nodeType": "InheritanceSpecifier",
									"src": "611:11:13"
								},
								{
									"baseName": {
										"id": 2824,
										"name": "UUPSUpgradeable",
										"nameLocations": [
											"624:15:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 629,
										"src": "624:15:13"
									},
									"id": 2825,
									"nodeType": "InheritanceSpecifier",
									"src": "624:15:13"
								},
								{
									"baseName": {
										"id": 2826,
										"name": "Initializable",
										"nameLocations": [
											"641:13:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 513,
										"src": "641:13:13"
									},
									"id": 2827,
									"nodeType": "InheritanceSpecifier",
									"src": "641:13:13"
								}
							],
							"canonicalName": "SimpleAccount",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2821,
								"nodeType": "StructuredDocumentation",
								"src": "407:177:13",
								"text": " minimal account.\n  this is sample minimal account.\n  has execute, eth handling methods\n  has a single signer that can send requests through the entryPoint."
							},
							"fullyImplemented": true,
							"id": 3180,
							"linearizedBaseContracts": [
								3180,
								513,
								629,
								334,
								20,
								30,
								2814,
								3199
							],
							"name": "SimpleAccount",
							"nameLocation": "594:13:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2830,
									"libraryName": {
										"id": 2828,
										"name": "ECDSA",
										"nameLocations": [
											"667:5:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1664,
										"src": "667:5:13"
									},
									"nodeType": "UsingForDirective",
									"src": "661:24:13",
									"typeName": {
										"id": 2829,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "677:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									}
								},
								{
									"constant": false,
									"id": 2832,
									"mutability": "mutable",
									"name": "_nonce",
									"nameLocation": "779:6:13",
									"nodeType": "VariableDeclaration",
									"scope": 3180,
									"src": "764:21:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint96",
										"typeString": "uint96"
									},
									"typeName": {
										"id": 2831,
										"name": "uint96",
										"nodeType": "ElementaryTypeName",
										"src": "764:6:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint96",
											"typeString": "uint96"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 2834,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "806:5:13",
									"nodeType": "VariableDeclaration",
									"scope": 3180,
									"src": "791:20:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2833,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "791:7:13",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2693
									],
									"body": {
										"id": 2842,
										"nodeType": "Block",
										"src": "882:30:13",
										"statements": [
											{
												"expression": {
													"id": 2840,
													"name": "_nonce",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2832,
													"src": "899:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"functionReturnParameters": 2839,
												"id": 2841,
												"nodeType": "Return",
												"src": "892:13:13"
											}
										]
									},
									"functionSelector": "affed0e0",
									"id": 2843,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonce",
									"nameLocation": "827:5:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2836,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "855:8:13"
									},
									"parameters": {
										"id": 2835,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "832:2:13"
									},
									"returnParameters": {
										"id": 2839,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2838,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2843,
												"src": "873:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2837,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "873:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "872:9:13"
									},
									"scope": 3180,
									"src": "818:94:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2700
									],
									"body": {
										"id": 2852,
										"nodeType": "Block",
										"src": "991:35:13",
										"statements": [
											{
												"expression": {
													"id": 2850,
													"name": "_entryPoint",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2856,
													"src": "1008:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IEntryPoint_$3424",
														"typeString": "contract IEntryPoint"
													}
												},
												"functionReturnParameters": 2849,
												"id": 2851,
												"nodeType": "Return",
												"src": "1001:18:13"
											}
										]
									},
									"functionSelector": "b0d691fe",
									"id": 2853,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "entryPoint",
									"nameLocation": "927:10:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2845,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "960:8:13"
									},
									"parameters": {
										"id": 2844,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "937:2:13"
									},
									"returnParameters": {
										"id": 2849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2848,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2853,
												"src": "978:11:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IEntryPoint_$3424",
													"typeString": "contract IEntryPoint"
												},
												"typeName": {
													"id": 2847,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2846,
														"name": "IEntryPoint",
														"nameLocations": [
															"978:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3424,
														"src": "978:11:13"
													},
													"referencedDeclaration": 3424,
													"src": "978:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IEntryPoint_$3424",
														"typeString": "contract IEntryPoint"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "977:13:13"
									},
									"scope": 3180,
									"src": "918:108:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 2856,
									"mutability": "mutable",
									"name": "_entryPoint",
									"nameLocation": "1052:11:13",
									"nodeType": "VariableDeclaration",
									"scope": 3180,
									"src": "1032:31:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IEntryPoint_$3424",
										"typeString": "contract IEntryPoint"
									},
									"typeName": {
										"id": 2855,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2854,
											"name": "IEntryPoint",
											"nameLocations": [
												"1032:11:13"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 3424,
											"src": "1032:11:13"
										},
										"referencedDeclaration": 3424,
										"src": "1032:11:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IEntryPoint_$3424",
											"typeString": "contract IEntryPoint"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de",
									"id": 2863,
									"name": "SimpleAccountInitialized",
									"nameLocation": "1076:24:13",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2859,
												"indexed": true,
												"mutability": "mutable",
												"name": "entryPoint",
												"nameLocation": "1121:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 2863,
												"src": "1101:30:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IEntryPoint_$3424",
													"typeString": "contract IEntryPoint"
												},
												"typeName": {
													"id": 2858,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2857,
														"name": "IEntryPoint",
														"nameLocations": [
															"1101:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3424,
														"src": "1101:11:13"
													},
													"referencedDeclaration": 3424,
													"src": "1101:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IEntryPoint_$3424",
														"typeString": "contract IEntryPoint"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2861,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1149:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 2863,
												"src": "1133:21:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2860,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1133:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1100:55:13"
									},
									"src": "1070:86:13"
								},
								{
									"body": {
										"id": 2866,
										"nodeType": "Block",
										"src": "1238:2:13",
										"statements": []
									},
									"id": 2867,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2864,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1218:2:13"
									},
									"returnParameters": {
										"id": 2865,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1238:0:13"
									},
									"scope": 3180,
									"src": "1211:29:13",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2877,
										"nodeType": "Block",
										"src": "1284:43:13",
										"statements": [
											{
												"expression": {
													"id": 2875,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2873,
														"name": "_entryPoint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2856,
														"src": "1294:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IEntryPoint_$3424",
															"typeString": "contract IEntryPoint"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2874,
														"name": "anEntryPoint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2870,
														"src": "1308:12:13",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IEntryPoint_$3424",
															"typeString": "contract IEntryPoint"
														}
													},
													"src": "1294:26:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IEntryPoint_$3424",
														"typeString": "contract IEntryPoint"
													}
												},
												"id": 2876,
												"nodeType": "ExpressionStatement",
												"src": "1294:26:13"
											}
										]
									},
									"id": 2878,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2870,
												"mutability": "mutable",
												"name": "anEntryPoint",
												"nameLocation": "1270:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2878,
												"src": "1258:24:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IEntryPoint_$3424",
													"typeString": "contract IEntryPoint"
												},
												"typeName": {
													"id": 2869,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2868,
														"name": "IEntryPoint",
														"nameLocations": [
															"1258:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3424,
														"src": "1258:11:13"
													},
													"referencedDeclaration": 3424,
													"src": "1258:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IEntryPoint_$3424",
														"typeString": "contract IEntryPoint"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1257:26:13"
									},
									"returnParameters": {
										"id": 2872,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1284:0:13"
									},
									"scope": 3180,
									"src": "1246:81:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2884,
										"nodeType": "Block",
										"src": "1354:40:13",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2880,
														"name": "_onlyOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2905,
														"src": "1364:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 2881,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1364:12:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2882,
												"nodeType": "ExpressionStatement",
												"src": "1364:12:13"
											},
											{
												"id": 2883,
												"nodeType": "PlaceholderStatement",
												"src": "1386:1:13"
											}
										]
									},
									"id": 2885,
									"name": "onlyOwner",
									"nameLocation": "1342:9:13",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 2879,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1351:2:13"
									},
									"src": "1333:61:13",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2904,
										"nodeType": "Block",
										"src": "1436:202:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2900,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 2892,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2889,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1566:3:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2890,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1570:6:13",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1566:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 2891,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2834,
																	"src": "1580:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "1566:19:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 2899,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2893,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1589:3:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2894,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1593:6:13",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1589:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 2897,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "1611:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SimpleAccount_$3180",
																				"typeString": "contract SimpleAccount"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SimpleAccount_$3180",
																				"typeString": "contract SimpleAccount"
																			}
																		],
																		"id": 2896,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1603:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2895,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1603:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2898,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1603:13:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "1589:27:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1566:50:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6f6e6c79206f776e6572",
															"id": 2901,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1618:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ae2932905fc5bb055d2e7b29311075afd0dbf688106cf649cb515d342f4c7367",
																"typeString": "literal_string \"only owner\""
															},
															"value": "only owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ae2932905fc5bb055d2e7b29311075afd0dbf688106cf649cb515d342f4c7367",
																"typeString": "literal_string \"only owner\""
															}
														],
														"id": 2888,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1558:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2902,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1558:73:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2903,
												"nodeType": "ExpressionStatement",
												"src": "1558:73:13"
											}
										]
									},
									"id": 2905,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_onlyOwner",
									"nameLocation": "1409:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2886,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1419:2:13"
									},
									"returnParameters": {
										"id": 2887,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1436:0:13"
									},
									"scope": 3180,
									"src": "1400:238:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2924,
										"nodeType": "Block",
										"src": "1813:82:13",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2915,
														"name": "_requireFromEntryPointOrOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3032,
														"src": "1823:29:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 2916,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1823:31:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2917,
												"nodeType": "ExpressionStatement",
												"src": "1823:31:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2919,
															"name": "dest",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2908,
															"src": "1870:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2920,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2910,
															"src": "1876:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2921,
															"name": "func",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2912,
															"src": "1883:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"id": 2918,
														"name": "_call",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3109,
														"src": "1864:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 2922,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1864:24:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2923,
												"nodeType": "ExpressionStatement",
												"src": "1864:24:13"
											}
										]
									},
									"documentation": {
										"id": 2906,
										"nodeType": "StructuredDocumentation",
										"src": "1644:88:13",
										"text": " execute a transaction (called directly from owner, not by entryPoint)"
									},
									"functionSelector": "b61d27f6",
									"id": 2925,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "execute",
									"nameLocation": "1746:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2908,
												"mutability": "mutable",
												"name": "dest",
												"nameLocation": "1762:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2925,
												"src": "1754:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2907,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1754:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2910,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1776:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 2925,
												"src": "1768:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1768:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2912,
												"mutability": "mutable",
												"name": "func",
												"nameLocation": "1798:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2925,
												"src": "1783:19:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2911,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1783:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1753:50:13"
									},
									"returnParameters": {
										"id": 2914,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1813:0:13"
									},
									"scope": 3180,
									"src": "1737:158:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2970,
										"nodeType": "Block",
										"src": "2037:218:13",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2935,
														"name": "_requireFromEntryPointOrOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3032,
														"src": "2047:29:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 2936,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2047:31:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2937,
												"nodeType": "ExpressionStatement",
												"src": "2047:31:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2943,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2939,
																	"name": "dest",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2929,
																	"src": "2096:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																		"typeString": "address[] calldata"
																	}
																},
																"id": 2940,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2101:6:13",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "2096:11:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 2941,
																	"name": "func",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2932,
																	"src": "2111:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																		"typeString": "bytes calldata[] calldata"
																	}
																},
																"id": 2942,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2116:6:13",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "2111:11:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2096:26:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "77726f6e67206172726179206c656e67746873",
															"id": 2944,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2124:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_046f63b53432b31c38dcec6b5f05e3d65602d684f9163a89310aaaf94e08558e",
																"typeString": "literal_string \"wrong array lengths\""
															},
															"value": "wrong array lengths"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_046f63b53432b31c38dcec6b5f05e3d65602d684f9163a89310aaaf94e08558e",
																"typeString": "literal_string \"wrong array lengths\""
															}
														],
														"id": 2938,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2088:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2945,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2088:58:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2946,
												"nodeType": "ExpressionStatement",
												"src": "2088:58:13"
											},
											{
												"body": {
													"id": 2968,
													"nodeType": "Block",
													"src": "2198:51:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 2959,
																			"name": "dest",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2929,
																			"src": "2218:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																				"typeString": "address[] calldata"
																			}
																		},
																		"id": 2961,
																		"indexExpression": {
																			"id": 2960,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2948,
																			"src": "2223:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2218:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"hexValue": "30",
																		"id": 2962,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2227:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	{
																		"baseExpression": {
																			"id": 2963,
																			"name": "func",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2932,
																			"src": "2230:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																				"typeString": "bytes calldata[] calldata"
																			}
																		},
																		"id": 2965,
																		"indexExpression": {
																			"id": 2964,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2948,
																			"src": "2235:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2230:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		{
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	],
																	"id": 2958,
																	"name": "_call",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3109,
																	"src": "2212:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (address,uint256,bytes memory)"
																	}
																},
																"id": 2966,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2212:26:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2967,
															"nodeType": "ExpressionStatement",
															"src": "2212:26:13"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2954,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2951,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2948,
														"src": "2176:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 2952,
															"name": "dest",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2929,
															"src": "2180:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																"typeString": "address[] calldata"
															}
														},
														"id": 2953,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2185:6:13",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2180:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2176:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2969,
												"initializationExpression": {
													"assignments": [
														2948
													],
													"declarations": [
														{
															"constant": false,
															"id": 2948,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2169:1:13",
															"nodeType": "VariableDeclaration",
															"scope": 2969,
															"src": "2161:9:13",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 2947,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2161:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2950,
													"initialValue": {
														"hexValue": "30",
														"id": 2949,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2173:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2161:13:13"
												},
												"loopExpression": {
													"expression": {
														"id": 2956,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "2193:3:13",
														"subExpression": {
															"id": 2955,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2948,
															"src": "2193:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2957,
													"nodeType": "ExpressionStatement",
													"src": "2193:3:13"
												},
												"nodeType": "ForStatement",
												"src": "2156:93:13"
											}
										]
									},
									"documentation": {
										"id": 2926,
										"nodeType": "StructuredDocumentation",
										"src": "1901:52:13",
										"text": " execute a sequence of transaction"
									},
									"functionSelector": "18dfb3c7",
									"id": 2971,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "executeBatch",
									"nameLocation": "1967:12:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2929,
												"mutability": "mutable",
												"name": "dest",
												"nameLocation": "1999:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "1980:23:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 2927,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1980:7:13",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2928,
													"nodeType": "ArrayTypeName",
													"src": "1980:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2932,
												"mutability": "mutable",
												"name": "func",
												"nameLocation": "2022:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "2005:21:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 2930,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "2005:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 2931,
													"nodeType": "ArrayTypeName",
													"src": "2005:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1979:48:13"
									},
									"returnParameters": {
										"id": 2934,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2037:0:13"
									},
									"scope": 3180,
									"src": "1958:297:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2987,
										"nodeType": "Block",
										"src": "2527:51:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2983,
															"name": "anOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2974,
															"src": "2549:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2984,
															"name": "anEntryPoint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2977,
															"src": "2558:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IEntryPoint_$3424",
																"typeString": "contract IEntryPoint"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_contract$_IEntryPoint_$3424",
																"typeString": "contract IEntryPoint"
															}
														],
														"id": 2982,
														"name": "_initialize",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3010,
														"src": "2537:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_contract$_IEntryPoint_$3424_$returns$__$",
															"typeString": "function (address,contract IEntryPoint)"
														}
													},
													"id": 2985,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2537:34:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2986,
												"nodeType": "ExpressionStatement",
												"src": "2537:34:13"
											}
										]
									},
									"documentation": {
										"id": 2972,
										"nodeType": "StructuredDocumentation",
										"src": "2261:171:13",
										"text": " change entry-point:\n an account must have a method for replacing the entryPoint, in case the the entryPoint is\n upgraded to a newer version."
									},
									"functionSelector": "485cc955",
									"id": 2988,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2980,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2979,
												"name": "initializer",
												"nameLocations": [
													"2515:11:13"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 415,
												"src": "2515:11:13"
											},
											"nodeType": "ModifierInvocation",
											"src": "2515:11:13"
										}
									],
									"name": "initialize",
									"nameLocation": "2446:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2974,
												"mutability": "mutable",
												"name": "anOwner",
												"nameLocation": "2465:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2988,
												"src": "2457:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2973,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2457:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2977,
												"mutability": "mutable",
												"name": "anEntryPoint",
												"nameLocation": "2486:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 2988,
												"src": "2474:24:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IEntryPoint_$3424",
													"typeString": "contract IEntryPoint"
												},
												"typeName": {
													"id": 2976,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2975,
														"name": "IEntryPoint",
														"nameLocations": [
															"2474:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3424,
														"src": "2474:11:13"
													},
													"referencedDeclaration": 3424,
													"src": "2474:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IEntryPoint_$3424",
														"typeString": "contract IEntryPoint"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2456:43:13"
									},
									"returnParameters": {
										"id": 2981,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2527:0:13"
									},
									"scope": 3180,
									"src": "2437:141:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3009,
										"nodeType": "Block",
										"src": "2665:127:13",
										"statements": [
											{
												"expression": {
													"id": 2998,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2996,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2834,
														"src": "2675:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2997,
														"name": "anOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2990,
														"src": "2683:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2675:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2999,
												"nodeType": "ExpressionStatement",
												"src": "2675:15:13"
											},
											{
												"expression": {
													"id": 3002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3000,
														"name": "_entryPoint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2856,
														"src": "2700:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IEntryPoint_$3424",
															"typeString": "contract IEntryPoint"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3001,
														"name": "anEntryPoint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2993,
														"src": "2714:12:13",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IEntryPoint_$3424",
															"typeString": "contract IEntryPoint"
														}
													},
													"src": "2700:26:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IEntryPoint_$3424",
														"typeString": "contract IEntryPoint"
													}
												},
												"id": 3003,
												"nodeType": "ExpressionStatement",
												"src": "2700:26:13"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3005,
															"name": "_entryPoint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2856,
															"src": "2766:11:13",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IEntryPoint_$3424",
																"typeString": "contract IEntryPoint"
															}
														},
														{
															"id": 3006,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2834,
															"src": "2779:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IEntryPoint_$3424",
																"typeString": "contract IEntryPoint"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3004,
														"name": "SimpleAccountInitialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2863,
														"src": "2741:24:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_contract$_IEntryPoint_$3424_$_t_address_$returns$__$",
															"typeString": "function (contract IEntryPoint,address)"
														}
													},
													"id": 3007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2741:44:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3008,
												"nodeType": "EmitStatement",
												"src": "2736:49:13"
											}
										]
									},
									"id": 3010,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_initialize",
									"nameLocation": "2593:11:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2994,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2990,
												"mutability": "mutable",
												"name": "anOwner",
												"nameLocation": "2613:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 3010,
												"src": "2605:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2989,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2605:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2993,
												"mutability": "mutable",
												"name": "anEntryPoint",
												"nameLocation": "2634:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 3010,
												"src": "2622:24:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IEntryPoint_$3424",
													"typeString": "contract IEntryPoint"
												},
												"typeName": {
													"id": 2992,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2991,
														"name": "IEntryPoint",
														"nameLocations": [
															"2622:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3424,
														"src": "2622:11:13"
													},
													"referencedDeclaration": 3424,
													"src": "2622:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IEntryPoint_$3424",
														"typeString": "contract IEntryPoint"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2604:43:13"
									},
									"returnParameters": {
										"id": 2995,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2665:0:13"
									},
									"scope": 3180,
									"src": "2584:208:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3031,
										"nodeType": "Block",
										"src": "3181:120:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 3027,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 3022,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 3015,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3199:3:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 3016,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3203:6:13",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3199:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [
																		{
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 3019,
																				"name": "entryPoint",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					2853
																				],
																				"referencedDeclaration": 2853,
																				"src": "3221:10:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$3424_$",
																					"typeString": "function () view returns (contract IEntryPoint)"
																				}
																			},
																			"id": 3020,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3221:12:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IEntryPoint_$3424",
																				"typeString": "contract IEntryPoint"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IEntryPoint_$3424",
																				"typeString": "contract IEntryPoint"
																			}
																		],
																		"id": 3018,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3213:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 3017,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3213:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3021,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3213:21:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "3199:35:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 3026,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 3023,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3238:3:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 3024,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3242:6:13",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3238:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 3025,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2834,
																	"src": "3252:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "3238:19:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3199:58:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e74",
															"id": 3028,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3259:34:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_26bf1d2fa883929ce8db7f4593c3a7f27ec5e761d3beb6ef3a9db5c68fe51d21",
																"typeString": "literal_string \"account: not Owner or EntryPoint\""
															},
															"value": "account: not Owner or EntryPoint"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_26bf1d2fa883929ce8db7f4593c3a7f27ec5e761d3beb6ef3a9db5c68fe51d21",
																"typeString": "literal_string \"account: not Owner or EntryPoint\""
															}
														],
														"id": 3014,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3191:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3191:103:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3030,
												"nodeType": "ExpressionStatement",
												"src": "3191:103:13"
											}
										]
									},
									"documentation": {
										"id": 3011,
										"nodeType": "StructuredDocumentation",
										"src": "2798:323:13",
										"text": " validate the userOp is correct.\n revert if it doesn't.\n - must only be called from the entryPoint.\n - make sure the signature is of our supported signer.\n - validate current nonce matches request nonce, and increment it.\n - pay prefund, in case current deposit is not enough"
									},
									"id": 3032,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireFromEntryPointOrOwner",
									"nameLocation": "3135:29:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3012,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:13"
									},
									"returnParameters": {
										"id": 3013,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3181:0:13"
									},
									"scope": 3180,
									"src": "3126:175:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2780
									],
									"body": {
										"id": 3049,
										"nodeType": "Block",
										"src": "3438:76:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3045,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3042,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "3456:8:13",
																"subExpression": {
																	"id": 3041,
																	"name": "_nonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2832,
																	"src": "3456:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint96",
																		"typeString": "uint96"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint96",
																	"typeString": "uint96"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 3043,
																	"name": "userOp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3036,
																	"src": "3468:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
																		"typeString": "struct UserOperation calldata"
																	}
																},
																"id": 3044,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3475:5:13",
																"memberName": "nonce",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3534,
																"src": "3468:12:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3456:24:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6163636f756e743a20696e76616c6964206e6f6e6365",
															"id": 3046,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3482:24:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_470b5eb05ad46a916385e8f3d185e571bb4498eea99276dfa63667e9faf43873",
																"typeString": "literal_string \"account: invalid nonce\""
															},
															"value": "account: invalid nonce"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_470b5eb05ad46a916385e8f3d185e571bb4498eea99276dfa63667e9faf43873",
																"typeString": "literal_string \"account: invalid nonce\""
															}
														],
														"id": 3040,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3448:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3047,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3448:59:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3048,
												"nodeType": "ExpressionStatement",
												"src": "3448:59:13"
											}
										]
									},
									"documentation": {
										"id": 3033,
										"nodeType": "StructuredDocumentation",
										"src": "3307:44:13",
										"text": "implement template method of BaseAccount"
									},
									"id": 3050,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_validateAndUpdateNonce",
									"nameLocation": "3365:23:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3038,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3429:8:13"
									},
									"parameters": {
										"id": 3037,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3036,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "3412:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 3050,
												"src": "3389:29:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 3035,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3034,
														"name": "UserOperation",
														"nameLocations": [
															"3389:13:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "3389:13:13"
													},
													"referencedDeclaration": 3553,
													"src": "3389:13:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3388:31:13"
									},
									"returnParameters": {
										"id": 3039,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3438:0:13"
									},
									"scope": 3180,
									"src": "3356:158:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2773
									],
									"body": {
										"id": 3082,
										"nodeType": "Block",
										"src": "3718:180:13",
										"statements": [
											{
												"assignments": [
													3065
												],
												"declarations": [
													{
														"constant": false,
														"id": 3065,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "3736:4:13",
														"nodeType": "VariableDeclaration",
														"scope": 3082,
														"src": "3728:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 3064,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3728:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3069,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 3066,
															"name": "userOpHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3056,
															"src": "3743:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"id": 3067,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3754:22:13",
														"memberName": "toEthSignedMessageHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1609,
														"src": "3743:33:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$attached_to$_t_bytes32_$",
															"typeString": "function (bytes32) pure returns (bytes32)"
														}
													},
													"id": 3068,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3743:35:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3728:50:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 3076,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3070,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2834,
														"src": "3792:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 3073,
																	"name": "userOp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3054,
																	"src": "3814:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
																		"typeString": "struct UserOperation calldata"
																	}
																},
																"id": 3074,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3821:9:13",
																"memberName": "signature",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3552,
																"src": "3814:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_calldata_ptr",
																	"typeString": "bytes calldata"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_calldata_ptr",
																	"typeString": "bytes calldata"
																}
															],
															"expression": {
																"id": 3071,
																"name": "hash",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3065,
																"src": "3801:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 3072,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3806:7:13",
															"memberName": "recover",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1425,
															"src": "3801:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$attached_to$_t_bytes32_$",
																"typeString": "function (bytes32,bytes memory) pure returns (address)"
															}
														},
														"id": 3075,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3801:30:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3792:39:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3079,
												"nodeType": "IfStatement",
												"src": "3788:85:13",
												"trueBody": {
													"expression": {
														"id": 3077,
														"name": "SIG_VALIDATION_FAILED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2649,
														"src": "3852:21:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"functionReturnParameters": 3063,
													"id": 3078,
													"nodeType": "Return",
													"src": "3845:28:13"
												}
											},
											{
												"expression": {
													"hexValue": "30",
													"id": 3080,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3890:1:13",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 3063,
												"id": 3081,
												"nodeType": "Return",
												"src": "3883:8:13"
											}
										]
									},
									"documentation": {
										"id": 3051,
										"nodeType": "StructuredDocumentation",
										"src": "3520:44:13",
										"text": "implement template method of BaseAccount"
									},
									"id": 3083,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_validateSignature",
									"nameLocation": "3578:18:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3060,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3670:8:13"
									},
									"parameters": {
										"id": 3059,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3054,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "3620:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 3083,
												"src": "3597:29:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 3053,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3052,
														"name": "UserOperation",
														"nameLocations": [
															"3597:13:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "3597:13:13"
													},
													"referencedDeclaration": 3553,
													"src": "3597:13:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3056,
												"mutability": "mutable",
												"name": "userOpHash",
												"nameLocation": "3636:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 3083,
												"src": "3628:18:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3055,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3058,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3083,
												"src": "3648:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3057,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3648:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3596:60:13"
									},
									"returnParameters": {
										"id": 3063,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3062,
												"mutability": "mutable",
												"name": "sigTimeRange",
												"nameLocation": "3704:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 3083,
												"src": "3696:20:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3061,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3696:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3695:22:13"
									},
									"scope": 3180,
									"src": "3569:329:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3108,
										"nodeType": "Block",
										"src": "3978:213:13",
										"statements": [
											{
												"assignments": [
													3093,
													3095
												],
												"declarations": [
													{
														"constant": false,
														"id": 3093,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3994:7:13",
														"nodeType": "VariableDeclaration",
														"scope": 3108,
														"src": "3989:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 3092,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3989:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 3095,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "4016:6:13",
														"nodeType": "VariableDeclaration",
														"scope": 3108,
														"src": "4003:19:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 3094,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4003:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3102,
												"initialValue": {
													"arguments": [
														{
															"id": 3100,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3089,
															"src": "4053:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 3096,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3085,
																"src": "4026:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 3097,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4033:4:13",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "4026:11:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 3099,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 3098,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3087,
																"src": "4046:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "4026:26:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 3101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4026:32:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3988:70:13"
											},
											{
												"condition": {
													"id": 3104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4072:8:13",
													"subExpression": {
														"id": 3103,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3093,
														"src": "4073:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3107,
												"nodeType": "IfStatement",
												"src": "4068:117:13",
												"trueBody": {
													"id": 3106,
													"nodeType": "Block",
													"src": "4082:103:13",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "4105:70:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "result",
																							"nodeType": "YulIdentifier",
																							"src": "4134:6:13"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4142:2:13",
																							"type": "",
																							"value": "32"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4130:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4130:15:13"
																				},
																				{
																					"arguments": [
																						{
																							"name": "result",
																							"nodeType": "YulIdentifier",
																							"src": "4153:6:13"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "4147:5:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4147:13:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4123:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4123:38:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4123:38:13"
																	}
																]
															},
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 3095,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "4134:6:13",
																	"valueSize": 1
																},
																{
																	"declaration": 3095,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "4153:6:13",
																	"valueSize": 1
																}
															],
															"id": 3105,
															"nodeType": "InlineAssembly",
															"src": "4096:79:13"
														}
													]
												}
											}
										]
									},
									"id": 3109,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_call",
									"nameLocation": "3913:5:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3085,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3927:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 3109,
												"src": "3919:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3084,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3919:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3087,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3943:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 3109,
												"src": "3935:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3086,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3935:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3089,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3963:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 3109,
												"src": "3950:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3088,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3950:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3918:50:13"
									},
									"returnParameters": {
										"id": 3091,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3978:0:13"
									},
									"scope": 3180,
									"src": "3904:287:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3124,
										"nodeType": "Block",
										"src": "4320:61:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3120,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4368:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SimpleAccount_$3180",
																		"typeString": "contract SimpleAccount"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SimpleAccount_$3180",
																		"typeString": "contract SimpleAccount"
																	}
																],
																"id": 3119,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4360:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3118,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4360:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 3121,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4360:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 3115,
																"name": "entryPoint",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2853
																],
																"referencedDeclaration": 2853,
																"src": "4337:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$3424_$",
																	"typeString": "function () view returns (contract IEntryPoint)"
																}
															},
															"id": 3116,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4337:12:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IEntryPoint_$3424",
																"typeString": "contract IEntryPoint"
															}
														},
														"id": 3117,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4350:9:13",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3497,
														"src": "4337:22:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 3122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4337:37:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3114,
												"id": 3123,
												"nodeType": "Return",
												"src": "4330:44:13"
											}
										]
									},
									"documentation": {
										"id": 3110,
										"nodeType": "StructuredDocumentation",
										"src": "4197:66:13",
										"text": " check current account deposit in the entryPoint"
									},
									"functionSelector": "c399ec88",
									"id": 3125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getDeposit",
									"nameLocation": "4277:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3111,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4287:2:13"
									},
									"returnParameters": {
										"id": 3114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3113,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3125,
												"src": "4311:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3112,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4311:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4310:9:13"
									},
									"scope": 3180,
									"src": "4268:113:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3147,
										"nodeType": "Block",
										"src": "4501:103:13",
										"statements": [
											{
												"assignments": [
													3130,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 3130,
														"mutability": "mutable",
														"name": "req",
														"nameLocation": "4518:3:13",
														"nodeType": "VariableDeclaration",
														"scope": 3147,
														"src": "4513:8:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 3129,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4513:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 3142,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 3140,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4572:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 3133,
																			"name": "entryPoint",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				2853
																			],
																			"referencedDeclaration": 2853,
																			"src": "4534:10:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$3424_$",
																				"typeString": "function () view returns (contract IEntryPoint)"
																			}
																		},
																		"id": 3134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4534:12:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IEntryPoint_$3424",
																			"typeString": "contract IEntryPoint"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IEntryPoint_$3424",
																			"typeString": "contract IEntryPoint"
																		}
																	],
																	"id": 3132,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4526:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 3131,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4526:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 3135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4526:21:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 3136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4548:4:13",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "4526:26:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 3139,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"expression": {
																	"id": 3137,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4561:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 3138,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4565:5:13",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "4561:9:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "4526:45:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 3141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4526:49:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4512:63:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3144,
															"name": "req",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3130,
															"src": "4593:3:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3143,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4585:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4585:12:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3146,
												"nodeType": "ExpressionStatement",
												"src": "4585:12:13"
											}
										]
									},
									"documentation": {
										"id": 3126,
										"nodeType": "StructuredDocumentation",
										"src": "4387:72:13",
										"text": " deposit more funds for this account in the entryPoint"
									},
									"functionSelector": "4a58db19",
									"id": 3148,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addDeposit",
									"nameLocation": "4473:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3127,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4483:2:13"
									},
									"returnParameters": {
										"id": 3128,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4501:0:13"
									},
									"scope": 3180,
									"src": "4464:140:13",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3165,
										"nodeType": "Block",
										"src": "4849:65:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3161,
															"name": "withdrawAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3151,
															"src": "4883:15:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 3162,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3153,
															"src": "4900:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 3158,
																"name": "entryPoint",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2853
																],
																"referencedDeclaration": 2853,
																"src": "4859:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$3424_$",
																	"typeString": "function () view returns (contract IEntryPoint)"
																}
															},
															"id": 3159,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4859:12:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IEntryPoint_$3424",
																"typeString": "contract IEntryPoint"
															}
														},
														"id": 3160,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4872:10:13",
														"memberName": "withdrawTo",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3527,
														"src": "4859:23:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256) external"
														}
													},
													"id": 3163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4859:48:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3164,
												"nodeType": "ExpressionStatement",
												"src": "4859:48:13"
											}
										]
									},
									"documentation": {
										"id": 3149,
										"nodeType": "StructuredDocumentation",
										"src": "4610:141:13",
										"text": " withdraw value from the account's deposit\n @param withdrawAddress target to send to\n @param amount to withdraw"
									},
									"functionSelector": "4d44560d",
									"id": 3166,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3156,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3155,
												"name": "onlyOwner",
												"nameLocations": [
													"4839:9:13"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2885,
												"src": "4839:9:13"
											},
											"nodeType": "ModifierInvocation",
											"src": "4839:9:13"
										}
									],
									"name": "withdrawDepositTo",
									"nameLocation": "4765:17:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3151,
												"mutability": "mutable",
												"name": "withdrawAddress",
												"nameLocation": "4799:15:13",
												"nodeType": "VariableDeclaration",
												"scope": 3166,
												"src": "4783:31:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 3150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4783:15:13",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3153,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4824:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 3166,
												"src": "4816:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3152,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4816:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4782:49:13"
									},
									"returnParameters": {
										"id": 3157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4849:0:13"
									},
									"scope": 3180,
									"src": "4756:158:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										628
									],
									"body": {
										"id": 3178,
										"nodeType": "Block",
										"src": "4997:58:13",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"id": 3172,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3168,
															"src": "5008:17:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"id": 3173,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5007:19:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 3174,
												"nodeType": "ExpressionStatement",
												"src": "5007:19:13"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3175,
														"name": "_onlyOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2905,
														"src": "5036:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 3176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5036:12:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3177,
												"nodeType": "ExpressionStatement",
												"src": "5036:12:13"
											}
										]
									},
									"id": 3179,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_authorizeUpgrade",
									"nameLocation": "4929:17:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3170,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4988:8:13"
									},
									"parameters": {
										"id": 3169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3168,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "4955:17:13",
												"nodeType": "VariableDeclaration",
												"scope": 3179,
												"src": "4947:25:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3167,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4947:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4946:27:13"
									},
									"returnParameters": {
										"id": 3171,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4997:0:13"
									},
									"scope": 3180,
									"src": "4920:135:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3181,
							"src": "585:4472:13",
							"usedErrors": []
						}
					],
					"src": "36:5022:13"
				},
				"id": 13
			},
			"src/interfaces/IAccount.sol": {
				"ast": {
					"absolutePath": "src/interfaces/IAccount.sol",
					"exportedSymbols": {
						"IAccount": [
							3199
						],
						"UserOperation": [
							3553
						],
						"UserOperationLib": [
							3657
						]
					},
					"id": 3200,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3182,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "36:24:14"
						},
						{
							"absolutePath": "src/interfaces/UserOperation.sol",
							"file": "./UserOperation.sol",
							"id": 3183,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3200,
							"sourceUnit": 3658,
							"src": "62:29:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAccount",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 3199,
							"linearizedBaseContracts": [
								3199
							],
							"name": "IAccount",
							"nameLocation": "103:8:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3184,
										"nodeType": "StructuredDocumentation",
										"src": "119:1839:14",
										"text": " Validate user's signature and nonce\n the entryPoint will make the call to the recipient only if this validation call returns successfully.\n signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\n This allows making a \"simulation call\" without a valid signature\n Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\n @dev Must validate caller is the entryPoint.\n      Must validate the signature and nonce\n @param userOp the operation that is about to be executed.\n @param userOpHash hash of the user's request data. can be used as the basis for signature.\n @param aggregator the aggregator used to validate the signature. NULL for non-aggregated signature accounts.\n @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\n      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\n      The excess is left as a deposit in the entrypoint, for future calls.\n      can be withdrawn anytime using \"entryPoint.withdrawTo()\"\n      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\n @return sigTimeRange signature and time-range of this operation\n      <byte> sigFailure - (1) to mark signature failure, 0 for valid signature.\n      <8-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n      <8-byte> validAfter - first timestamp this operation is valid\n      The an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n      Note that the validation code cannot use block.timestamp (or block.number) directly."
									},
									"functionSelector": "0825d1fc",
									"id": 3198,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "validateUserOp",
									"nameLocation": "1972:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3187,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "2010:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 3198,
												"src": "1987:29:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 3186,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3185,
														"name": "UserOperation",
														"nameLocations": [
															"1987:13:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "1987:13:14"
													},
													"referencedDeclaration": 3553,
													"src": "1987:13:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3189,
												"mutability": "mutable",
												"name": "userOpHash",
												"nameLocation": "2026:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 3198,
												"src": "2018:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3188,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2018:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3191,
												"mutability": "mutable",
												"name": "aggregator",
												"nameLocation": "2046:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 3198,
												"src": "2038:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3190,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2038:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3193,
												"mutability": "mutable",
												"name": "missingAccountFunds",
												"nameLocation": "2066:19:14",
												"nodeType": "VariableDeclaration",
												"scope": 3198,
												"src": "2058:27:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2058:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1986:100:14"
									},
									"returnParameters": {
										"id": 3197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3196,
												"mutability": "mutable",
												"name": "sigTimeRange",
												"nameLocation": "2117:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 3198,
												"src": "2109:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2109:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2108:22:14"
									},
									"scope": 3199,
									"src": "1963:168:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3200,
							"src": "93:2040:14",
							"usedErrors": []
						}
					],
					"src": "36:2097:14"
				},
				"id": 14
			},
			"src/interfaces/IAggregator.sol": {
				"ast": {
					"absolutePath": "src/interfaces/IAggregator.sol",
					"exportedSymbols": {
						"IAggregator": [
							3233
						],
						"UserOperation": [
							3553
						],
						"UserOperationLib": [
							3657
						]
					},
					"id": 3234,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3201,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "36:24:15"
						},
						{
							"absolutePath": "src/interfaces/UserOperation.sol",
							"file": "./UserOperation.sol",
							"id": 3202,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3234,
							"sourceUnit": 3658,
							"src": "62:29:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAggregator",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3203,
								"nodeType": "StructuredDocumentation",
								"src": "93:43:15",
								"text": " Aggregated Signatures validator."
							},
							"fullyImplemented": false,
							"id": 3233,
							"linearizedBaseContracts": [
								3233
							],
							"name": "IAggregator",
							"nameLocation": "147:11:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3204,
										"nodeType": "StructuredDocumentation",
										"src": "166:136:15",
										"text": " validate aggregated signature.\n revert if the aggregated signature does not match the given list of operations."
									},
									"functionSelector": "e3563a4f",
									"id": 3213,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "validateSignatures",
									"nameLocation": "316:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3208,
												"mutability": "mutable",
												"name": "userOps",
												"nameLocation": "360:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 3213,
												"src": "335:32:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_UserOperation_$3553_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct UserOperation[]"
												},
												"typeName": {
													"baseType": {
														"id": 3206,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 3205,
															"name": "UserOperation",
															"nameLocations": [
																"335:13:15"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 3553,
															"src": "335:13:15"
														},
														"referencedDeclaration": 3553,
														"src": "335:13:15",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
															"typeString": "struct UserOperation"
														}
													},
													"id": 3207,
													"nodeType": "ArrayTypeName",
													"src": "335:15:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_UserOperation_$3553_storage_$dyn_storage_ptr",
														"typeString": "struct UserOperation[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3210,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "384:9:15",
												"nodeType": "VariableDeclaration",
												"scope": 3213,
												"src": "369:24:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3209,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "369:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "334:60:15"
									},
									"returnParameters": {
										"id": 3212,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "408:0:15"
									},
									"scope": 3233,
									"src": "307:102:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3214,
										"nodeType": "StructuredDocumentation",
										"src": "415:575:15",
										"text": " validate signature of a single userOp\n This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n First it validates the signature over the userOp. then it return data to be used when creating the handleOps:\n @param userOp the userOperation received from the user.\n @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\n    (usually empty, unless account and aggregator support some kind of \"multisig\""
									},
									"functionSelector": "64c530cd",
									"id": 3222,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "validateUserOpSignature",
									"nameLocation": "1004:23:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3217,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "1051:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 3222,
												"src": "1028:29:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 3216,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3215,
														"name": "UserOperation",
														"nameLocations": [
															"1028:13:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "1028:13:15"
													},
													"referencedDeclaration": 3553,
													"src": "1028:13:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1027:31:15"
									},
									"returnParameters": {
										"id": 3221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3220,
												"mutability": "mutable",
												"name": "sigForUserOp",
												"nameLocation": "1099:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 3222,
												"src": "1086:25:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3219,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1086:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1085:27:15"
									},
									"scope": 3233,
									"src": "995:118:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3223,
										"nodeType": "StructuredDocumentation",
										"src": "1119:368:15",
										"text": " aggregate multiple signatures into a single value.\n This method is called off-chain to calculate the signature to pass with handleOps()\n bundler MAY use optimized custom code perform this aggregation\n @param userOps array of UserOperations to collect the signatures from.\n @return aggregatesSignature the aggregated signature"
									},
									"functionSelector": "275e2d79",
									"id": 3232,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "aggregateSignatures",
									"nameLocation": "1501:19:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3227,
												"mutability": "mutable",
												"name": "userOps",
												"nameLocation": "1546:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 3232,
												"src": "1521:32:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_UserOperation_$3553_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct UserOperation[]"
												},
												"typeName": {
													"baseType": {
														"id": 3225,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 3224,
															"name": "UserOperation",
															"nameLocations": [
																"1521:13:15"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 3553,
															"src": "1521:13:15"
														},
														"referencedDeclaration": 3553,
														"src": "1521:13:15",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
															"typeString": "struct UserOperation"
														}
													},
													"id": 3226,
													"nodeType": "ArrayTypeName",
													"src": "1521:15:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_UserOperation_$3553_storage_$dyn_storage_ptr",
														"typeString": "struct UserOperation[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1520:34:15"
									},
									"returnParameters": {
										"id": 3231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3230,
												"mutability": "mutable",
												"name": "aggregatesSignature",
												"nameLocation": "1591:19:15",
												"nodeType": "VariableDeclaration",
												"scope": 3232,
												"src": "1578:32:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3229,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1578:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1577:34:15"
									},
									"scope": 3233,
									"src": "1492:120:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3234,
							"src": "137:1477:15",
							"usedErrors": []
						}
					],
					"src": "36:1578:15"
				},
				"id": 15
			},
			"src/interfaces/IEntryPoint.sol": {
				"ast": {
					"absolutePath": "src/interfaces/IEntryPoint.sol",
					"exportedSymbols": {
						"IAggregator": [
							3233
						],
						"IEntryPoint": [
							3424
						],
						"IStakeManager": [
							3528
						],
						"UserOperation": [
							3553
						],
						"UserOperationLib": [
							3657
						]
					},
					"id": 3425,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3235,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "163:24:16"
						},
						{
							"absolutePath": "src/interfaces/UserOperation.sol",
							"file": "./UserOperation.sol",
							"id": 3236,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3425,
							"sourceUnit": 3658,
							"src": "311:29:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/interfaces/IStakeManager.sol",
							"file": "./IStakeManager.sol",
							"id": 3237,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3425,
							"sourceUnit": 3529,
							"src": "341:29:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/interfaces/IAggregator.sol",
							"file": "./IAggregator.sol",
							"id": 3238,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3425,
							"sourceUnit": 3234,
							"src": "371:27:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3239,
										"name": "IStakeManager",
										"nameLocations": [
											"425:13:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3528,
										"src": "425:13:16"
									},
									"id": 3240,
									"nodeType": "InheritanceSpecifier",
									"src": "425:13:16"
								}
							],
							"canonicalName": "IEntryPoint",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 3424,
							"linearizedBaseContracts": [
								3424,
								3528
							],
							"name": "IEntryPoint",
							"nameLocation": "410:11:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f",
									"id": 3256,
									"name": "UserOperationEvent",
									"nameLocation": "1143:18:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3242,
												"indexed": true,
												"mutability": "mutable",
												"name": "userOpHash",
												"nameLocation": "1178:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3256,
												"src": "1162:26:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3241,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1162:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3244,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1206:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 3256,
												"src": "1190:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1190:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3246,
												"indexed": true,
												"mutability": "mutable",
												"name": "paymaster",
												"nameLocation": "1230:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 3256,
												"src": "1214:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1214:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3248,
												"indexed": false,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1249:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3256,
												"src": "1241:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1241:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3250,
												"indexed": false,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "1261:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 3256,
												"src": "1256:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3249,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1256:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3252,
												"indexed": false,
												"mutability": "mutable",
												"name": "actualGasCost",
												"nameLocation": "1278:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 3256,
												"src": "1270:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1270:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3254,
												"indexed": false,
												"mutability": "mutable",
												"name": "actualGasUsed",
												"nameLocation": "1301:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 3256,
												"src": "1293:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1293:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:154:16"
									},
									"src": "1137:179:16"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3257,
										"nodeType": "StructuredDocumentation",
										"src": "1322:333:16",
										"text": " account \"sender\" was deployed.\n @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\n @param sender the account that is deployed\n @param factory the factory used to deploy this account (in the initCode)\n @param paymaster the paymaster used by this UserOp"
									},
									"eventSelector": "d51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d",
									"id": 3267,
									"name": "AccountDeployed",
									"nameLocation": "1666:15:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3259,
												"indexed": true,
												"mutability": "mutable",
												"name": "userOpHash",
												"nameLocation": "1698:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3267,
												"src": "1682:26:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3258,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1682:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3261,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1726:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 3267,
												"src": "1710:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1710:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3263,
												"indexed": false,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "1742:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 3267,
												"src": "1734:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1734:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3265,
												"indexed": false,
												"mutability": "mutable",
												"name": "paymaster",
												"nameLocation": "1759:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 3267,
												"src": "1751:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3264,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1751:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1681:88:16"
									},
									"src": "1660:110:16"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3268,
										"nodeType": "StructuredDocumentation",
										"src": "1776:337:16",
										"text": " An event emitted if the UserOperation \"callData\" reverted with non-zero length\n @param userOpHash the request unique identifier.\n @param sender the sender of this request\n @param nonce the nonce used in the request\n @param revertReason - the return bytes from the (reverted) call to \"callData\"."
									},
									"eventSelector": "1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a201",
									"id": 3278,
									"name": "UserOperationRevertReason",
									"nameLocation": "2124:25:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3270,
												"indexed": true,
												"mutability": "mutable",
												"name": "userOpHash",
												"nameLocation": "2166:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3278,
												"src": "2150:26:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3269,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2150:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3272,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "2194:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 3278,
												"src": "2178:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2178:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3274,
												"indexed": false,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "2210:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3278,
												"src": "2202:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2202:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3276,
												"indexed": false,
												"mutability": "mutable",
												"name": "revertReason",
												"nameLocation": "2223:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 3278,
												"src": "2217:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3275,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2217:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2149:87:16"
									},
									"src": "2118:119:16"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3279,
										"nodeType": "StructuredDocumentation",
										"src": "2243:101:16",
										"text": " signature aggregator used by the following UserOperationEvents within this bundle."
									},
									"eventSelector": "575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d",
									"id": 3283,
									"name": "SignatureAggregatorChanged",
									"nameLocation": "2355:26:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3281,
												"indexed": false,
												"mutability": "mutable",
												"name": "aggregator",
												"nameLocation": "2390:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3283,
												"src": "2382:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3280,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2382:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2381:20:16"
									},
									"src": "2349:53:16"
								},
								{
									"documentation": {
										"id": 3284,
										"nodeType": "StructuredDocumentation",
										"src": "2408:770:16",
										"text": " a custom revert error of handleOps, to identify the offending op.\n  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n  @param paymaster - if paymaster.validatePaymasterUserOp fails, this will be the paymaster's address. if validateUserOp failed,\n       this value will be zero (since it failed before accessing the paymaster)\n  @param reason - revert reason\n   Should be caught in off-chain handleOps simulation and not happen on-chain.\n   Useful for mitigating DoS attempts against batchers or for troubleshooting of account/paymaster reverts."
									},
									"errorSelector": "00fa072b",
									"id": 3292,
									"name": "FailedOp",
									"nameLocation": "3189:8:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3286,
												"mutability": "mutable",
												"name": "opIndex",
												"nameLocation": "3206:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 3292,
												"src": "3198:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3198:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3288,
												"mutability": "mutable",
												"name": "paymaster",
												"nameLocation": "3223:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 3292,
												"src": "3215:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3287,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3215:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3290,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "3241:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 3292,
												"src": "3234:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3289,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3234:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3197:51:16"
									},
									"src": "3183:66:16"
								},
								{
									"documentation": {
										"id": 3293,
										"nodeType": "StructuredDocumentation",
										"src": "3255:114:16",
										"text": " error case when a signature aggregator fails to verify the aggregated signature it had created."
									},
									"errorSelector": "86a9f750",
									"id": 3297,
									"name": "SignatureValidationFailed",
									"nameLocation": "3380:25:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3295,
												"mutability": "mutable",
												"name": "aggregator",
												"nameLocation": "3414:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3297,
												"src": "3406:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3294,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3406:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3405:20:16"
									},
									"src": "3374:52:16"
								},
								{
									"canonicalName": "IEntryPoint.UserOpsPerAggregator",
									"id": 3307,
									"members": [
										{
											"constant": false,
											"id": 3301,
											"mutability": "mutable",
											"name": "userOps",
											"nameLocation": "3524:7:16",
											"nodeType": "VariableDeclaration",
											"scope": 3307,
											"src": "3508:23:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_struct$_UserOperation_$3553_storage_$dyn_storage_ptr",
												"typeString": "struct UserOperation[]"
											},
											"typeName": {
												"baseType": {
													"id": 3299,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3298,
														"name": "UserOperation",
														"nameLocations": [
															"3508:13:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "3508:13:16"
													},
													"referencedDeclaration": 3553,
													"src": "3508:13:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"id": 3300,
												"nodeType": "ArrayTypeName",
												"src": "3508:15:16",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_UserOperation_$3553_storage_$dyn_storage_ptr",
													"typeString": "struct UserOperation[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3304,
											"mutability": "mutable",
											"name": "aggregator",
											"nameLocation": "3584:10:16",
											"nodeType": "VariableDeclaration",
											"scope": 3307,
											"src": "3572:22:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IAggregator_$3233",
												"typeString": "contract IAggregator"
											},
											"typeName": {
												"id": 3303,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 3302,
													"name": "IAggregator",
													"nameLocations": [
														"3572:11:16"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 3233,
													"src": "3572:11:16"
												},
												"referencedDeclaration": 3233,
												"src": "3572:11:16",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAggregator_$3233",
													"typeString": "contract IAggregator"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3306,
											"mutability": "mutable",
											"name": "signature",
											"nameLocation": "3642:9:16",
											"nodeType": "VariableDeclaration",
											"scope": 3307,
											"src": "3636:15:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 3305,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "3636:5:16",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "UserOpsPerAggregator",
									"nameLocation": "3477:20:16",
									"nodeType": "StructDefinition",
									"scope": 3424,
									"src": "3470:188:16",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 3308,
										"nodeType": "StructuredDocumentation",
										"src": "3664:376:16",
										"text": " Execute a batch of UserOperation.\n no signature aggregator is used.\n if any account requires an aggregator (that is, it returned an \"actualAggregator\" when\n performing simulateValidation), then handleAggregatedOps() must be used instead.\n @param ops the operations to execute\n @param beneficiary the address to receive the fees"
									},
									"functionSelector": "1fad948c",
									"id": 3317,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "handleOps",
									"nameLocation": "4054:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3315,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3312,
												"mutability": "mutable",
												"name": "ops",
												"nameLocation": "4089:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 3317,
												"src": "4064:28:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_UserOperation_$3553_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct UserOperation[]"
												},
												"typeName": {
													"baseType": {
														"id": 3310,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 3309,
															"name": "UserOperation",
															"nameLocations": [
																"4064:13:16"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 3553,
															"src": "4064:13:16"
														},
														"referencedDeclaration": 3553,
														"src": "4064:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
															"typeString": "struct UserOperation"
														}
													},
													"id": 3311,
													"nodeType": "ArrayTypeName",
													"src": "4064:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_UserOperation_$3553_storage_$dyn_storage_ptr",
														"typeString": "struct UserOperation[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3314,
												"mutability": "mutable",
												"name": "beneficiary",
												"nameLocation": "4110:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 3317,
												"src": "4094:27:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 3313,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4094:15:16",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4063:59:16"
									},
									"returnParameters": {
										"id": 3316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4131:0:16"
									},
									"scope": 3424,
									"src": "4045:87:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3318,
										"nodeType": "StructuredDocumentation",
										"src": "4138:249:16",
										"text": " Execute a batch of UserOperation with Aggregators\n @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\n @param beneficiary the address to receive the fees"
									},
									"functionSelector": "4b1d7cf5",
									"id": 3327,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "handleAggregatedOps",
									"nameLocation": "4401:19:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3322,
												"mutability": "mutable",
												"name": "opsPerAggregator",
												"nameLocation": "4462:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 3327,
												"src": "4430:48:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_UserOpsPerAggregator_$3307_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct IEntryPoint.UserOpsPerAggregator[]"
												},
												"typeName": {
													"baseType": {
														"id": 3320,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 3319,
															"name": "UserOpsPerAggregator",
															"nameLocations": [
																"4430:20:16"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 3307,
															"src": "4430:20:16"
														},
														"referencedDeclaration": 3307,
														"src": "4430:20:16",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOpsPerAggregator_$3307_storage_ptr",
															"typeString": "struct IEntryPoint.UserOpsPerAggregator"
														}
													},
													"id": 3321,
													"nodeType": "ArrayTypeName",
													"src": "4430:22:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_UserOpsPerAggregator_$3307_storage_$dyn_storage_ptr",
														"typeString": "struct IEntryPoint.UserOpsPerAggregator[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3324,
												"mutability": "mutable",
												"name": "beneficiary",
												"nameLocation": "4504:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 3327,
												"src": "4488:27:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 3323,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4488:15:16",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4420:101:16"
									},
									"returnParameters": {
										"id": 3326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4530:0:16"
									},
									"scope": 3424,
									"src": "4392:139:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3328,
										"nodeType": "StructuredDocumentation",
										"src": "4537:197:16",
										"text": " generate a request Id - unique identifier for this request.\n the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."
									},
									"functionSelector": "a6193531",
									"id": 3336,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getUserOpHash",
									"nameLocation": "4748:13:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3331,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "4785:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 3336,
												"src": "4762:29:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 3330,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3329,
														"name": "UserOperation",
														"nameLocations": [
															"4762:13:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "4762:13:16"
													},
													"referencedDeclaration": 3553,
													"src": "4762:13:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4761:31:16"
									},
									"returnParameters": {
										"id": 3335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3334,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3336,
												"src": "4816:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3333,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4816:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4815:9:16"
									},
									"scope": 3424,
									"src": "4739:86:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3337,
										"nodeType": "StructuredDocumentation",
										"src": "4831:398:16",
										"text": " Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\n @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\n @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\n @param userOp the user operation to validate."
									},
									"functionSelector": "ee219423",
									"id": 3343,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "simulateValidation",
									"nameLocation": "5243:18:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3340,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "5285:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 3343,
												"src": "5262:29:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 3339,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3338,
														"name": "UserOperation",
														"nameLocations": [
															"5262:13:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "5262:13:16"
													},
													"referencedDeclaration": 3553,
													"src": "5262:13:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5261:31:16"
									},
									"returnParameters": {
										"id": 3342,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5301:0:16"
									},
									"scope": 3424,
									"src": "5234:68:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3344,
										"nodeType": "StructuredDocumentation",
										"src": "5308:326:16",
										"text": " Successful result from simulateValidation.\n @param returnInfo gas and time-range returned values\n @param senderInfo stake information about the sender\n @param factoryInfo stake information about the factor (if any)\n @param paymasterInfo stake information about the paymaster (if any)"
									},
									"errorSelector": "f04297e9",
									"id": 3358,
									"name": "ValidationResult",
									"nameLocation": "5645:16:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3347,
												"mutability": "mutable",
												"name": "returnInfo",
												"nameLocation": "5673:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3358,
												"src": "5662:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ReturnInfo_$3389_memory_ptr",
													"typeString": "struct IEntryPoint.ReturnInfo"
												},
												"typeName": {
													"id": 3346,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3345,
														"name": "ReturnInfo",
														"nameLocations": [
															"5662:10:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3389,
														"src": "5662:10:16"
													},
													"referencedDeclaration": 3389,
													"src": "5662:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ReturnInfo_$3389_storage_ptr",
														"typeString": "struct IEntryPoint.ReturnInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3350,
												"mutability": "mutable",
												"name": "senderInfo",
												"nameLocation": "5703:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3358,
												"src": "5693:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$3481_memory_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												},
												"typeName": {
													"id": 3349,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3348,
														"name": "StakeInfo",
														"nameLocations": [
															"5693:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3481,
														"src": "5693:9:16"
													},
													"referencedDeclaration": 3481,
													"src": "5693:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakeInfo_$3481_storage_ptr",
														"typeString": "struct IStakeManager.StakeInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3353,
												"mutability": "mutable",
												"name": "factoryInfo",
												"nameLocation": "5725:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 3358,
												"src": "5715:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$3481_memory_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												},
												"typeName": {
													"id": 3352,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3351,
														"name": "StakeInfo",
														"nameLocations": [
															"5715:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3481,
														"src": "5715:9:16"
													},
													"referencedDeclaration": 3481,
													"src": "5715:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakeInfo_$3481_storage_ptr",
														"typeString": "struct IStakeManager.StakeInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3356,
												"mutability": "mutable",
												"name": "paymasterInfo",
												"nameLocation": "5748:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 3358,
												"src": "5738:23:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$3481_memory_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												},
												"typeName": {
													"id": 3355,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3354,
														"name": "StakeInfo",
														"nameLocations": [
															"5738:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3481,
														"src": "5738:9:16"
													},
													"referencedDeclaration": 3481,
													"src": "5738:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakeInfo_$3481_storage_ptr",
														"typeString": "struct IStakeManager.StakeInfo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5661:101:16"
									},
									"src": "5639:124:16"
								},
								{
									"documentation": {
										"id": 3359,
										"nodeType": "StructuredDocumentation",
										"src": "5770:560:16",
										"text": " Successful result from simulateValidation, if the account returns a signature aggregator\n @param returnInfo gas and time-range returned values\n @param senderInfo stake information about the sender\n @param factoryInfo stake information about the factor (if any)\n @param paymasterInfo stake information about the paymaster (if any)\n @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n      bundler MUST use it to verify the signature, or reject the UserOperation"
									},
									"errorSelector": "356877a3",
									"id": 3376,
									"name": "ValidationResultWithAggregation",
									"nameLocation": "6341:31:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3362,
												"mutability": "mutable",
												"name": "returnInfo",
												"nameLocation": "6384:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3376,
												"src": "6373:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ReturnInfo_$3389_memory_ptr",
													"typeString": "struct IEntryPoint.ReturnInfo"
												},
												"typeName": {
													"id": 3361,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3360,
														"name": "ReturnInfo",
														"nameLocations": [
															"6373:10:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3389,
														"src": "6373:10:16"
													},
													"referencedDeclaration": 3389,
													"src": "6373:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ReturnInfo_$3389_storage_ptr",
														"typeString": "struct IEntryPoint.ReturnInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3365,
												"mutability": "mutable",
												"name": "senderInfo",
												"nameLocation": "6414:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3376,
												"src": "6404:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$3481_memory_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												},
												"typeName": {
													"id": 3364,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3363,
														"name": "StakeInfo",
														"nameLocations": [
															"6404:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3481,
														"src": "6404:9:16"
													},
													"referencedDeclaration": 3481,
													"src": "6404:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakeInfo_$3481_storage_ptr",
														"typeString": "struct IStakeManager.StakeInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3368,
												"mutability": "mutable",
												"name": "factoryInfo",
												"nameLocation": "6436:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 3376,
												"src": "6426:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$3481_memory_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												},
												"typeName": {
													"id": 3367,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3366,
														"name": "StakeInfo",
														"nameLocations": [
															"6426:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3481,
														"src": "6426:9:16"
													},
													"referencedDeclaration": 3481,
													"src": "6426:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakeInfo_$3481_storage_ptr",
														"typeString": "struct IStakeManager.StakeInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3371,
												"mutability": "mutable",
												"name": "paymasterInfo",
												"nameLocation": "6459:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 3376,
												"src": "6449:23:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$3481_memory_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												},
												"typeName": {
													"id": 3370,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3369,
														"name": "StakeInfo",
														"nameLocations": [
															"6449:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3481,
														"src": "6449:9:16"
													},
													"referencedDeclaration": 3481,
													"src": "6449:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakeInfo_$3481_storage_ptr",
														"typeString": "struct IStakeManager.StakeInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3374,
												"mutability": "mutable",
												"name": "aggregatorInfo",
												"nameLocation": "6502:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 3376,
												"src": "6482:34:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AggregatorStakeInfo_$3395_memory_ptr",
													"typeString": "struct IEntryPoint.AggregatorStakeInfo"
												},
												"typeName": {
													"id": 3373,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3372,
														"name": "AggregatorStakeInfo",
														"nameLocations": [
															"6482:19:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3395,
														"src": "6482:19:16"
													},
													"referencedDeclaration": 3395,
													"src": "6482:19:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AggregatorStakeInfo_$3395_storage_ptr",
														"typeString": "struct IEntryPoint.AggregatorStakeInfo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6372:145:16"
									},
									"src": "6335:183:16"
								},
								{
									"canonicalName": "IEntryPoint.ReturnInfo",
									"id": 3389,
									"members": [
										{
											"constant": false,
											"id": 3378,
											"mutability": "mutable",
											"name": "preOpGas",
											"nameLocation": "7153:8:16",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "7145:16:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3377,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "7145:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3380,
											"mutability": "mutable",
											"name": "prefund",
											"nameLocation": "7179:7:16",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "7171:15:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3379,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "7171:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3382,
											"mutability": "mutable",
											"name": "sigFailed",
											"nameLocation": "7201:9:16",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "7196:14:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 3381,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "7196:4:16",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3384,
											"mutability": "mutable",
											"name": "validAfter",
											"nameLocation": "7227:10:16",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "7220:17:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 3383,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "7220:6:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3386,
											"mutability": "mutable",
											"name": "validUntil",
											"nameLocation": "7254:10:16",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "7247:17:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 3385,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "7247:6:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3388,
											"mutability": "mutable",
											"name": "paymasterContext",
											"nameLocation": "7280:16:16",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "7274:22:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 3387,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "7274:5:16",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ReturnInfo",
									"nameLocation": "7124:10:16",
									"nodeType": "StructDefinition",
									"scope": 3424,
									"src": "7117:186:16",
									"visibility": "public"
								},
								{
									"canonicalName": "IEntryPoint.AggregatorStakeInfo",
									"id": 3395,
									"members": [
										{
											"constant": false,
											"id": 3391,
											"mutability": "mutable",
											"name": "actualAggregator",
											"nameLocation": "7483:16:16",
											"nodeType": "VariableDeclaration",
											"scope": 3395,
											"src": "7475:24:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3390,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "7475:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3394,
											"mutability": "mutable",
											"name": "stakeInfo",
											"nameLocation": "7519:9:16",
											"nodeType": "VariableDeclaration",
											"scope": 3395,
											"src": "7509:19:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_StakeInfo_$3481_storage_ptr",
												"typeString": "struct IStakeManager.StakeInfo"
											},
											"typeName": {
												"id": 3393,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 3392,
													"name": "StakeInfo",
													"nameLocations": [
														"7509:9:16"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 3481,
													"src": "7509:9:16"
												},
												"referencedDeclaration": 3481,
												"src": "7509:9:16",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$3481_storage_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AggregatorStakeInfo",
									"nameLocation": "7445:19:16",
									"nodeType": "StructDefinition",
									"scope": 3424,
									"src": "7438:97:16",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 3396,
										"nodeType": "StructuredDocumentation",
										"src": "7541:337:16",
										"text": " Get counterfactual sender address.\n  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n this method always revert, and returns the address in SenderAddressResult error\n @param initCode the constructor code to be passed into the UserOperation."
									},
									"functionSelector": "9b249f69",
									"id": 3401,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSenderAddress",
									"nameLocation": "7892:16:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3398,
												"mutability": "mutable",
												"name": "initCode",
												"nameLocation": "7922:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 3401,
												"src": "7909:21:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3397,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7909:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7908:23:16"
									},
									"returnParameters": {
										"id": 3400,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7940:0:16"
									},
									"scope": 3424,
									"src": "7883:58:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3402,
										"nodeType": "StructuredDocumentation",
										"src": "7947:51:16",
										"text": " return value of getSenderAddress"
									},
									"errorSelector": "6ca7b806",
									"id": 3406,
									"name": "SenderAddressResult",
									"nameLocation": "8009:19:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3404,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "8037:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 3406,
												"src": "8029:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8029:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8028:16:16"
									},
									"src": "8003:42:16"
								},
								{
									"documentation": {
										"id": 3407,
										"nodeType": "StructuredDocumentation",
										"src": "8052:414:16",
										"text": " simulate full execution of a UserOperation (including both validation and target execution)\n this method will always revert with \"ExecutionResult\".\n it performs full validation of the UserOperation, but ignores signature error.\n Note that in order to collect the the success/failure of the target call, it must be executed\n with trace enabled to track the emitted events."
									},
									"functionSelector": "c2077116",
									"id": 3413,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "simulateHandleOp",
									"nameLocation": "8480:16:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3410,
												"mutability": "mutable",
												"name": "op",
												"nameLocation": "8520:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 3413,
												"src": "8497:25:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 3409,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3408,
														"name": "UserOperation",
														"nameLocations": [
															"8497:13:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "8497:13:16"
													},
													"referencedDeclaration": 3553,
													"src": "8497:13:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8496:27:16"
									},
									"returnParameters": {
										"id": 3412,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8532:0:16"
									},
									"scope": 3424,
									"src": "8471:62:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"errorSelector": "cd8ac246",
									"id": 3423,
									"name": "ExecutionResult",
									"nameLocation": "8545:15:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3422,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3415,
												"mutability": "mutable",
												"name": "preOpGas",
												"nameLocation": "8569:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 3423,
												"src": "8561:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8561:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3417,
												"mutability": "mutable",
												"name": "paid",
												"nameLocation": "8587:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 3423,
												"src": "8579:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8579:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3419,
												"mutability": "mutable",
												"name": "validAfter",
												"nameLocation": "8600:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3423,
												"src": "8593:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 3418,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8593:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3421,
												"mutability": "mutable",
												"name": "validBefore",
												"nameLocation": "8619:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 3423,
												"src": "8612:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 3420,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8612:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8560:71:16"
									},
									"src": "8539:93:16"
								}
							],
							"scope": 3425,
							"src": "400:8234:16",
							"usedErrors": [
								3292,
								3297,
								3358,
								3376,
								3406,
								3423
							]
						}
					],
					"src": "163:8472:16"
				},
				"id": 16
			},
			"src/interfaces/IStakeManager.sol": {
				"ast": {
					"absolutePath": "src/interfaces/IStakeManager.sol",
					"exportedSymbols": {
						"IStakeManager": [
							3528
						]
					},
					"id": 3529,
					"license": "GPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3426,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "41:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IStakeManager",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3427,
								"nodeType": "StructuredDocumentation",
								"src": "67:205:17",
								"text": " manage deposits and stakes.\n deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\n stake is value locked for at least \"unstakeDelay\" by a paymaster."
							},
							"fullyImplemented": false,
							"id": 3528,
							"linearizedBaseContracts": [
								3528
							],
							"name": "IStakeManager",
							"nameLocation": "283:13:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4",
									"id": 3433,
									"name": "Deposited",
									"nameLocation": "310:9:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3429,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "345:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3433,
												"src": "329:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3428,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "329:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3431,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalDeposit",
												"nameLocation": "370:12:17",
												"nodeType": "VariableDeclaration",
												"scope": 3433,
												"src": "362:20:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "362:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "319:69:17"
									},
									"src": "304:85:17"
								},
								{
									"anonymous": false,
									"eventSelector": "d1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb",
									"id": 3441,
									"name": "Withdrawn",
									"nameLocation": "401:9:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3435,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "436:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3441,
												"src": "420:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3434,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "420:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3437,
												"indexed": false,
												"mutability": "mutable",
												"name": "withdrawAddress",
												"nameLocation": "461:15:17",
												"nodeType": "VariableDeclaration",
												"scope": 3441,
												"src": "453:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3436,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3439,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "494:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3441,
												"src": "486:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "486:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "410:96:17"
									},
									"src": "395:112:17"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3442,
										"nodeType": "StructuredDocumentation",
										"src": "513:52:17",
										"text": "Emitted once a stake is scheduled for withdrawal"
									},
									"eventSelector": "a5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01",
									"id": 3450,
									"name": "StakeLocked",
									"nameLocation": "576:11:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3444,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "613:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3450,
												"src": "597:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "597:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3446,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalStaked",
												"nameLocation": "638:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 3450,
												"src": "630:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3445,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "630:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3448,
												"indexed": false,
												"mutability": "mutable",
												"name": "withdrawTime",
												"nameLocation": "667:12:17",
												"nodeType": "VariableDeclaration",
												"scope": 3450,
												"src": "659:20:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3447,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "587:98:17"
									},
									"src": "570:116:17"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3451,
										"nodeType": "StructuredDocumentation",
										"src": "692:52:17",
										"text": "Emitted once a stake is scheduled for withdrawal"
									},
									"eventSelector": "fa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a",
									"id": 3457,
									"name": "StakeUnlocked",
									"nameLocation": "755:13:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3453,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "794:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3457,
												"src": "778:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "778:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3455,
												"indexed": false,
												"mutability": "mutable",
												"name": "withdrawTime",
												"nameLocation": "819:12:17",
												"nodeType": "VariableDeclaration",
												"scope": 3457,
												"src": "811:20:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "811:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "768:69:17"
									},
									"src": "749:89:17"
								},
								{
									"anonymous": false,
									"eventSelector": "b7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3",
									"id": 3465,
									"name": "StakeWithdrawn",
									"nameLocation": "850:14:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3459,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "890:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3465,
												"src": "874:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3458,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "874:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3461,
												"indexed": false,
												"mutability": "mutable",
												"name": "withdrawAddress",
												"nameLocation": "915:15:17",
												"nodeType": "VariableDeclaration",
												"scope": 3465,
												"src": "907:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3463,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "948:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3465,
												"src": "940:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "940:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "864:96:17"
									},
									"src": "844:117:17"
								},
								{
									"canonicalName": "IStakeManager.DepositInfo",
									"id": 3476,
									"members": [
										{
											"constant": false,
											"id": 3467,
											"mutability": "mutable",
											"name": "deposit",
											"nameLocation": "1693:7:17",
											"nodeType": "VariableDeclaration",
											"scope": 3476,
											"src": "1685:15:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint112",
												"typeString": "uint112"
											},
											"typeName": {
												"id": 3466,
												"name": "uint112",
												"nodeType": "ElementaryTypeName",
												"src": "1685:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint112",
													"typeString": "uint112"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3469,
											"mutability": "mutable",
											"name": "staked",
											"nameLocation": "1715:6:17",
											"nodeType": "VariableDeclaration",
											"scope": 3476,
											"src": "1710:11:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 3468,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1710:4:17",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3471,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "1739:5:17",
											"nodeType": "VariableDeclaration",
											"scope": 3476,
											"src": "1731:13:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint112",
												"typeString": "uint112"
											},
											"typeName": {
												"id": 3470,
												"name": "uint112",
												"nodeType": "ElementaryTypeName",
												"src": "1731:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint112",
													"typeString": "uint112"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3473,
											"mutability": "mutable",
											"name": "unstakeDelaySec",
											"nameLocation": "1761:15:17",
											"nodeType": "VariableDeclaration",
											"scope": 3476,
											"src": "1754:22:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 3472,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "1754:6:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3475,
											"mutability": "mutable",
											"name": "withdrawTime",
											"nameLocation": "1793:12:17",
											"nodeType": "VariableDeclaration",
											"scope": 3476,
											"src": "1786:19:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 3474,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "1786:6:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DepositInfo",
									"nameLocation": "1663:11:17",
									"nodeType": "StructDefinition",
									"scope": 3528,
									"src": "1656:156:17",
									"visibility": "public"
								},
								{
									"canonicalName": "IStakeManager.StakeInfo",
									"id": 3481,
									"members": [
										{
											"constant": false,
											"id": 3478,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "1914:5:17",
											"nodeType": "VariableDeclaration",
											"scope": 3481,
											"src": "1906:13:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3477,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1906:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3480,
											"mutability": "mutable",
											"name": "unstakeDelaySec",
											"nameLocation": "1937:15:17",
											"nodeType": "VariableDeclaration",
											"scope": 3481,
											"src": "1929:23:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3479,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1929:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakeInfo",
									"nameLocation": "1886:9:17",
									"nodeType": "StructDefinition",
									"scope": 3528,
									"src": "1879:80:17",
									"visibility": "public"
								},
								{
									"functionSelector": "5287ce12",
									"id": 3489,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getDepositInfo",
									"nameLocation": "1974:14:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3483,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1997:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3489,
												"src": "1989:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3482,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1989:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1988:17:17"
									},
									"returnParameters": {
										"id": 3488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3487,
												"mutability": "mutable",
												"name": "info",
												"nameLocation": "2048:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 3489,
												"src": "2029:23:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DepositInfo_$3476_memory_ptr",
													"typeString": "struct IStakeManager.DepositInfo"
												},
												"typeName": {
													"id": 3486,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3485,
														"name": "DepositInfo",
														"nameLocations": [
															"2029:11:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3476,
														"src": "2029:11:17"
													},
													"referencedDeclaration": 3476,
													"src": "2029:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DepositInfo_$3476_storage_ptr",
														"typeString": "struct IStakeManager.DepositInfo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2028:25:17"
									},
									"scope": 3528,
									"src": "1965:89:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3490,
										"nodeType": "StructuredDocumentation",
										"src": "2060:55:17",
										"text": "return the deposit (for gas payment) of the account"
									},
									"functionSelector": "70a08231",
									"id": 3497,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2129:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3492,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2147:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3497,
												"src": "2139:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3491,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2139:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2138:17:17"
									},
									"returnParameters": {
										"id": 3496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3495,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3497,
												"src": "2179:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3494,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2179:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2178:9:17"
									},
									"scope": 3528,
									"src": "2120:68:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3498,
										"nodeType": "StructuredDocumentation",
										"src": "2194:58:17",
										"text": " add to the deposit of the given account"
									},
									"functionSelector": "b760faf9",
									"id": 3503,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "depositTo",
									"nameLocation": "2266:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3500,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2284:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3503,
												"src": "2276:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2276:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2275:17:17"
									},
									"returnParameters": {
										"id": 3502,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2309:0:17"
									},
									"scope": 3528,
									"src": "2257:53:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3504,
										"nodeType": "StructuredDocumentation",
										"src": "2316:201:17",
										"text": " add to the account's stake - amount and delay\n any pending unstake is first cancelled.\n @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn."
									},
									"functionSelector": "0396cb60",
									"id": 3509,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addStake",
									"nameLocation": "2531:8:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3506,
												"mutability": "mutable",
												"name": "_unstakeDelaySec",
												"nameLocation": "2547:16:17",
												"nodeType": "VariableDeclaration",
												"scope": 3509,
												"src": "2540:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 3505,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2540:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2539:25:17"
									},
									"returnParameters": {
										"id": 3508,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2581:0:17"
									},
									"scope": 3528,
									"src": "2522:60:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3510,
										"nodeType": "StructuredDocumentation",
										"src": "2588:128:17",
										"text": " attempt to unlock the stake.\n the value can be withdrawn (using withdrawStake) after the unstake delay."
									},
									"functionSelector": "bb9fe6bf",
									"id": 3513,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unlockStake",
									"nameLocation": "2730:11:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3511,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2741:2:17"
									},
									"returnParameters": {
										"id": 3512,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2752:0:17"
									},
									"scope": 3528,
									"src": "2721:32:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3514,
										"nodeType": "StructuredDocumentation",
										"src": "2759:194:17",
										"text": " withdraw from the (unlocked) stake.\n must first call unlockStake and wait for the unstakeDelay to pass\n @param withdrawAddress the address to send withdrawn value."
									},
									"functionSelector": "c23a5cea",
									"id": 3519,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawStake",
									"nameLocation": "2967:13:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3516,
												"mutability": "mutable",
												"name": "withdrawAddress",
												"nameLocation": "2997:15:17",
												"nodeType": "VariableDeclaration",
												"scope": 3519,
												"src": "2981:31:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 3515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2981:15:17",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2980:33:17"
									},
									"returnParameters": {
										"id": 3518,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3022:0:17"
									},
									"scope": 3528,
									"src": "2958:65:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3520,
										"nodeType": "StructuredDocumentation",
										"src": "3029:165:17",
										"text": " withdraw from the deposit.\n @param withdrawAddress the address to send withdrawn value.\n @param withdrawAmount the amount to withdraw."
									},
									"functionSelector": "205c2878",
									"id": 3527,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawTo",
									"nameLocation": "3208:10:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3522,
												"mutability": "mutable",
												"name": "withdrawAddress",
												"nameLocation": "3235:15:17",
												"nodeType": "VariableDeclaration",
												"scope": 3527,
												"src": "3219:31:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 3521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3219:15:17",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3524,
												"mutability": "mutable",
												"name": "withdrawAmount",
												"nameLocation": "3260:14:17",
												"nodeType": "VariableDeclaration",
												"scope": 3527,
												"src": "3252:22:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3523,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3252:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3218:57:17"
									},
									"returnParameters": {
										"id": 3526,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3284:0:17"
									},
									"scope": 3528,
									"src": "3199:86:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3529,
							"src": "273:3014:17",
							"usedErrors": []
						}
					],
					"src": "41:3246:17"
				},
				"id": 17
			},
			"src/interfaces/UserOperation.sol": {
				"ast": {
					"absolutePath": "src/interfaces/UserOperation.sol",
					"exportedSymbols": {
						"UserOperation": [
							3553
						],
						"UserOperationLib": [
							3657
						]
					},
					"id": 3658,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3530,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "36:24:18"
						},
						{
							"canonicalName": "UserOperation",
							"id": 3553,
							"members": [
								{
									"constant": false,
									"id": 3532,
									"mutability": "mutable",
									"name": "sender",
									"nameLocation": "1114:6:18",
									"nodeType": "VariableDeclaration",
									"scope": 3553,
									"src": "1106:14:18",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 3531,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1106:7:18",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 3534,
									"mutability": "mutable",
									"name": "nonce",
									"nameLocation": "1138:5:18",
									"nodeType": "VariableDeclaration",
									"scope": 3553,
									"src": "1130:13:18",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3533,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1130:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 3536,
									"mutability": "mutable",
									"name": "initCode",
									"nameLocation": "1159:8:18",
									"nodeType": "VariableDeclaration",
									"scope": 3553,
									"src": "1153:14:18",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes_storage_ptr",
										"typeString": "bytes"
									},
									"typeName": {
										"id": 3535,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "1153:5:18",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 3538,
									"mutability": "mutable",
									"name": "callData",
									"nameLocation": "1183:8:18",
									"nodeType": "VariableDeclaration",
									"scope": 3553,
									"src": "1177:14:18",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes_storage_ptr",
										"typeString": "bytes"
									},
									"typeName": {
										"id": 3537,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "1177:5:18",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 3540,
									"mutability": "mutable",
									"name": "callGasLimit",
									"nameLocation": "1209:12:18",
									"nodeType": "VariableDeclaration",
									"scope": 3553,
									"src": "1201:20:18",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3539,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1201:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 3542,
									"mutability": "mutable",
									"name": "verificationGasLimit",
									"nameLocation": "1239:20:18",
									"nodeType": "VariableDeclaration",
									"scope": 3553,
									"src": "1231:28:18",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3541,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1231:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 3544,
									"mutability": "mutable",
									"name": "preVerificationGas",
									"nameLocation": "1277:18:18",
									"nodeType": "VariableDeclaration",
									"scope": 3553,
									"src": "1269:26:18",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3543,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1269:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 3546,
									"mutability": "mutable",
									"name": "maxFeePerGas",
									"nameLocation": "1313:12:18",
									"nodeType": "VariableDeclaration",
									"scope": 3553,
									"src": "1305:20:18",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3545,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1305:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 3548,
									"mutability": "mutable",
									"name": "maxPriorityFeePerGas",
									"nameLocation": "1343:20:18",
									"nodeType": "VariableDeclaration",
									"scope": 3553,
									"src": "1335:28:18",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3547,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1335:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 3550,
									"mutability": "mutable",
									"name": "paymasterAndData",
									"nameLocation": "1379:16:18",
									"nodeType": "VariableDeclaration",
									"scope": 3553,
									"src": "1373:22:18",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes_storage_ptr",
										"typeString": "bytes"
									},
									"typeName": {
										"id": 3549,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "1373:5:18",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 3552,
									"mutability": "mutable",
									"name": "signature",
									"nameLocation": "1411:9:18",
									"nodeType": "VariableDeclaration",
									"scope": 3553,
									"src": "1405:15:18",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes_storage_ptr",
										"typeString": "bytes"
									},
									"typeName": {
										"id": 3551,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "1405:5:18",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "UserOperation",
							"nameLocation": "1081:13:18",
							"nodeType": "StructDefinition",
							"scope": 3658,
							"src": "1074:353:18",
							"visibility": "public"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "UserOperationLib",
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 3657,
							"linearizedBaseContracts": [
								3657
							],
							"name": "UserOperationLib",
							"nameLocation": "1437:16:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3573,
										"nodeType": "Block",
										"src": "1543:199:18",
										"statements": [
											{
												"assignments": [
													3562
												],
												"declarations": [
													{
														"constant": false,
														"id": 3562,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "1561:4:18",
														"nodeType": "VariableDeclaration",
														"scope": 3573,
														"src": "1553:12:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3561,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1553:7:18",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3563,
												"nodeType": "VariableDeclarationStatement",
												"src": "1553:12:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1667:30:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1668:28:18",
															"value": {
																"arguments": [
																	{
																		"name": "userOp",
																		"nodeType": "YulIdentifier",
																		"src": "1689:6:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1676:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1676:20:18"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "1668:4:18"
																}
															]
														}
													]
												},
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 3562,
														"isOffset": false,
														"isSlot": false,
														"src": "1668:4:18",
														"valueSize": 1
													},
													{
														"declaration": 3556,
														"isOffset": false,
														"isSlot": false,
														"src": "1689:6:18",
														"valueSize": 1
													}
												],
												"id": 3564,
												"nodeType": "InlineAssembly",
												"src": "1658:39:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3569,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3562,
																	"src": "1729:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 3568,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1721:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint160_$",
																	"typeString": "type(uint160)"
																},
																"typeName": {
																	"id": 3567,
																	"name": "uint160",
																	"nodeType": "ElementaryTypeName",
																	"src": "1721:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 3570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1721:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 3566,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1713:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 3565,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1713:7:18",
															"typeDescriptions": {}
														}
													},
													"id": 3571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1713:22:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 3560,
												"id": 3572,
												"nodeType": "Return",
												"src": "1706:29:18"
											}
										]
									},
									"id": 3574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSender",
									"nameLocation": "1470:9:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3556,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "1503:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3574,
												"src": "1480:29:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 3555,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3554,
														"name": "UserOperation",
														"nameLocations": [
															"1480:13:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "1480:13:18"
													},
													"referencedDeclaration": 3553,
													"src": "1480:13:18",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1479:31:18"
									},
									"returnParameters": {
										"id": 3560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3559,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3574,
												"src": "1534:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1534:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1533:9:18"
									},
									"scope": 3657,
									"src": "1461:281:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3608,
										"nodeType": "Block",
										"src": "1963:391:18",
										"statements": [
											{
												"id": 3607,
												"nodeType": "UncheckedBlock",
												"src": "1969:379:18",
												"statements": [
													{
														"assignments": [
															3583
														],
														"declarations": [
															{
																"constant": false,
																"id": 3583,
																"mutability": "mutable",
																"name": "maxFeePerGas",
																"nameLocation": "1997:12:18",
																"nodeType": "VariableDeclaration",
																"scope": 3607,
																"src": "1989:20:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3582,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1989:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3586,
														"initialValue": {
															"expression": {
																"id": 3584,
																"name": "userOp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3577,
																"src": "2012:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
																	"typeString": "struct UserOperation calldata"
																}
															},
															"id": 3585,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2019:12:18",
															"memberName": "maxFeePerGas",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3546,
															"src": "2012:19:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1989:42:18"
													},
													{
														"assignments": [
															3588
														],
														"declarations": [
															{
																"constant": false,
																"id": 3588,
																"mutability": "mutable",
																"name": "maxPriorityFeePerGas",
																"nameLocation": "2049:20:18",
																"nodeType": "VariableDeclaration",
																"scope": 3607,
																"src": "2041:28:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3587,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2041:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3591,
														"initialValue": {
															"expression": {
																"id": 3589,
																"name": "userOp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3577,
																"src": "2072:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
																	"typeString": "struct UserOperation calldata"
																}
															},
															"id": 3590,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2079:20:18",
															"memberName": "maxPriorityFeePerGas",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3548,
															"src": "2072:27:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2041:58:18"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3594,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3592,
																"name": "maxFeePerGas",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3583,
																"src": "2113:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 3593,
																"name": "maxPriorityFeePerGas",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3588,
																"src": "2129:20:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2113:36:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3598,
														"nodeType": "IfStatement",
														"src": "2109:161:18",
														"trueBody": {
															"id": 3597,
															"nodeType": "Block",
															"src": "2151:119:18",
															"statements": [
																{
																	"expression": {
																		"id": 3595,
																		"name": "maxFeePerGas",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3583,
																		"src": "2247:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 3581,
																	"id": 3596,
																	"nodeType": "Return",
																	"src": "2240:19:18"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 3600,
																	"name": "maxFeePerGas",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3583,
																	"src": "2290:12:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3604,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3601,
																		"name": "maxPriorityFeePerGas",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3588,
																		"src": "2304:20:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"expression": {
																			"id": 3602,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "2327:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 3603,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2333:7:18",
																		"memberName": "basefee",
																		"nodeType": "MemberAccess",
																		"src": "2327:13:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2304:36:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3599,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3656,
																"src": "2286:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3605,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2286:55:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3581,
														"id": 3606,
														"nodeType": "Return",
														"src": "2279:62:18"
													}
												]
											}
										]
									},
									"id": 3609,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "gasPrice",
									"nameLocation": "1891:8:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3577,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "1923:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3609,
												"src": "1900:29:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 3576,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3575,
														"name": "UserOperation",
														"nameLocations": [
															"1900:13:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "1900:13:18"
													},
													"referencedDeclaration": 3553,
													"src": "1900:13:18",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1899:31:18"
									},
									"returnParameters": {
										"id": 3581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3580,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3609,
												"src": "1954:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1954:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1953:9:18"
									},
									"scope": 3657,
									"src": "1882:472:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3623,
										"nodeType": "Block",
										"src": "2446:628:18",
										"statements": [
											{
												"assignments": [
													3618
												],
												"declarations": [
													{
														"constant": false,
														"id": 3618,
														"mutability": "mutable",
														"name": "sig",
														"nameLocation": "2539:3:18",
														"nodeType": "VariableDeclaration",
														"scope": 3623,
														"src": "2524:18:18",
														"stateVariable": false,
														"storageLocation": "calldata",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_calldata_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 3617,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2524:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3621,
												"initialValue": {
													"expression": {
														"id": 3619,
														"name": "userOp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3612,
														"src": "2545:6:18",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
															"typeString": "struct UserOperation calldata"
														}
													},
													"id": 3620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2552:9:18",
													"memberName": "signature",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 3552,
													"src": "2545:16:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2524:37:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2816:252:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2830:17:18",
															"value": {
																"name": "userOp",
																"nodeType": "YulIdentifier",
																"src": "2841:6:18"
															},
															"variables": [
																{
																	"name": "ofs",
																	"nodeType": "YulTypedName",
																	"src": "2834:3:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2860:40:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "sig.offset",
																				"nodeType": "YulIdentifier",
																				"src": "2879:10:18"
																			},
																			{
																				"name": "ofs",
																				"nodeType": "YulIdentifier",
																				"src": "2891:3:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2875:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2875:20:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2897:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2871:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2871:29:18"
															},
															"variables": [
																{
																	"name": "len",
																	"nodeType": "YulTypedName",
																	"src": "2864:3:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2913:18:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2926:4:18",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2920:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2920:11:18"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "2913:3:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2951:4:18",
																		"type": "",
																		"value": "0x40"
																	},
																	{
																		"arguments": [
																			{
																				"name": "ret",
																				"nodeType": "YulIdentifier",
																				"src": "2961:3:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "len",
																						"nodeType": "YulIdentifier",
																						"src": "2970:3:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2975:2:18",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2966:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2966:12:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2957:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2957:22:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2944:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2944:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2944:36:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ret",
																		"nodeType": "YulIdentifier",
																		"src": "3000:3:18"
																	},
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "3005:3:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2993:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2993:16:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2993:16:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ret",
																				"nodeType": "YulIdentifier",
																				"src": "3039:3:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3044:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3035:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3035:12:18"
																	},
																	{
																		"name": "ofs",
																		"nodeType": "YulIdentifier",
																		"src": "3049:3:18"
																	},
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "3054:3:18"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "3022:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3022:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3022:36:18"
														}
													]
												},
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 3615,
														"isOffset": false,
														"isSlot": false,
														"src": "2913:3:18",
														"valueSize": 1
													},
													{
														"declaration": 3615,
														"isOffset": false,
														"isSlot": false,
														"src": "2961:3:18",
														"valueSize": 1
													},
													{
														"declaration": 3615,
														"isOffset": false,
														"isSlot": false,
														"src": "3000:3:18",
														"valueSize": 1
													},
													{
														"declaration": 3615,
														"isOffset": false,
														"isSlot": false,
														"src": "3039:3:18",
														"valueSize": 1
													},
													{
														"declaration": 3618,
														"isOffset": true,
														"isSlot": false,
														"src": "2879:10:18",
														"suffix": "offset",
														"valueSize": 1
													},
													{
														"declaration": 3612,
														"isOffset": false,
														"isSlot": false,
														"src": "2841:6:18",
														"valueSize": 1
													}
												],
												"id": 3622,
												"nodeType": "InlineAssembly",
												"src": "2807:261:18"
											}
										]
									},
									"id": 3624,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "pack",
									"nameLocation": "2369:4:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3612,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "2397:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3624,
												"src": "2374:29:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 3611,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3610,
														"name": "UserOperation",
														"nameLocations": [
															"2374:13:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "2374:13:18"
													},
													"referencedDeclaration": 3553,
													"src": "2374:13:18",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2373:31:18"
									},
									"returnParameters": {
										"id": 3616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3615,
												"mutability": "mutable",
												"name": "ret",
												"nameLocation": "2441:3:18",
												"nodeType": "VariableDeclaration",
												"scope": 3624,
												"src": "2428:16:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3614,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2428:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2427:18:18"
									},
									"scope": 3657,
									"src": "2360:714:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3638,
										"nodeType": "Block",
										"src": "3157:47:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3634,
																	"name": "userOp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3627,
																	"src": "3189:6:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
																		"typeString": "struct UserOperation calldata"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
																		"typeString": "struct UserOperation calldata"
																	}
																],
																"id": 3633,
																"name": "pack",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3624,
																"src": "3184:4:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_struct$_UserOperation_$3553_calldata_ptr_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (struct UserOperation calldata) pure returns (bytes memory)"
																}
															},
															"id": 3635,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3184:12:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 3632,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "3174:9:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 3636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3174:23:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 3631,
												"id": 3637,
												"nodeType": "Return",
												"src": "3167:30:18"
											}
										]
									},
									"id": 3639,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hash",
									"nameLocation": "3089:4:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3628,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3627,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "3117:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3639,
												"src": "3094:29:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$3553_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 3626,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3625,
														"name": "UserOperation",
														"nameLocations": [
															"3094:13:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3553,
														"src": "3094:13:18"
													},
													"referencedDeclaration": 3553,
													"src": "3094:13:18",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$3553_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3093:31:18"
									},
									"returnParameters": {
										"id": 3631,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3630,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3639,
												"src": "3148:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3629,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3148:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3147:9:18"
									},
									"scope": 3657,
									"src": "3080:124:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3655,
										"nodeType": "Block",
										"src": "3277:37:18",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3650,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3648,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3641,
															"src": "3294:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3649,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3643,
															"src": "3298:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3294:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3652,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3643,
														"src": "3306:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3653,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3294:13:18",
													"trueExpression": {
														"id": 3651,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3641,
														"src": "3302:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3647,
												"id": 3654,
												"nodeType": "Return",
												"src": "3287:20:18"
											}
										]
									},
									"id": 3656,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "3219:3:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3641,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3231:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3656,
												"src": "3223:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3640,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3223:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3643,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3242:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3656,
												"src": "3234:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3234:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3222:22:18"
									},
									"returnParameters": {
										"id": 3647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3646,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3656,
												"src": "3268:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3645,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3268:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3267:9:18"
									},
									"scope": 3657,
									"src": "3210:104:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3658,
							"src": "1429:1887:18",
							"usedErrors": []
						}
					],
					"src": "36:3280:18"
				},
				"id": 18
			}
		}
	}
}